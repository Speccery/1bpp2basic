XGA99 CROSS-ASSEMBLER   VERSION 3.0.1
              > config.gpl
0001          * config.gpl
0002          * Configurator for GROMMY2
0003          * At this point this is just a demo how to render the generated screen.gpl
0004          * EP 2023-11-26
0005          *
0006          * Compile the GPL code to binary with:
0007          * xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
0008          * output file is config.bin, since the filename ends with g it is treated
0009          * by an emulator such as js99er.net as a GROM file.
0010          *
0011          * This file includes the screen.gpl file at the very end.
0012          *
0013          
0014          LALIGN    EQU >02              Left alignment of text
0015          LALIGN2   EQU >03
0016          LAYOUTVER EQU 5         Row for Version number
0017          LAYOUTBAN EQU 8        Row for selected bank display
0018          VEROFS    EQU 32*LAYOUTVER
0019          VALIDIND  EQU VEROFS-29         ; Indicator for valid command
0020          
0021          * A few variables for the grommy2 config to use.
0022          * I am not sure if these are free to use, but I will try :)
0023          XREG    EQU >832C   ; ** Program text or token pointer (in BASIC?)
0024          YREG    EQU >832E   ; ** Pointer to line number tale (in BASIC)
0025          ZREG    EQU >8330   ; ** Start of line number table pointer (in BASIC)
0026          ; >8332 .. 8337 seem to contain pointers also used by BASIC not GPL
0027          
0028          * Grommy2 command buffer in scratchpad
0029          GCMDBYTE EQU >8340
0030          GCMDP2   EQU >8342
0031          GCMDP3   EQU >8343
0032          GCMDP4   EQU >8344
0033          GCMDP5   EQU >8345
0034          GCMDP6   EQU >8346
0035          GCMDP7   EQU >8347
0036          
0037          BANK    EQU >8350           Active bank
0038          SHADOW  EQU >8351           Shadow enable / disable
0039          PAD0    EQU >835C
0040          PAD1    EQU >835D
0041          PAD2    EQU >835E
0042          PAD3    EQU >835F
0043          PAD4    EQU >8360
0044          PAD5    EQU >8361
0045          DUMPA   EQU >8362           ; GROM Dump address
0046          VRAMP   EQU >8340           ; VRAM ptr overlays GCMDBYTE
0047          
0048          SCANKEY EQU >8375
0049          VDPTIMER EQU >8379          ; Incremented by VDP interrupts
0050          * Hardware interface address
0051          HWIF     EQU >5FF0
0052          
0053          HEXBASECH EQU >E0         ; Base character for hex display
0054          ALIVECH   EQU >DF         ; Placed in top right corner, show we are alive
0055          
0056          
0057 6000 AA  G6000  DATA >AA01             standard header  version 1
     6001 01
0058 6002 00         DATA >0000             # of programs 0
     6003 00
0059 6004 00         DATA >0000             no power up
     6005 00
0060 6006 60         DATA G6010             program
     6007 10
0061 6008 00         DATA >0000             DSRs
     6009 00
0062 600A 00         DATA >0000             subprograms
     600B 00
0063 600C 00         DATA >0000
     600D 00
0064 600E 00         DATA >0000
     600F 00
0065          
0066 6010 00  G6010  DATA >0000         * No next program
     6011 00
0067 6012 60         DATA GPROG
     6013 2A
0068 6014 0E         STRI 'GROMMY2 CONFIG'
     6015 47  
     6016 52  
     6017 4F  
     6018 4D  
     6019 4D  
     601A 59  
     601B 32  
     601C 20  
     601D 43  
     601E 4F  
     601F 4E  
     6020 46  
     6021 49  
     6022 47  
0069          
0070          GVREGS
0071 6023 E0      BYTE  >E0              VDP registers values: standard mode
0072 6024 00      BYTE  >00              screen image at >0000
0073 6025 0E      BYTE  >0E              color table at >0380
0074 6026 01      BYTE  >01              char patterns at >0800
0075 6027 06      BYTE  >06              sprite attributes at >0300
0076 6028 00      BYTE  >00              sprite patterns at >0000
0077 6029 F5      BYTE  >F5              text/screen colors: white / light blue
0078          
0079          GPROG
0080 602A 86      CLR   @>8374
     602B 74  
0081 602C BF      DST   >0900,@>834A     load upper case chars 32->
     602D 4A  
     602E 09  
     602F 00
0082 6030 06      CALL  G@>0018
     6031 00  
     6032 18
0083          * Setup roughly as with mini memory
0084 6033 39      MOVE >0007,G@GVREGS,#>01    Set VDP Regs
     6034 00  
     6035 07
     6036 01  
     6037 60  
     6038 23
0085 6039 86      CLR   V@>0800          clear charpats 0-31
     603A A8  
     603B 00
0086 603C 35      MOVE  >00FF,V@>0800,V@>0801
     603D 00  
     603E FF
     603F A8  
     6040 01
     6041 A8  
     6042 00
0087          
0088 6043 BE      ST    >7E,@>8373       init subroutine stack
     6044 73  
     6045 7E  
0089 6046 87      DCLR  @>8322           clear error code
     6047 22  
0090 6048 87      DCLR  @>8348           clear flags
     6049 48  
0091          
0092 604A 87      DCLR   @DUMPA
     604B 62  
0093 604C 86      CLR    @BANK           Actually init from grommy2
     604D 50  
0094 604E 86      CLR    @SHADOW         Actually init from grommy2
     604F 51  
0095          
0096 6050 BF      DST   >1234,@XREG
     6051 2C  
     6052 12  
     6053 34
0097 6054 BF      DST   >5679,@YREG
     6055 2E  
     6056 56  
     6057 79
0098 6058 BF      DST   >DEAD,@ZREG
     6059 30  
     605A DE  
     605B AD
0099          
0100 605C 06      CALL G@GVDPSETUP
     605D 66  
     605E C8
0101          
0102 605F 06      CALL G@G_SCR1       ; Setup the screen which was automatically generated
     6060 69  
     6061 B3
0103          * Setup additional chars E0..EF as numbers 0..9 and A..F
0104          * 0x980 = hex(0x800+ord('0')*8)
0105          * 0xa08 = hex(0x800+ord('A')*8)
0106          * 0xf00 = hex(0x800+0xe0*8)
0107          * 0xf50 = hex(0x800+0xea*8)
0108          CHSRC1 EQU >800+(8*'0')
0109          CHSRC2 EQU >800+(8*'A')
0110          CHOFS1 EQU >800+(8*HEXBASECH)
0111          CHOFS2 EQU >800+(8*(HEXBASECH+10))
0112 6062 35      MOVE 10*8,V@CHSRC1,V@CHOFS1  * 10 number patterns
     6063 00  
     6064 50
     6065 AF  
     6066 0F
     6067 00
     6068 A9  
     6069 80
0113 606A 35      MOVE  6*8,V@CHSRC2,V@CHOFS2
     606B 00  
     606C 30
     606D AF  
     606E 0F
     606F 50
     6070 AA  
     6071 08
0114          * Set the colors for these characters.
0115 6072 BE      ST   >A5,V@>39C
     6073 A3  
     6074 9C
     6075 A5  
0116 6076 BE      ST   >A5,V@>39D
     6077 A3  
     6078 9D
     6079 A5  
0117          * Make the fonts "bold"
0118 607A BF      DST  >F00,@VRAMP
     607B 40  
     607C 0F  
     607D 00
0119 607E BC  !   ST   V@0(@VRAMP),@PAD0
     607F 5C  
     6080 E0  
     6081 00
     6082 40
0120 6083 E6      SRL  1,@PAD0
     6084 5C  
     6085 01  
0121 6086 B4      OR   V@0(@VRAMP),@PAD0
     6087 5C  
     6088 E0  
     6089 00
     608A 40
0122 608B BC      ST  @PAD0,V@0(@VRAMP)
     608C E0  
     608D 00
     608E 40
     608F 5C  
0123 6090 91      DINC @VRAMP
     6091 40  
0124 6092 D7      DCEQ >F80,@VRAMP
     6093 40  
     6094 0F  
     6095 80
0125 6096 40      BR   -!
     6097 7E  
0126          * Copy the fonts to make inverse duplicates
0127 6098 35      MOVE >80,V@>F00,V@>F80
     6099 00  
     609A 80
     609B AF  
     609C 0F
     609D 80
     609E AF  
     609F 0F
     60A0 00
0128 60A1 BE      ST   >5A,V@>39E
     60A2 A3  
     60A3 9E
     60A4 5A  
0129 60A5 BE      ST   >5A,V@>39F
     60A6 A3  
     60A7 9F
     60A8 5A  
0130          
0131          SCREEN1:
0132          * Use the FMT token to add some strings on the screen
0133 60A9 08      FMT
0134 60AA FF      COL LALIGN
     60AB 02  
0135 60AC FE      ROW LAYOUTVER
     60AD 05  
0136 60AE 1D      HTEX 'VERSION 0.0.00 BANK 0 SHADOW 0'
     60AF 56  
     60B0 45  
     60B1 52  
     60B2 53  
     60B3 49  
     60B4 4F  
     60B5 4E  
     60B6 20  
     60B7 30  
     60B8 2E  
     60B9 30  
     60BA 2E  
     60BB 30  
     60BC 30  
     60BD 20  
     60BE 42  
     60BF 41  
     60C0 4E  
     60C1 4B  
     60C2 20  
     60C3 30  
     60C4 20  
     60C5 53  
     60C6 48  
     60C7 41  
     60C8 44  
     60C9 4F  
     60CA 57  
     60CB 20  
     60CC 30  
0137 60CD A0      ROW+ >01
0138 60CE FF      COL LALIGN
     60CF 02  
0139 60D0 19      HTEX 'SELECT GROM BANK FOR READS'
     60D1 53  
     60D2 45  
     60D3 4C  
     60D4 45  
     60D5 43  
     60D6 54  
     60D7 20  
     60D8 47  
     60D9 52  
     60DA 4F  
     60DB 4D  
     60DC 20  
     60DD 42  
     60DE 41  
     60DF 4E  
     60E0 4B  
     60E1 20  
     60E2 46  
     60E3 4F  
     60E4 52  
     60E5 20  
     60E6 52  
     60E7 45  
     60E8 41  
     60E9 44  
     60EA 53  
0140 60EB A0      ROW+ >01
0141 60EC FF      COL LALIGN2
     60ED 03  
0142 60EE 0C      HTEX '0 SYSTEM BANK'
     60EF 30  
     60F0 20  
     60F1 53  
     60F2 59  
     60F3 53  
     60F4 54  
     60F5 45  
     60F6 4D  
     60F7 20  
     60F8 42  
     60F9 41  
     60FA 4E  
     60FB 4B  
0143 60FC A0      ROW+ >01
0144 60FD FF      COL LALIGN2
     60FE 03  
0145 60FF 0C      HTEX '1 USER BANK 1'
     6100 31  
     6101 20  
     6102 55  
     6103 53  
     6104 45  
     6105 52  
     6106 20  
     6107 42  
     6108 41  
     6109 4E  
     610A 4B  
     610B 20  
     610C 31  
0146 610D A0      ROW+ >01
0147 610E FF      COL LALIGN2
     610F 03  
0148 6110 0C      HTEX '2 USER BANK 2'
     6111 32  
     6112 20  
     6113 55  
     6114 53  
     6115 45  
     6116 52  
     6117 20  
     6118 42  
     6119 41  
     611A 4E  
     611B 4B  
     611C 20  
     611D 32  
0149 611E A0      ROW+ >01
0150 611F FF      COL LALIGN2
     6120 03  
0151 6121 0A      HTEX '3 GRAM BANK'
     6122 33  
     6123 20  
     6124 47  
     6125 52  
     6126 41  
     6127 4D  
     6128 20  
     6129 42  
     612A 41  
     612B 4E  
     612C 4B  
0152          
0153 612D A1      ROW+ >02
0154 612E FF      COL LALIGN
     612F 02  
0155 6130 09      HTEX 'SHADOW RAM'
     6131 53  
     6132 48  
     6133 41  
     6134 44  
     6135 4F  
     6136 57  
     6137 20  
     6138 52  
     6139 41  
     613A 4D  
0156 613B A0      ROW+ >01
0157 613C FF      COL LALIGN2
     613D 03  
0158 613E 15      HTEX '4 ENABLE     5 DISABLE'
     613F 34  
     6140 20  
     6141 45  
     6142 4E  
     6143 41  
     6144 42  
     6145 4C  
     6146 45  
     6147 20  
     6148 20  
     6149 20  
     614A 20  
     614B 20  
     614C 35  
     614D 20  
     614E 44  
     614F 49  
     6150 53  
     6151 41  
     6152 42  
     6153 4C  
     6154 45  
0159          
0160 6155 A1      ROW+ >02
0161 6156 FF      COL LALIGN
     6157 02  
0162 6158 16      HTEX 'FLASH GRAM TO USER BANK'
     6159 46  
     615A 4C  
     615B 41  
     615C 53  
     615D 48  
     615E 20  
     615F 47  
     6160 52  
     6161 41  
     6162 4D  
     6163 20  
     6164 54  
     6165 4F  
     6166 20  
     6167 55  
     6168 53  
     6169 45  
     616A 52  
     616B 20  
     616C 42  
     616D 41  
     616E 4E  
     616F 4B  
0163 6170 A0      ROW+ >01
0164 6171 FF      COL LALIGN2
     6172 03  
0165 6173 14      HTEX '6 BANK 1     7 BANK 2'
     6174 36  
     6175 20  
     6176 42  
     6177 41  
     6178 4E  
     6179 4B  
     617A 20  
     617B 31  
     617C 20  
     617D 20  
     617E 20  
     617F 20  
     6180 20  
     6181 37  
     6182 20  
     6183 42  
     6184 41  
     6185 4E  
     6186 4B  
     6187 20  
     6188 32  
0166          
0167 6189 A1      ROW+ >02
0168 618A FF      COL LALIGN
     618B 02  
0169 618C 14      HTEX 'COPY ROM BANK TO GRAM'
     618D 43  
     618E 4F  
     618F 50  
     6190 59  
     6191 20  
     6192 52  
     6193 4F  
     6194 4D  
     6195 20  
     6196 42  
     6197 41  
     6198 4E  
     6199 4B  
     619A 20  
     619B 54  
     619C 4F  
     619D 20  
     619E 47  
     619F 52  
     61A0 41  
     61A1 4D  
0170 61A2 A0      ROW+ >01
0171 61A3 FF      COL LALIGN2
     61A4 03  
0172 61A5 16      HTEX 'A COPY FROM SYSTEM BANK'
     61A6 41  
     61A7 20  
     61A8 43  
     61A9 4F  
     61AA 50  
     61AB 59  
     61AC 20  
     61AD 46  
     61AE 52  
     61AF 4F  
     61B0 4D  
     61B1 20  
     61B2 53  
     61B3 59  
     61B4 53  
     61B5 54  
     61B6 45  
     61B7 4D  
     61B8 20  
     61B9 42  
     61BA 41  
     61BB 4E  
     61BC 4B  
0173 61BD A0      ROW+ >01
0174 61BE FF      COL LALIGN2
     61BF 03  
0175 61C0 16      HTEX 'B COPY FROM USER BANK 1'
     61C1 42  
     61C2 20  
     61C3 43  
     61C4 4F  
     61C5 50  
     61C6 59  
     61C7 20  
     61C8 46  
     61C9 52  
     61CA 4F  
     61CB 4D  
     61CC 20  
     61CD 55  
     61CE 53  
     61CF 45  
     61D0 52  
     61D1 20  
     61D2 42  
     61D3 41  
     61D4 4E  
     61D5 4B  
     61D6 20  
     61D7 31  
0176 61D8 A0      ROW+ >01
0177 61D9 FF      COL LALIGN2
     61DA 03  
0178 61DB 16      HTEX 'C COPY FROM USER BANK 2'
     61DC 43  
     61DD 20  
     61DE 43  
     61DF 4F  
     61E0 50  
     61E1 59  
     61E2 20  
     61E3 46  
     61E4 52  
     61E5 4F  
     61E6 4D  
     61E7 20  
     61E8 55  
     61E9 53  
     61EA 45  
     61EB 52  
     61EC 20  
     61ED 42  
     61EE 41  
     61EF 4E  
     61F0 4B  
     61F1 20  
     61F2 32  
0179          
0180 61F3 A0      ROW+ >01
0181 61F4 FF      COL LALIGN
     61F5 02  
0182 61F6 08      HTEX '9 MORE...'
     61F7 39  
     61F8 20  
     61F9 4D  
     61FA 4F  
     61FB 52  
     61FC 45  
     61FD 2E  
     61FE 2E  
     61FF 2E  
0183          
0184 6200 FB      FEND
0185          
0186          * Pattern address of character ALIVECH
0187          PATADR EQU >0800+(8*ALIVECH)
0188          * Test a couple of chars
0189          *    MOVE 64,G@DENSE_FONT,V@PATADR-64
0190          *    ST >F7,V@0
0191          *    ST >F8,V@1
0192          *    ST >F9,V@2
0193          *    ST >FA,V@3
0194          *    ST >FB,V@4
0195          *    ST >FC,V@5
0196          *    ST >FD,V@6
0197          *    ST >FE,V@7
0198          
0199 6201 06      CALL  SHOW_VERSION      ; Get version, bank, shadow info
     6202 65  
     6203 B7
0200 6204 05      B     GUPDATE           ; update screen
     6205 62  
     6206 BF
0201          
0202          GWAIT
0203 6207 03      SCAN
0204 6208 62      BS    GOTKEY
     6209 14  
0205          * We did not get a key. Animate something.
0206 620A BE      ST    ALIVECH,V@>001F      Write char FF to top right corner
     620B A0  
     620C 1F
     620D DF  
0207 620E 90      INC   V@PATADR
     620F AE  
     6210 F8
0208 6211 05      B    G@GWAIT          wait for the user to press a key
     6212 62  
     6213 07
0209          
0210          
0211          GOTKEY:
0212 6214 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     6215 A0  
     6216 82
     6217 75  
0213 6218 BE      ST    ' ',V@VALIDIND        ; Assume invalid CMD
     6219 A0  
     621A 83
     621B 20  
0214 621C CE      CGT   '0'-1,@SCANKEY       greater than >= 0
     621D 75  
     621E 2F  
0215 621F 42      BR    GG01              no skip forward
     6220 B9  
0216 6221 CE      CGT   '9',@SCANKEY        Key greater than '9'?
     6222 75  
     6223 39  
0217 6224 62      BS    CHECK_ABC             ; Yes: skip forward
     6225 3F  
0218 6226 A6      SUB   '0',@SCANKEY
     6227 75  
     6228 30  
0219 6229 8A      CASE  @SCANKEY
     622A 75  
0220 622B 42      BR    KEY0
     622C 63  
0221 622D 42      BR    KEY1
     622E 63  
0222 622F 42      BR    KEY2
     6230 63  
0223 6231 42      BR    KEY3
     6232 6E  
0224 6233 42      BR    KEY4
     6234 54  
0225 6235 42      BR    KEY5
     6236 5F  
0226 6237 42      BR    KEY6
     6238 76  
0227 6239 42      BR    KEY7
     623A 81  
0228 623B 42      BR    KEY8
     623C 86  
0229 623D 42      BR    KEY9
     623E 8F  
0230          CHECK_ABC
0231          ; Commands A,B and C
0232 623F CE      CGT   'A'-1,@SCANKEY
     6240 75  
     6241 40  
0233 6242 42      BR    GG01
     6243 B9  
0234 6244 CE      CGT   'C',@SCANKEY
     6245 75  
     6246 43  
0235 6247 62      BS    GG01
     6248 B9  
0236 6249 A6      SUB   'A',@SCANKEY
     624A 75  
     624B 41  
0237 624C 8A      CASE  @SCANKEY
     624D 75  
0238 624E 42      BR    KEYA
     624F 92  
0239 6250 42      BR    KEYB
     6251 9E  
0240 6252 42      BR    KEYC
     6253 A3  
0241          
0242          KEY4:
0243 6254 BE      ST  1,@SHADOW
     6255 51  
     6256 01  
0244          SHADOWSET
0245 6257 BC      ST  @SHADOW,@GCMDP2    ; Set parameter 2
     6258 42  
     6259 51  
0246 625A BE      ST  3,@GCMDBYTE         ; Command 3 shadow enable/disable
     625B 40  
     625C 03  
0247 625D 42      BR  ISSUECMD
     625E AC  
0248          KEY5:
0249 625F 86      CLR @SHADOW
     6260 51  
0250 6261 42      BR  SHADOWSET
     6262 57  
0251          KEY0
0252          KEY1
0253          KEY2
0254 6263 BC      ST   @SCANKEY,@BANK
     6264 50  
     6265 75  
0255 6266 BC      ST   @SCANKEY,@GCMDP2    ; Set parameter 2
     6267 42  
     6268 75  
0256          BANKSEL
0257 6269 BE      ST   1,@GCMDBYTE         ; Command 1 select bank for reads
     626A 40  
     626B 01  
0258 626C 42      BR  ISSUECMD
     626D AC  
0259          KEY3
0260 626E BC      ST   @SCANKEY,@BANK
     626F 50  
     6270 75  
0261 6271 BE      ST   8,@GCMDP2           ; GRAM bank is 8
     6272 42  
     6273 08  
0262 6274 42      BR   BANKSEL
     6275 69  
0263          
0264          KEY6:                       ; Flash GRAM to user bank 1
0265 6276 BE      ST   >01,@GCMDP2        ; User bank 1
     6277 42  
     6278 01  
0266          GRAM2FLASH
0267 6279 BE      ST   >3F,@GCMDP3        ; Bit mask: flash entire bank
     627A 43  
     627B 3F  
0268 627C BE      ST   4,@GCMDBYTE
     627D 40  
     627E 04  
0269 627F 42      BR  ISSUECMD
     6280 AC  
0270          KEY7:                       ; Flash GRAM to user bank 2
0271 6281 BE      ST   >02,@GCMDP2        ; User bank 2
     6282 42  
     6283 02  
0272 6284 42      BR   GRAM2FLASH
     6285 79  
0273          KEY8
0274 6286 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6287 A0  
     6288 83
     6289 2A  
0275 628A 06      CALL  SHOW_VERSION
     628B 65  
     628C B7
0276 628D 42      BR    GWAIT
     628E 07  
0277          KEY9:
0278 628F 05      B   DUMPSCREEN
     6290 62  
     6291 F4
0279          
0280          KEYA:                       ; Copy bank 0 to GRAM
0281 6292 BE      ST    0,@GCMDP2
     6293 42  
     6294 00  
0282          COPY2GRAM:
0283 6295 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6296 A0  
     6297 83
     6298 2A  
0284 6299 BE      ST    2,@GCMDBYTE
     629A 40  
     629B 02  
0285 629C 42      BR    ISSUECMD
     629D AC  
0286          KEYB:
0287 629E BE      ST    1,@GCMDP2
     629F 42  
     62A0 01  
0288 62A1 42      BR    COPY2GRAM
     62A2 95  
0289          KEYC:
0290 62A3 BE      ST    2,@GCMDP2
     62A4 42  
     62A5 02  
0291 62A6 42      BR    COPY2GRAM
     62A7 95  
0292          
0293          ISSUECMD1:                  ; Clear last 4 parameter bytes
0294 62A8 87      DCLR  @GCMDBYTE+4
     62A9 44  
0295 62AA 87      DCLR  @GCMDBYTE+6
     62AB 46  
0296          ISSUECMD:
0297 62AC 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     62AD 00  
     62AE 08
     62AF 48  
     62B0 66  
     62B1 38
0298 62B2 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     62B3 A0  
     62B4 83
     62B5 2A  
0299 62B6 06      CALL  GSENDCMD          ; Send command to HW
     62B7 66  
     62B8 23
0300          
0301          GG01:
0302 62B9 D6      CEQ   >0F,@SCANKEY       is it Fctn-9?
     62BA 75  
     62BB 0F  
0303 62BC 42      BR    G@GCONT2         no: GCONT2
     62BD BF  
0304 62BE 0B      EXIT                   yes: reset the TI-99/4A
0305          
0306          GCONT2
0307          * Update screen to reflect current status
0308          GUPDATE
0309          * Status of Shadow RAM enable/disable
0310 62BF BE      ST  '0',@PAD0
     62C0 5C  
     62C1 30  
0311 62C2 A0      ADD @SHADOW,@PAD0
     62C3 5C  
     62C4 51  
0312 62C5 BC      ST  @PAD0,V@VEROFS+>1F        Write to VRAM
     62C6 A0  
     62C7 BF
     62C8 5C  
0313          * Status of selected bank
0314 62C9 BE      ST  '0',@PAD0
     62CA 5C  
     62CB 30  
0315 62CC A0      ADD @BANK,@PAD0
     62CD 5C  
     62CE 50  
0316 62CF BC      ST  @PAD0,V@VEROFS+>16  ; Write to VRAM
     62D0 A0  
     62D1 B6
     62D2 5C  
0317          
0318          
0319          * Start update GROM read bank. First erase bank markings.
0320          BANKOFS EQU (32*LAYOUTBAN)+4
0321 62D3 BE      ST ' ',V@BANKOFS
     62D4 A1  
     62D5 04
     62D6 20  
0322 62D7 BE      ST ' ',V@BANKOFS+>20
     62D8 A1  
     62D9 24
     62DA 20  
0323 62DB BE      ST ' ',V@BANKOFS+>40
     62DC A1  
     62DD 44
     62DE 20  
0324 62DF BE      ST ' ',V@BANKOFS+>60
     62E0 A1  
     62E1 64
     62E2 20  
0325 62E3 87      DCLR @PAD0
     62E4 5C  
0326 62E5 BC      ST   @BANK,@PAD3        Copy to low byte the bank #
     62E6 5F  
     62E7 50  
0327 62E8 E3      DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
     62E9 5E  
     62EA 00  
     62EB 05
0328 62EC BE      ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
     62ED E1  
     62EE 04
     62EF 5E
     62F0 2A  
0329          * End update GROM read bank.
0330 62F1 05      B   G@GWAIT
     62F2 62  
     62F3 07
0331          
0332          *----------------------------------------
0333          * Second screen with a few features.
0334          *----------------------------------------
0335          DUMPSCREEN:
0336 62F4 BE      ST   ' ',V@VEROFS
     62F5 A0  
     62F6 A0
     62F7 20  
0337 62F8 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     62F9 02  
     62FA 5F
     62FB A0  
     62FC A1
     62FD A0  
     62FE A0
0338 62FF 08      FMT
0339 6300 FF      COL LALIGN
     6301 02  
0340 6302 FE      ROW LAYOUTVER
     6303 05  
0341 6304 1A      HTEX '1 DEC 2 INC DUMP ADDR 3 RET'
     6305 31  
     6306 20  
     6307 44  
     6308 45  
     6309 43  
     630A 20  
     630B 32  
     630C 20  
     630D 49  
     630E 4E  
     630F 43  
     6310 20  
     6311 44  
     6312 55  
     6313 4D  
     6314 50  
     6315 20  
     6316 41  
     6317 44  
     6318 44  
     6319 52  
     631A 20  
     631B 33  
     631C 20  
     631D 52  
     631E 45  
     631F 54  
0342 6320 A0      ROW+ >01
0343 6321 FF      COL LALIGN
     6322 02  
0344 6323 12      HTEX '4 FILL GRAM WITH FF'
     6324 34  
     6325 20  
     6326 46  
     6327 49  
     6328 4C  
     6329 4C  
     632A 20  
     632B 47  
     632C 52  
     632D 41  
     632E 4D  
     632F 20  
     6330 57  
     6331 49  
     6332 54  
     6333 48  
     6334 20  
     6335 46  
     6336 46  
0345 6337 A0      ROW+ >01
0346 6338 FF      COL LALIGN
     6339 02  
0347 633A 1B      HTEX '5 COPY 24K GROM 8000 TO GRAM'
     633B 35  
     633C 20  
     633D 43  
     633E 4F  
     633F 50  
     6340 59  
     6341 20  
     6342 32  
     6343 34  
     6344 4B  
     6345 20  
     6346 47  
     6347 52  
     6348 4F  
     6349 4D  
     634A 20  
     634B 38  
     634C 30  
     634D 30  
     634E 30  
     634F 20  
     6350 54  
     6351 4F  
     6352 20  
     6353 47  
     6354 52  
     6355 41  
     6356 4D  
0348 6357 A0      ROW+ >01
0349 6358 FF      COL LALIGN
     6359 02  
0350 635A 11      HTEX '6 ARM EXECUTE 0000'
     635B 36  
     635C 20  
     635D 41  
     635E 52  
     635F 4D  
     6360 20  
     6361 45  
     6362 58  
     6363 45  
     6364 43  
     6365 55  
     6366 54  
     6367 45  
     6368 20  
     6369 30  
     636A 30  
     636B 30  
     636C 30  
0351 636D A0      ROW+ >01
0352 636E FF      COL LALIGN
     636F 02  
0353 6370 11      HTEX '7 ARM EXECUTE 4000'
     6371 37  
     6372 20  
     6373 41  
     6374 52  
     6375 4D  
     6376 20  
     6377 45  
     6378 58  
     6379 45  
     637A 43  
     637B 55  
     637C 54  
     637D 45  
     637E 20  
     637F 34  
     6380 30  
     6381 30  
     6382 30  
0354 6383 A0      ROW+ >01
0355 6384 FF      COL LALIGN
     6385 02  
0356 6386 18      HTEX '0 BURN FIRMWARE FROM GRAM'
     6387 30  
     6388 20  
     6389 42  
     638A 55  
     638B 52  
     638C 4E  
     638D 20  
     638E 46  
     638F 49  
     6390 52  
     6391 4D  
     6392 57  
     6393 41  
     6394 52  
     6395 45  
     6396 20  
     6397 46  
     6398 52  
     6399 4F  
     639A 4D  
     639B 20  
     639C 47  
     639D 52  
     639E 41  
     639F 4D  
0357 63A0 A1      ROW+ >02
0358 63A1 FF      COL LALIGN
     63A2 02  
0359 63A3 0A      HTEX 'GROM DUMPER'
     63A4 47  
     63A5 52  
     63A6 4F  
     63A7 4D  
     63A8 20  
     63A9 44  
     63AA 55  
     63AB 4D  
     63AC 50  
     63AD 45  
     63AE 52  
0360 63AF FB      FEND
0361          
0362 63B0 31      MOVE >002C,G@BIN2HEX,@>8300 ; Move assembly code in place
     63B1 00  
     63B2 2C
     63B3 00  
     63B4 66  
     63B5 9C
0363          
0364          ; test characters on last line
0365 63B6 BE      ST  HEXBASECH,@PAD0
     63B7 5C  
     63B8 E0  
0366 63B9 BF      DST 32*23,@VRAMP          * Beginning of last row
     63BA 40  
     63BB 02  
     63BC E0
0367 63BD BC  !   ST  @PAD0,V@0(@VRAMP)
     63BE E0  
     63BF 00
     63C0 40
     63C1 5C  
0368 63C2 91      DINC @VRAMP
     63C3 40  
0369 63C4 90      INC @PAD0
     63C5 5C  
0370 63C6 8E      CZ  @PAD0
     63C7 5C  
0371 63C8 43      BR  -!
     63C9 BD  
0372          
0373          
0374          ; First test in units of frame count (VDPTIMER)
0375          ; Test runs for 4 frames.
0376          ;   GPL with original HEXOUT: 119 ticks
0377          ;   GPL call to GPL HEXOUT routine issuing XML >F0:  55 ticks
0378          ;   Replace GPL call with XML >F0: 47 ticks
0384          
0385          **    B  SKIPBENCH
0386          ; Run benchmark
0387 63CA BE      ST    4,@XREG               ; Loop counter
     63CB 2C  
     63CC 04  
0388 63CD BC      ST    @VDPTIMER,@XREG+1     ; Read timer
     63CE 2D  
     63CF 79  
0389 63D0 06  !   CALL  G@DODUMP
     63D1 64  
     63D2 1C
0390 63D3 A3      DADD  8,@DUMPA
     63D4 62  
     63D5 00  
     63D6 08
0391 63D7 92      DEC   @XREG
     63D8 2C  
0392 63D9 8E      CZ    @XREG
     63DA 2C  
0393 63DB 43      BR   -!
     63DC D0  
0394 63DD BC      ST    @VDPTIMER,@XREG       ; Read timer
     63DE 2C  
     63DF 79  
0395 63E0 A7      DSUB  4*10,@DUMPA
     63E1 62  
     63E2 00  
     63E3 28
0396          ** SKIPBENCH:
0397          
0398          MAKEDUMP:
0399 63E4 06      CALL G@DODUMP
     63E5 64  
     63E6 1C
0400 63E7 BE      ST    ' ',V@VALIDIND
     63E8 A0  
     63E9 83
     63EA 20  
0401          ; Wait for keypress
0402          KW1:
0403 63EB 03      SCAN
0404 63EC 63      BS    DGOTKEY
     63ED F4  
0405 63EE 90      INC   V@PATADR
     63EF AE  
     63F0 F8
0406 63F1 05      B     KW1
     63F2 63  
     63F3 EB
0407          DGOTKEY:
0408 63F4 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     63F5 A0  
     63F6 82
     63F7 75  
0409 63F8 CE      CGT   'X'-1,@SCANKEY    ; Key >= 'X'
     63F9 75  
     63FA 57  
0410 63FB 64      BS    XYZ               ; Yes: go to XYZ
     63FC 77  
0411 63FD CE      CGT   '0'-1,@SCANKEY
     63FE 75  
     63FF 2F  
0412 6400 43      BR    KW1               ; Key less than zero -> loop
     6401 EB  
0413 6402 CE      CGT   '7',@SCANKEY      ; Key over '7' -> loop
     6403 75  
     6404 37  
0414 6405 63      BS    KW1
     6406 EB  
0415 6407 A6      SUB   '0',@SCANKEY
     6408 75  
     6409 30  
0416 640A 8A      CASE  @SCANKEY          ; BUGBUG make range check
     640B 75  
0417 640C 44      BR    DKEY0
     640D F0  
0418 640E 44      BR    DKEY1
     640F D4  
0419 6410 44      BR    DKEY2
     6411 DB  
0420 6412 44      BR    DKEY3
     6413 E2  
0421 6414 45      BR    DKEY4
     6415 0F  
0422 6416 45      BR    DKEY5
     6417 2B  
0423 6418 45      BR    DKEY6
     6419 4B  
0424 641A 45      BR    DKEY7
     641B 67  
0425          
0426          DODUMP:
0427 641C BF      DST   VEROFS+224,@VRAMP
     641D 40  
     641E 01  
     641F 80
0428 6420 86      CLR   @PAD2             ; Row counter
     6421 5E  
0429 6422 BE      ST    '*',V@VALIDIND
     6423 A0  
     6424 83
     6425 2A  
0430          DUMP2:
0431 6426 BE      ST    ' ',V@>FFFF(VRAMP)    ; setup VRAM address in case assembly used
     6427 EF  
     6428 FF
     6429 FF
     642A 40
     642B 20  
0432 642C BC      ST    @DUMPA,@PAD0      ; Hi byte off address
     642D 5C  
     642E 62  
0001              ;;; XML >F0
0002              ;;;; CALL  HEXOUT1
0003 642F 06      CALL  HEXOUT2
     6430 65  
     6431 A1
0434 6432 A3      DADD  2,@VRAMP
     6433 40  
     6434 00  
     6435 02
0435 6436 BC      ST    @DUMPA+1,@PAD0    ; Lo byte off address
     6437 5C  
     6438 63  
0001              ;;; XML >F0
0002              ;;;; CALL  HEXOUT1
0003 6439 06      CALL  HEXOUT2
     643A 65  
     643B A1
0437 643C BE      ST    ':',V@2(@VRAMP)
     643D E0  
     643E 02
     643F 40
     6440 3A  
0438 6441 A3      DADD  3,@VRAMP
     6442 40  
     6443 00  
     6444 03
0439 6445 86      CLR   @PAD1             ; column counter
     6446 5D  
0440          ; Dump 8 bytes from from 16 bit ptr  DUMPA
0441          DUMP1:
0442 6447 33      MOVE  1,G@0(@DUMPA),@PAD0    ; Read from GROM pointed to by DUMPA
     6448 00  
     6449 01
     644A 5C  
     644B 00  
     644C 00
     644D 62
0001              ;;; XML >F0
0002              ;;;; CALL  HEXOUT1
0003 644E 06      CALL  HEXOUT2
     644F 65  
     6450 A1
0444 6451 BE      ST    ' ',V@2(@VRAMP)
     6452 E0  
     6453 02
     6454 40
     6455 20  
0445 6456 A3      DADD  3,@VRAMP
     6457 40  
     6458 00  
     6459 03
0446 645A 91      DINC  @DUMPA
     645B 62  
0447 645C 90      INC   @PAD1
     645D 5D  
0448 645E D6      CEQ   8,@PAD1           ; 8 columns - are we done?
     645F 5D  
     6460 08  
0449 6461 44      BR    DUMP1             ; No: jump to dump1
     6462 47  
0450          ; Advance VRAM pointer, we add and mask to bring pointer to beginning
0451          ; of next line.
0452 6463 A3      DADD  >1F,@VRAMP
     6464 40  
     6465 00  
     6466 1F
0453 6467 B3      DAND  >0FE0,@VRAMP
     6468 40  
     6469 0F  
     646A E0
0454 646B 90      INC   @PAD2             ; inc Row
     646C 5E  
0455 646D D6      CEQ   8,@PAD2           ; Done with 8 rows?
     646E 5E  
     646F 08  
0456 6470 44      BR    DUMP2             ; No: jump to dump2
     6471 26  
0457 6472 A7      DSUB  8*8,@DUMPA           ; Undo the incs in the loop above
     6473 62  
     6474 00  
     6475 40
0458 6476 00      RTN
0459          
0460          ; Check if we have button X Y Z pressed
0461          XYZ:
0462 6477 CE      CGT   'Z',@SCANKEY    ; Above Z?
     6478 75  
     6479 5A  
0463 647A 63      BS    KW1             ; Yes: KW1
     647B EB  
0464          ; Ok now we need to ask the user for a value and store it to X, Y or Z register.
0465          ; Show the current value of the variable after character code
0466 647C BF      DST   VEROFS-29,@VRAMP ; Location in VRAM
     647D 40  
     647E 00  
     647F 83
0467 6480 BC      ST    @SCANKEY,@PAD3
     6481 5F  
     6482 75  
0468 6483 A6      SUB   'X',@PAD3       ; Now pad is 0,1,2 for X,Y,Z
     6484 5F  
     6485 58  
0469 6486 E2      SLL   1,@PAD3         ; Multiply by 2
     6487 5F  
     6488 01  
0470 6489 86      CLR   @PAD2           ; clear high byte
     648A 5E  
0471 648B A3      DADD  XREG,@PAD2       ; Add address of XREG, now PAD1:PAD2 is a pointer to value
     648C 5E  
     648D 83  
     648E 2C
0472          
0473 648F BC      ST    @0(@PAD2),@PAD0  ; Hi byte of reg
     6490 5C  
     6491 CF  
     6492 7D
     6493 00
     6494 5E
0001              ;;; XML >F0
0002              ;;;; CALL  HEXOUT1
0003 6495 06      CALL  HEXOUT2
     6496 65  
     6497 A1
0475 6498 A3      DADD  2,@VRAMP
     6499 40  
     649A 00  
     649B 02
0476 649C BC      ST    @1(@PAD2),@PAD0  ; Lo byte of reg
     649D 5C  
     649E CF  
     649F 7D
     64A0 01
     64A1 5E
0001              ;;; XML >F0
0002              ;;;; CALL  HEXOUT1
0003 64A2 06      CALL  HEXOUT2
     64A3 65  
     64A4 A1
0478 64A5 05      B     G@KW1
     64A6 63  
     64A7 EB
0479          
0480          
0481          
0482          ASKCONFIRM:
0483          ; Ask for confirmation. Clear a few rows to clarify
0484 64A8 BE      ST   ' ',V@VEROFS
     64A9 A0  
     64AA A0
     64AB 20  
0485 64AC 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64AD 02  
     64AE 5F
     64AF A0  
     64B0 A1
     64B1 A0  
     64B2 A0
0486 64B3 08      FMT
0487 64B4 FF      COL LALIGN
     64B5 02  
0488 64B6 FE      ROW LAYOUTVER
     64B7 05  
0489 64B8 15      HTEX '!!PRESS 1 TO CONFIRM!!'
     64B9 21  
     64BA 21  
     64BB 50  
     64BC 52  
     64BD 45  
     64BE 53  
     64BF 53  
     64C0 20  
     64C1 31  
     64C2 20  
     64C3 54  
     64C4 4F  
     64C5 20  
     64C6 43  
     64C7 4F  
     64C8 4E  
     64C9 46  
     64CA 49  
     64CB 52  
     64CC 4D  
     64CD 21  
     64CE 21  
0490 64CF FB      FEND
0491          WAIT0:
0492 64D0 03      SCAN
0493 64D1 44      BR    WAIT0
     64D2 D0  
0494 64D3 00      RTN
0495          
0496          DKEY1:
0497 64D4 A7      DSUB  64,@DUMPA
     64D5 62  
     64D6 00  
     64D7 40
0498 64D8 05      B     MAKEDUMP
     64D9 63  
     64DA E4
0499          DKEY2:
0500 64DB A3      DADD  64,@DUMPA
     64DC 62  
     64DD 00  
     64DE 40
0501 64DF 05      B     MAKEDUMP
     64E0 63  
     64E1 E4
0502          DKEY3:
0503 64E2 BE      ST   ' ',V@VEROFS
     64E3 A0  
     64E4 A0
     64E5 20  
0504 64E6 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64E7 02  
     64E8 5F
     64E9 A0  
     64EA A1
     64EB A0  
     64EC A0
0505 64ED 05      B     SCREEN1
     64EE 60  
     64EF A9
0506          DKEY0:      ; Burn to Flash
0507 64F0 06      CALL  G@ASKCONFIRM
     64F1 64  
     64F2 A8
0508 64F3 D6      CEQ   '1',@SCANKEY       is the key one?
     64F4 75  
     64F5 31  
0509 64F6 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     64F7 F4  
0510          ; Yes, continue to Flash the MCU
0511 64F8 04      BACK  >F3              screen colors: white on some other color
     64F9 F3  
0512 64FA BE      ST    'F',V@VALIDIND    ; Command valid indicator
     64FB A0  
     64FC 83
     64FD 46  
0513 64FE BE      ST    6,@GCMDBYTE
     64FF 40  
     6500 06  
0514 6501 BF      DST   >1234,@GCMDBYTE+2
     6502 42  
     6503 12  
     6504 34
0515 6505 87      DCLR  @GCMDBYTE+4
     6506 44  
0516 6507 87      DCLR  @GCMDBYTE+6
     6508 46  
0517 6509 06      CALL  ISSUECMD
     650A 62  
     650B AC
0518          ; We probably do not return from this call... GROMMY might be in a funny state
0519 650C 05      B     G@MAKEDUMP
     650D 63  
     650E E4
0520          
0521          DKEY4:      ; Command to fill GRAM with >FF, all 24K
0522 650F BF      DST   >FFFF,@PAD2   ; Fill value, 2 bytes
     6510 5E  
     6511 FF  
     6512 FF
0523 6513 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6514 A0  
     6515 83
     6516 2A  
0524 6517 25      MOVE  >1,@PAD2,G@>0
     6518 00  
     6519 01
     651A 00  
     651B 00
     651C 5E  
0525 651D 21      MOVE  >5FFF,G@>0,G@>1
     651E 5F  
     651F FF
     6520 00  
     6521 01
     6522 00  
     6523 00
0526 6524 BE      ST    ' ',V@VALIDIND    ; Command valid indicator
     6525 A0  
     6526 83
     6527 20  
0527 6528 05      B     MAKEDUMP
     6529 63  
     652A E4
0528          
0529          DKEY5:
0530 652B BE      ST    '*',V@VALIDIND    ; Command valid indicator
     652C A0  
     652D 83
     652E 2A  
0531 652F 21      MOVE >2000,G@>8000,G@>0000
     6530 20  
     6531 00
     6532 00  
     6533 00
     6534 80  
     6535 00
0532 6536 21      MOVE >2000,G@>A000,G@>2000
     6537 20  
     6538 00
     6539 20  
     653A 00
     653B A0  
     653C 00
0533 653D 21      MOVE >2000,G@>C000,G@>4000
     653E 20  
     653F 00
     6540 40  
     6541 00
     6542 C0  
     6543 00
0534 6544 BE      ST    ' ',V@VALIDIND    ; Command valid indicator
     6545 A0  
     6546 83
     6547 20  
0535 6548 05      B     MAKEDUMP
     6549 63  
     654A E4
0536          
0537          DKEY6:      ; ARM execute 0000
0538 654B BF      DST   >0100,@GCMDBYTE+2   ; thumb bit high
     654C 42  
     654D 01  
     654E 00
0539          DKEY6ASK:
0540 654F 06      CALL  G@ASKCONFIRM
     6550 64  
     6551 A8
0541 6552 D6      CEQ   '1',@SCANKEY       is the key one?
     6553 75  
     6554 31  
0542 6555 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     6556 F4  
0543 6557 BE      ST    'F',V@VALIDIND    ; Command valid indicator
     6558 A0  
     6559 83
     655A 46  
0544 655B BE      ST    7,@GCMDBYTE
     655C 40  
     655D 07  
0545 655E 87      DCLR  @GCMDBYTE+4
     655F 44  
0546 6560 87      DCLR  @GCMDBYTE+6
     6561 46  
0547 6562 06      CALL  ISSUECMD
     6563 62  
     6564 AC
0548          ; We probably do not return from this call... GROMMY might be in a funny state
0549 6565 43      BR    MAKEDUMP
     6566 E4  
0550          
0551          DKEY7:
0552 6567 BF      DST   >0140,@GCMDBYTE+2  ; ARM has different byte order
     6568 42  
     6569 01  
     656A 40
0553 656B 45      BR    DKEY6ASK
     656C 4F  
0554          
0555          
0556          *----------------------------------------
0557          * Display in HEX the byte in PAD0
0558          *----------------------------------------
0559          HEXOUT:
0560 656D 0F    XML >F0       ; Jump via >8300
     656E F0  
0561 656F 00    RTN
0562          
0563          HEXOUT1:
0564 6570 BC      ST   @PAD0,@PAD4
     6571 60  
     6572 5C  
0565 6573 E6      SRL   >04,@PAD4       isolate first nibble
     6574 60  
     6575 04  
0566 6576 CE      CGT   >09,@PAD4       greater than 9?
     6577 60  
     6578 09  
0567 6579 65      BS    HEX1            yes
     657A 80  
0568 657B A2      ADD   >30,@PAD4       no: make it char 0-9
     657C 60  
     657D 30  
0569 657E 45      BR    HEX2
     657F 83  
0570 6580 A2  HEX1: ADD   >37,@PAD4      yes: make it char A-F
     6581 60  
     6582 37  
0571          HEX2:
0572          ; Output first hex digit (most significant digit)
0573 6583 BC      ST    @PAD4,V@0(@VRAMP)
     6584 E0  
     6585 00
     6586 40
     6587 60  
0574          ; Work on 2nd digit
0575 6588 BC      ST    @PAD0,@PAD4     copy number
     6589 60  
     658A 5C  
0576 658B B2      AND   >0F,@PAD4       isolate second nibble
     658C 60  
     658D 0F  
0577 658E CE      CGT   >09,@PAD4       greater than 9?
     658F 60  
     6590 09  
0578 6591 65      BS    HEX3          yes
     6592 98  
0579 6593 A2      ADD   >30,@PAD4       no: make it char 0-9
     6594 60  
     6595 30  
0580 6596 45      BR    HEX4
     6597 9B  
0581 6598 A2  HEX3  ADD   >37,@PAD4       yes: make it char A-F
     6599 60  
     659A 37  
0582          HEX4:
0583          ; Output 2nd hex digit (least significant digit)
0584 659B BC      ST    @PAD4,V@1(@VRAMP)
     659C E0  
     659D 01
     659E 40
     659F 60  
0585 65A0 00      RTN
0586          
0587          * Use the new hex characters which do not have a gap between 9 and A
0588          HEXOUT2:
0589 65A1 BC      ST   @PAD0,@PAD4
     65A2 60  
     65A3 5C  
0590 65A4 BC      ST   @PAD0,@PAD5
     65A5 61  
     65A6 5C  
0591 65A7 E6      SRL  >04,@PAD4       isolate first nibble
     65A8 60  
     65A9 04  
0592 65AA B2      AND  >0F,@PAD5
     65AB 61  
     65AC 0F  
0593          TWINHEXBC EQU   (HEXBASECH * 256) + HEXBASECH
0594 65AD A3      DADD TWINHEXBC,@PAD4
     65AE 60  
     65AF E0  
     65B0 E0
0595 65B1 BD      DST  @PAD4,V@0(VRAMP)
     65B2 E0  
     65B3 00
     65B4 40
     65B5 60  
0596 65B6 01      RTNC
0597          
0598          *----------------------------------------
0599          * Read grommy2 version, update on screen.
0600          * Also read and set bank & shadow values.
0601          *----------------------------------------
0602          SHOW_VERSION
0603 65B7 06      CALL G@GINITCMD
     65B8 66  
     65B9 1C
0604 65BA 06      CALL G@GSENDCMD
     65BB 66  
     65BC 23
0605          * Check result of command - did we get OK?
0606 65BD 31      MOVE 2,G@HWIF,@PAD0
     65BE 00  
     65BF 02
     65C0 5C  
     65C1 5F  
     65C2 F0
0607 65C3 D7      DCEQ >4F4B,@PAD0        ; did we get OK?
     65C4 5C  
     65C5 4F  
     65C6 4B
0608 65C7 65      BS   VER_OK             ; Yes: go to VER_OK
     65C8 D4  
0609          ** No grommy2 detected. Put in dummy data.
0610 65C9 87      DCLR @PAD2              ; Major and minor zero
     65CA 5E  
0611 65CB BE      ST   99,@PAD4           ; Build 99
     65CC 60  
     65CD 63  
0612 65CE 86      CLR  @SHADOW
     65CF 51  
0613 65D0 86      CLR  @BANK
     65D1 50  
0614 65D2 45      BR   VER1
     65D3 F1  
0615          VER_OK:     ; grommy responded, read data
0616          * Copy values from GROM IF to pad
0617 65D4 31      MOVE 3,G@HWIF+8,@PAD2
     65D5 00  
     65D6 03
     65D7 5E  
     65D8 5F  
     65D9 F8
0618          * Get active bank from grommy2
0619 65DA 31      MOVE 1,G@HWIF+3,@BANK
     65DB 00  
     65DC 01
     65DD 50  
     65DE 5F  
     65DF F3
0620 65E0 B2      AND  >0F,@BANK
     65E1 50  
     65E2 0F  
0621 65E3 D6      CEQ  8,@BANK            ; Is GRAM bank 8 selected?
     65E4 50  
     65E5 08  
0622 65E6 45      BR   NOGRAM1            ; No, we're good
     65E7 EB  
0623 65E8 BE      ST   3,@BANK            ; yes, convert to 3 here
     65E9 50  
     65EA 03  
0624          NOGRAM1:
0625          * Get RAM shadow from grommy2
0626 65EB 31      MOVE 1,G@HWIF+4,@SHADOW
     65EC 00  
     65ED 01
     65EE 51  
     65EF 5F  
     65F0 F4
0627          VER1:
0628          * Show major version in p2
0629 65F1 BE      ST  '0',@PAD0
     65F2 5C  
     65F3 30  
0630 65F4 A0      ADD @PAD2,@PAD0
     65F5 5C  
     65F6 5E  
0631 65F7 BC      ST  @PAD0,V@VEROFS+>A        Write to VRAM
     65F8 A0  
     65F9 AA
     65FA 5C  
0632          * Show minor version in p3
0633 65FB BE      ST  '0',@PAD0
     65FC 5C  
     65FD 30  
0634 65FE A0      ADD @PAD3,@PAD0
     65FF 5C  
     6600 5F  
0635 6601 BC      ST  @PAD0,V@VEROFS+>C        Write to VRAM
     6602 A0  
     6603 AC
     6604 5C  
0636          * Show build version in p4. The build is two digits from 0 to 99
0637 6605 86      CLR  @PAD0              Zero fill as the value to divide is 16 bits§
     6606 5C  
0638 6607 BC      ST   @PAD4,@PAD1
     6608 5D  
     6609 60  
0639 660A AE      DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
     660B 5C  
     660C 0A  
0640 660D A2      ADD  '0',@PAD0
     660E 5C  
     660F 30  
0641 6610 BC      ST   @PAD0,V@VEROFS+>E      Write to VRAM
     6611 A0  
     6612 AE
     6613 5C  
0642 6614 A2      ADD  '0',@PAD1          Remainder
     6615 5D  
     6616 30  
0643 6617 BC      ST   @PAD1,V@VEROFS+>F      Write to VRAM
     6618 A0  
     6619 AF
     661A 5D  
0644 661B 00      RTN
0645          
0646          
0647          *----------------------------------------
0648          * Init command buffer in pad
0649          *----------------------------------------
0650          GINITCMD
0651 661C 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
     661D 00  
     661E 10
     661F 40  
     6620 66  
     6621 30
0652 6622 00         RTN
0653          
0654          *----------------------------------------
0655          * Send command to grommy2
0656          *----------------------------------------
0657          GSENDCMD
0658 6623 BC         ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
     6624 41  
     6625 40  
0659 6626 BA         XOR   >FF,@GCMDBYTE+1
     6627 41  
     6628 FF  
0660 6629 25         MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
     662A 00  
     662B 10
     662C 5F  
     662D F0
     662E 40  
0661 662F 00         RTN
0662          
0663          
0664          GROMMY_DAT
0665 6630 00         DATA   >00FF,>003F,>0000,>0000
     6631 FF
     6632 00  
     6633 3F
     6634 00  
     6635 00
     6636 00  
     6637 00
0666 6638 45         TEXT 'EPGROMMY'
     6639 50  
     663A 47  
     663B 52  
     663C 4F  
     663D 4D  
     663E 4D  
     663F 59  
0667          
0668          
0669          DENSE_FONT ; Define character cells wihtin 4x8 cell
0670          ; Numnbers 0 and 1
0671 6640 22          BYTE >22
0672 6641 56          BYTE >56
0673 6642 52          BYTE >52
0674 6643 52          BYTE >52
0675 6644 52          BYTE >52
0676 6645 52          BYTE >52
0677 6646 27          BYTE >27
0678 6647 00          BYTE >00
0679          ; Define a cell with 2 and 3
0680 6648 26          BYTE >26
0681 6649 51          BYTE >51
0682 664A 11          BYTE >11
0683 664B 26          BYTE >26
0684 664C 41          BYTE >41
0685 664D 41          BYTE >41
0686 664E 76          BYTE >76
0687 664F 00          BYTE >00
0688          ; Define a cell with 4 and 5
0689 6650 17          BYTE >17
0690 6651 34          BYTE >34
0691 6652 54          BYTE >54
0692 6653 76          BYTE >76
0693 6654 11          BYTE >11
0694 6655 11          BYTE >11
0695 6656 16          BYTE >16
0696 6657 00          BYTE >00
0697          ; Define a cell with 6 and 7
0698 6658 37          BYTE >37
0699 6659 41          BYTE >41
0700 665A 62          BYTE >62
0701 665B 52          BYTE >52
0702 665C 52          BYTE >52
0703 665D 52          BYTE >52
0704 665E 22          BYTE >22
0705 665F 00          BYTE >00
0706          ; Define a cell with 8 and 9
0707 6660 22          BYTE >22
0708 6661 55          BYTE >55
0709 6662 55          BYTE >55
0710 6663 23          BYTE >23
0711 6664 51          BYTE >51
0712 6665 51          BYTE >51
0713 6666 26          BYTE >26
0714 6667 00          BYTE >00
0715          ; Define a cell with A and B
0716 6668 26          BYTE >26
0717 6669 55          BYTE >55
0718 666A 55          BYTE >55
0719 666B 76          BYTE >76
0720 666C 55          BYTE >55
0721 666D 55          BYTE >55
0722 666E 56          BYTE >56
0723 666F 00          BYTE >00
0724          ; Define a cell with C and D
0725 6670 36          BYTE >36
0726 6671 45          BYTE >45
0727 6672 45          BYTE >45
0728 6673 45          BYTE >45
0729 6674 45          BYTE >45
0730 6675 45          BYTE >45
0731 6676 36          BYTE >36
0732 6677 00          BYTE >00
0733          ; Define a cell with E and F
0734 6678 77          BYTE >77
0735 6679 44          BYTE >44
0736 667A 44          BYTE >44
0737 667B 66          BYTE >66
0738 667C 44          BYTE >44
0739 667D 44          BYTE >44
0740 667E 74          BYTE >74
0741 667F 00          BYTE >00
0742          
0743          * Test code copied from Mini Memory
0744 6680 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
     6681 00  
     6682 10
     6683 40  
     6684 66  
     6685 30
0745 6686 BC         ST    @>839A,@>8340                Copy command byte
     6687 40  
     6688 80  
     6689 9A
0746 668A BC         ST    @>839A,@>8341                The second byte is its complement
     668B 41  
     668C 80  
     668D 9A
0747 668E BA         XOR   >FF,@>8341
     668F 41  
     6690 FF  
0748 6691 BC         ST    @>839B,@>8342                Copy p2.
     6692 42  
     6693 80  
     6694 9B
0749 6695 25         MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
     6696 00  
     6697 10
     6698 5F  
     6699 F0
     669A 40  
0750 669B 00         RTN
0751          
0752          * BIN2HEX assembly routine. Compiled to run from 8302.
0753          * First item is a vector, so this is good for XML >F0.
0754          BIN2HEX:
0755 669C 83    DATA >8302    * Vector to 8302
     669D 02
0756 669E C0    DATA >C08B, >D060, >835C, >0941, >06A0
     669F 8B
     66A0 D0  
     66A1 60
     66A2 83  
     66A3 5C
     66A4 09  
     66A5 41
     66A6 06  
     66A7 A0
0757 66A8 83    DATA >8318   * BL destination address
     66A9 18
0758 66AA D0    DATA >D060, >835C, >0241, >0F00, >C2C2
     66AB 60
     66AC 83  
     66AD 5C
     66AE 02  
     66AF 41
     66B0 0F  
     66B1 00
     66B2 C2  
     66B3 C2
0759 66B4 02    DATA >0221, >3000, >0281, >3A00, >1A02
     66B5 21
     66B6 30  
     66B7 00
     66B8 02  
     66B9 81
     66BA 3A  
     66BB 00
     66BC 1A  
     66BD 02
0760 66BE 02    DATA >0221, >0700, >DBC1, >FFFE, >045B
     66BF 21
     66C0 07  
     66C1 00
     66C2 DB  
     66C3 C1
     66C4 FF  
     66C5 FE
     66C6 04  
     66C7 5B
0761          
0762          * 0005 0000 C08B  18   MOV R11,R2
0763          * 0006 0002 D060  34   MOVB @PAD0,R1
0764          *      0004 835C
0765          * 0007 0006 0941  56   SRL  R1,4
0766          * 0008 0008 06A0  32   BL   @!
0767          *      000A 8318
0768          * 0009 000C D060  34   MOVB @PAD0,R1
0769          *      000E 835C
0770          * 0010 0010 0241  22   ANDI R1,>0F00
0771          *      0012 0F00
0772          * 0011 0014 C2C2  18   MOV R2,R11
0773          * 0012               !:
0774          * 0013 0016 0221  22   AI   R1,'0'*256
0775          *      0018 3000
0776          * 0014 001A 0281  22   CI   R1,('9'+1)*>100
0777          *      001C 3A00
0778          * 0015 001E 1A02  14   JL   !
0779          * 0016 0020 0221  22   AI   R1,>700
0780          *      0022 0700
0781          * 0017               !
0782          * 0018 0024 DBC1  38   MOVB  R1,@>FFFE(R15)  write byte to VDP
0783          *      0026 FFFE
0784          * 0019 0028 045B  20   RT
0785          
0786          
0787          *----------------------------------------
0788          * VDP setup for module
0789          *----------------------------------------
0790          GVDPSETUP
0791 66C8 BE      ST    >D0,V@>0300      no sprites
     66C9 A3  
     66CA 00
     66CB D0  
0792 66CC BE      ST    >F5,V@>0380      init color table as white on blue for all chars
     66CD A3  
     66CE 80
     66CF F5  
0793 66D0 35      MOVE  >001F,V@>0380,V@>0381
     66D1 00  
     66D2 1F
     66D3 A3  
     66D4 81
     66D5 A3  
     66D6 80
0794 66D7 07      ALL   >20              erase screen
     66D8 20  
0795 66D9 04      BACK  >F5              screen colors: white on light blue
     66DA F5  
0796 66DB 00      RTN
0797          
0798              COPY 'screen.gpl'
              > screen.gpl
0001          * Character definitions
0002 66DC 00  GUDG96	BYTE >00,>00,>00,>00,>00,>00,>00,>00 ; Character 96
     66DD 00  
     66DE 00  
     66DF 00  
     66E0 00  
     66E1 00  
     66E2 00  
     66E3 00  
0003 66E4 00  GUDG97	BYTE >00,>00,>70,>43,>72,>42,>42,>72 ; Character 97
     66E5 00  
     66E6 70  
     66E7 43  
     66E8 72  
     66E9 42  
     66EA 42  
     66EB 72  
0004 66EC 00  GUDG98	BYTE >00,>28,>08,>A9,>2A,>2E,>2B,>29 ; Character 98
     66ED 28  
     66EE 08  
     66EF A9  
     66F0 2A  
     66F1 2E  
     66F2 2B  
     66F3 29  
0005 66F4 00  GUDG99	BYTE >00,>00,>0F,>09,>09,>0E,>08,>08 ; Character 99
     66F5 00  
     66F6 0F  
     66F7 09  
     66F8 09  
     66F9 0E  
     66FA 08  
     66FB 08  
0006 66FC 00  GUDG100	BYTE >00,>40,>00,>46,>49,>4F,>48,>46 ; Character 100
     66FD 40  
     66FE 00  
     66FF 46  
     6700 49  
     6701 4F  
     6702 48  
     6703 46  
0007 6704 00  GUDG101	BYTE >00,>41,>41,>79,>49,>49,>49,>49 ; Character 101
     6705 41  
     6706 41  
     6707 79  
     6708 49  
     6709 49  
     670A 49  
     670B 49  
0008 670C 00  GUDG102	BYTE >00,>40,>40,>1C,>10,>0C,>06,>1C ; Character 102
     670D 40  
     670E 40  
     670F 1C  
     6710 10  
     6711 0C  
     6712 06  
     6713 1C  
0009 6714 00  GUDG103	BYTE >00,>00,>00,>00,>00,>00,>1C,>3F ; Character 103
     6715 00  
     6716 00  
     6717 00  
     6718 00  
     6719 00  
     671A 1C  
     671B 3F  
0010 671C 00  GUDG104	BYTE >00,>00,>00,>00,>00,>00,>00,>3F ; Character 104
     671D 00  
     671E 00  
     671F 00  
     6720 00  
     6721 00  
     6722 00  
     6723 3F  
0011 6724 00  GUDG105	BYTE >00,>00,>00,>00,>00,>00,>00,>9C ; Character 105
     6725 00  
     6726 00  
     6727 00  
     6728 00  
     6729 00  
     672A 00  
     672B 9C  
0012 672C 00  GUDG106	BYTE >00,>00,>00,>00,>00,>00,>07,>3F ; Character 106
     672D 00  
     672E 00  
     672F 00  
     6730 00  
     6731 00  
     6732 07  
     6733 3F  
0013 6734 00  GUDG107	BYTE >00,>00,>00,>00,>00,>00,>00,>F0 ; Character 107
     6735 00  
     6736 00  
     6737 00  
     6738 00  
     6739 00  
     673A 00  
     673B F0  
0014 673C 00  GUDG108	BYTE >00,>00,>00,>00,>00,>00,>06,>9F ; Character 108
     673D 00  
     673E 00  
     673F 00  
     6740 00  
     6741 00  
     6742 06  
     6743 9F  
0015 6744 00  GUDG109	BYTE >00,>00,>00,>00,>00,>00,>03,>8F ; Character 109
     6745 00  
     6746 00  
     6747 00  
     6748 00  
     6749 00  
     674A 03  
     674B 8F  
0016 674C 00  GUDG110	BYTE >00,>00,>00,>00,>00,>00,>00,>C7 ; Character 110
     674D 00  
     674E 00  
     674F 00  
     6750 00  
     6751 00  
     6752 00  
     6753 C7  
0017 6754 00  GUDG111	BYTE >00,>00,>00,>00,>00,>00,>00,>F3 ; Character 111
     6755 00  
     6756 00  
     6757 00  
     6758 00  
     6759 00  
     675A 00  
     675B F3  
0018 675C 00  GUDG112	BYTE >00,>00,>00,>00,>00,>00,>C0,>F1 ; Character 112
     675D 00  
     675E 00  
     675F 00  
     6760 00  
     6761 00  
     6762 C0  
     6763 F1  
0019 6764 00  GUDG113	BYTE >00,>00,>00,>00,>00,>00,>60,>F8 ; Character 113
     6765 00  
     6766 00  
     6767 00  
     6768 00  
     6769 00  
     676A 60  
     676B F8  
0020 676C 00  GUDG114	BYTE >00,>00,>00,>00,>00,>00,>00,>FC ; Character 114
     676D 00  
     676E 00  
     676F 00  
     6770 00  
     6771 00  
     6772 00  
     6773 FC  
0021 6774 00  GUDG115	BYTE >00,>03,>0F,>1F,>3F,>3F,>7F,>7E ; Character 115
     6775 03  
     6776 0F  
     6777 1F  
     6778 3F  
     6779 3F  
     677A 7F  
     677B 7E  
0022 677C 00  GUDG116	BYTE >00,>F0,>FC,>FE,>FF,>FF,>3F,>3F ; Character 116
     677D F0  
     677E FC  
     677F FE  
     6780 FF  
     6781 FF  
     6782 3F  
     6783 3F  
0023 6784 00  GUDG117	BYTE >00,>00,>00,>00,>00,>80,>80,>80 ; Character 117
     6785 00  
     6786 00  
     6787 00  
     6788 00  
     6789 80  
     678A 80  
     678B 80  
0024 678C 7F  GUDG118	BYTE >7F,>FF,>FF,>FE,>FE,>FE,>FE,>FE ; Character 118
     678D FF  
     678E FF  
     678F FE  
     6790 FE  
     6791 FE  
     6792 FE  
     6793 FE  
0025 6794 FF  GUDG119	BYTE >FF,>FF,>FF,>7F,>7F,>7F,>7F,>7F ; Character 119
     6795 FF  
     6796 FF  
     6797 7F  
     6798 7F  
     6799 7F  
     679A 7F  
     679B 7F  
0026 679C 3F  GUDG120	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>3F,>3F ; Character 120
     679D 3F  
     679E 3F  
     679F 3F  
     67A0 3F  
     67A1 3F  
     67A2 3F  
     67A3 3F  
0027 67A4 BC  GUDG121	BYTE >BC,>FC,>FC,>FD,>FD,>FD,>F9,>C1 ; Character 121
     67A5 FC  
     67A6 FC  
     67A7 FD  
     67A8 FD  
     67A9 FD  
     67AA F9  
     67AB C1  
0028 67AC 7F  GUDG122	BYTE >7F,>FF,>FF,>FC,>FC,>FC,>FC,>FC ; Character 122
     67AD FF  
     67AE FF  
     67AF FC  
     67B0 FC  
     67B1 FC  
     67B2 FC  
     67B3 FC  
0029 67B4 F8  GUDG123	BYTE >F8,>FC,>FE,>FE,>FE,>FE,>FE,>FE ; Character 123
     67B5 FC  
     67B6 FE  
     67B7 FE  
     67B8 FE  
     67B9 FE  
     67BA FE  
     67BB FE  
0030 67BC FF  GUDG124	BYTE >FF,>FF,>FF,>9F,>9F,>9F,>9F,>9F ; Character 124
     67BD FF  
     67BE FF  
     67BF 9F  
     67C0 9F  
     67C1 9F  
     67C2 9F  
     67C3 9F  
0031 67C4 DF  GUDG125	BYTE >DF,>FF,>FF,>E7,>C7,>C7,>C7,>C7 ; Character 125
     67C5 FF  
     67C6 FF  
     67C7 E7  
     67C8 C7  
     67C9 C7  
     67CA C7  
     67CB C7  
0032 67CC E7  GUDG126	BYTE >E7,>E7,>E7,>F7,>F7,>F7,>F7,>F7 ; Character 126
     67CD E7  
     67CE E7  
     67CF F7  
     67D0 F7  
     67D1 F7  
     67D2 F7  
     67D3 F7  
0033 67D4 FF  GUDG127	BYTE >FF,>FF,>FF,>F3,>F3,>F3,>F3,>F3 ; Character 127
     67D5 FF  
     67D6 FF  
     67D7 F3  
     67D8 F3  
     67D9 F3  
     67DA F3  
     67DB F3  
0034 67DC FB  GUDG128	BYTE >FB,>FF,>FF,>FC,>F8,>F8,>F8,>F8 ; Character 128
     67DD FF  
     67DE FF  
     67DF FC  
     67E0 F8  
     67E1 F8  
     67E2 F8  
     67E3 F8  
0035 67E4 FC  GUDG129	BYTE >FC,>FC,>FC,>FE,>FE,>FE,>FE,>FE ; Character 129
     67E5 FC  
     67E6 FC  
     67E7 FE  
     67E8 FE  
     67E9 FE  
     67EA FE  
     67EB FE  
0036 67EC FE  GUDG130	BYTE >FE,>FE,>7E,>7E,>7E,>7E,>7E,>3F ; Character 130
     67ED FE  
     67EE 7E  
     67EF 7E  
     67F0 7E  
     67F1 7E  
     67F2 7E  
     67F3 3F  
0037 67F4 3F  GUDG131	BYTE >3F,>7F,>7F,>7F,>7E,>7E,>7E,>7E ; Character 131
     67F5 7F  
     67F6 7F  
     67F7 7F  
     67F8 7E  
     67F9 7E  
     67FA 7E  
     67FB 7E  
0038 67FC 7E  GUDG132	BYTE >7E,>7E,>7E,>00,>00,>00,>00,>01 ; Character 132
     67FD 7E  
     67FE 7E  
     67FF 00  
     6800 00  
     6801 00  
     6802 00  
     6803 01  
0039 6804 3F  GUDG133	BYTE >3F,>3F,>3F,>7F,>7F,>FF,>FF,>FE ; Character 133
     6805 3F  
     6806 3F  
     6807 7F  
     6808 7F  
     6809 FF  
     680A FF  
     680B FE  
0040 680C 80  GUDG134	BYTE >80,>80,>80,>80,>00,>00,>00,>00 ; Character 134
     680D 80  
     680E 80  
     680F 80  
     6810 00  
     6811 00  
     6812 00  
     6813 00  
0041 6814 FE  GUDG135	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FF ; Character 135
     6815 FE  
     6816 FE  
     6817 FE  
     6818 FE  
     6819 FE  
     681A FE  
     681B FF  
0042 681C 7F  GUDG136	BYTE >7F,>7F,>7F,>7F,>7F,>7F,>7F,>FF ; Character 136
     681D 7F  
     681E 7F  
     681F 7F  
     6820 7F  
     6821 7F  
     6822 7F  
     6823 FF  
0043 6824 C1  GUDG137	BYTE >C1,>81,>81,>81,>81,>81,>81,>81 ; Character 137
     6825 81  
     6826 81  
     6827 81  
     6828 81  
     6829 81  
     682A 81  
     682B 81  
0044 682C FC  GUDG138	BYTE >FC,>FC,>FC,>FC,>FC,>FC,>FC,>FC ; Character 138
     682D FC  
     682E FC  
     682F FC  
     6830 FC  
     6831 FC  
     6832 FC  
     6833 FC  
0045 6834 FE  GUDG139	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FE ; Character 139
     6835 FE  
     6836 FE  
     6837 FE  
     6838 FE  
     6839 FE  
     683A FE  
     683B FE  
0046 683C 9F  GUDG140	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>9F,>9F ; Character 140
     683D 9F  
     683E 9F  
     683F 9F  
     6840 9F  
     6841 9F  
     6842 9F  
     6843 9F  
0047 6844 C7  GUDG141	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>C7,>C7 ; Character 141
     6845 C7  
     6846 C7  
     6847 C7  
     6848 C7  
     6849 C7  
     684A C7  
     684B C7  
0048 684C F7  GUDG142	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>F7,>F7 ; Character 142
     684D F7  
     684E F7  
     684F F7  
     6850 F7  
     6851 F7  
     6852 F7  
     6853 F7  
0049 6854 F3  GUDG143	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>F3,>F3 ; Character 143
     6855 F3  
     6856 F3  
     6857 F3  
     6858 F3  
     6859 F3  
     685A F3  
     685B F3  
0050 685C F8  GUDG144	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>F8,>F8 ; Character 144
     685D F8  
     685E F8  
     685F F8  
     6860 F8  
     6861 F8  
     6862 F8  
     6863 F8  
0051 6864 3F  GUDG145	BYTE >3F,>3F,>3F,>3F,>1F,>1F,>1F,>1F ; Character 145
     6865 3F  
     6866 3F  
     6867 3F  
     6868 1F  
     6869 1F  
     686A 1F  
     686B 1F  
0052 686C 7E  GUDG146	BYTE >7E,>7E,>7E,>7E,>FC,>FC,>FC,>FC ; Character 146
     686D 7E  
     686E 7E  
     686F 7E  
     6870 FC  
     6871 FC  
     6872 FC  
     6873 FC  
0053 6874 01  GUDG147	BYTE >01,>03,>07,>07,>0F,>0F,>1F,>3F ; Character 147
     6875 03  
     6876 07  
     6877 07  
     6878 0F  
     6879 0F  
     687A 1F  
     687B 3F  
0054 687C FC  GUDG148	BYTE >FC,>FC,>F8,>F8,>F0,>E0,>E0,>C0 ; Character 148
     687D FC  
     687E F8  
     687F F8  
     6880 F0  
     6881 E0  
     6882 E0  
     6883 C0  
0055 6884 7F  GUDG149	BYTE >7F,>7F,>3F,>00,>FE,>FE,>FF,>7F ; Character 149
     6885 7F  
     6886 3F  
     6887 00  
     6888 FE  
     6889 FE  
     688A FF  
     688B 7F  
0056 688C FF  GUDG150	BYTE >FF,>FF,>7F,>7F,>7F,>7F,>FF,>FE ; Character 150
     688D FF  
     688E 7F  
     688F 7F  
     6890 7F  
     6891 7F  
     6892 FF  
     6893 FE  
0057 6894 3F  GUDG151	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>00,>00 ; Character 151
     6895 3F  
     6896 3F  
     6897 3F  
     6898 3F  
     6899 3F  
     689A 00  
     689B 00  
0058 689C 81  GUDG152	BYTE >81,>81,>80,>80,>80,>80,>00,>00 ; Character 152
     689D 81  
     689E 80  
     689F 80  
     68A0 80  
     68A1 80  
     68A2 00  
     68A3 00  
0059 68A4 FC  GUDG153	BYTE >FC,>FC,>FF,>FF,>7F,>1F,>00,>00 ; Character 153
     68A5 FC  
     68A6 FF  
     68A7 FF  
     68A8 7F  
     68A9 1F  
     68AA 00  
     68AB 00  
0060 68AC FE  GUDG154	BYTE >FE,>FE,>FC,>FC,>F8,>E0,>00,>00 ; Character 154
     68AD FE  
     68AE FC  
     68AF FC  
     68B0 F8  
     68B1 E0  
     68B2 00  
     68B3 00  
0061 68B4 9F  GUDG155	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>00,>00 ; Character 155
     68B5 9F  
     68B6 9F  
     68B7 9F  
     68B8 9F  
     68B9 9F  
     68BA 00  
     68BB 00  
0062 68BC C7  GUDG156	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>00,>00 ; Character 156
     68BD C7  
     68BE C7  
     68BF C7  
     68C0 C7  
     68C1 C7  
     68C2 00  
     68C3 00  
0063 68C4 F7  GUDG157	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>00,>00 ; Character 157
     68C5 F7  
     68C6 F7  
     68C7 F7  
     68C8 F7  
     68C9 F7  
     68CA 00  
     68CB 00  
0064 68CC F3  GUDG158	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>00,>00 ; Character 158
     68CD F3  
     68CE F3  
     68CF F3  
     68D0 F3  
     68D1 F3  
     68D2 00  
     68D3 00  
0065 68D4 F8  GUDG159	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>00,>00 ; Character 159
     68D5 F8  
     68D6 F8  
     68D7 F8  
     68D8 F8  
     68D9 F8  
     68DA 00  
     68DB 00  
0066 68DC FE  GUDG160	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>00,>00 ; Character 160
     68DD FE  
     68DE FE  
     68DF FE  
     68E0 FE  
     68E1 FE  
     68E2 00  
     68E3 00  
0067 68E4 1F  GUDG161	BYTE >1F,>0F,>0F,>0F,>0F,>1F,>3F,>3F ; Character 161
     68E5 0F  
     68E6 0F  
     68E7 0F  
     68E8 0F  
     68E9 1F  
     68EA 3F  
     68EB 3F  
0068 68EC FC  GUDG162	BYTE >FC,>FC,>FC,>FC,>F8,>F8,>F8,>F0 ; Character 162
     68ED FC  
     68EE FC  
     68EF FC  
     68F0 F8  
     68F1 F8  
     68F2 F8  
     68F3 F0  
0069 68F4 3F  GUDG163	BYTE >3F,>7F,>7F,>7F,>7F,>7F,>00,>00 ; Character 163
     68F5 7F  
     68F6 7F  
     68F7 7F  
     68F8 7F  
     68F9 7F  
     68FA 00  
     68FB 00  
0070 68FC 80  GUDG164	BYTE >80,>FF,>FF,>FF,>FF,>FF,>00,>00 ; Character 164
     68FD FF  
     68FE FF  
     68FF FF  
     6900 FF  
     6901 FF  
     6902 00  
     6903 00  
0071 6904 00  GUDG165	BYTE >00,>00,>80,>80,>80,>80,>00,>00 ; Character 165
     6905 00  
     6906 80  
     6907 80  
     6908 80  
     6909 80  
     690A 00  
     690B 00  
0072 690C 3F  GUDG166	BYTE >3F,>0F,>00,>00,>00,>00,>00,>00 ; Character 166
     690D 0F  
     690E 00  
     690F 00  
     6910 00  
     6911 00  
     6912 00  
     6913 00  
0073 6914 FC  GUDG167	BYTE >FC,>F0,>00,>00,>00,>00,>00,>00 ; Character 167
     6915 F0  
     6916 00  
     6917 00  
     6918 00  
     6919 00  
     691A 00  
     691B 00  
0074 691C 3F  GUDG168	BYTE >3F,>00,>00,>00,>00,>00,>00,>00 ; Character 168
     691D 00  
     691E 00  
     691F 00  
     6920 00  
     6921 00  
     6922 00  
     6923 00  
0075 6924 E0  GUDG169	BYTE >E0,>00,>00,>00,>00,>00,>00,>00 ; Character 169
     6925 00  
     6926 00  
     6927 00  
     6928 00  
     6929 00  
     692A 00  
     692B 00  
0076 692C 3E  GUDG170	BYTE >3E,>60,>60,>60,>60,>60,>32,>1E ; Character 170
     692D 60  
     692E 60  
     692F 60  
     6930 60  
     6931 60  
     6932 32  
     6933 1E  
0077 6934 3E  GUDG171	BYTE >3E,>66,>43,>C3,>43,>62,>76,>3C ; Character 171
     6935 66  
     6936 43  
     6937 C3  
     6938 43  
     6939 62  
     693A 76  
     693B 3C  
0078 693C 63  GUDG172	BYTE >63,>73,>7B,>6F,>6F,>67,>67,>63 ; Character 172
     693D 73  
     693E 7B  
     693F 6F  
     6940 6F  
     6941 67  
     6942 67  
     6943 63  
0079 6944 7C  GUDG173	BYTE >7C,>60,>60,>7C,>60,>60,>60,>60 ; Character 173
     6945 60  
     6946 60  
     6947 7C  
     6948 60  
     6949 60  
     694A 60  
     694B 60  
0080 694C C7  GUDG174	BYTE >C7,>CC,>CC,>CC,>CC,>CC,>CE,>C7 ; Character 174
     694D CC  
     694E CC  
     694F CC  
     6950 CC  
     6951 CC  
     6952 CE  
     6953 C7  
0081 6954 C0  GUDG175	BYTE >C0,>00,>00,>C0,>E0,>60,>E0,>C0 ; Character 175
     6955 00  
     6956 00  
     6957 C0  
     6958 E0  
     6959 60  
     695A E0  
     695B C0  
0082 695C 61  GLINE0_25 BYTE >61,>62,>63,>64,>65,>66,>67,>68,>68,>69,>6A,>6B,>68,>6C,>6D,>6E,>6F,>70,>71,>72,>68,>73,>74,>75
     695D 62  
     695E 63  
     695F 64  
     6960 65  
     6961 66  
     6962 67  
     6963 68  
     6964 68  
     6965 69  
     6966 6A  
     6967 6B  
     6968 68  
     6969 6C  
     696A 6D  
     696B 6E  
     696C 6F  
     696D 70  
     696E 71  
     696F 72  
     6970 68  
     6971 73  
     6972 74  
     6973 75  
0083 6974 76  GLINE1_25 BYTE >76,>77,>78,>79,>7A,>7B,>78,>7C,>7D,>7E,>7F,>80,>81,>82,>83,>84,>85,>86
     6975 77  
     6976 78  
     6977 79  
     6978 7A  
     6979 7B  
     697A 78  
     697B 7C  
     697C 7D  
     697D 7E  
     697E 7F  
     697F 80  
     6980 81  
     6981 82  
     6982 83  
     6983 84  
     6984 85  
     6985 86  
0084 6986 87  GLINE2_24 BYTE >87,>88,>78,>89,>8A,>8B,>78,>8C,>8D,>8E,>8F,>90,>8B,>91,>92,>93,>94
     6987 88  
     6988 78  
     6989 89  
     698A 8A  
     698B 8B  
     698C 78  
     698D 8C  
     698E 8D  
     698F 8E  
     6990 8F  
     6991 90  
     6992 8B  
     6993 91  
     6994 92  
     6995 93  
     6996 94  
0085 6997 95  GLINE3_25 BYTE >95,>96,>97,>98,>99,>9A,>97,>9B,>9C,>9D,>9E,>9F,>A0,>A1,>A2,>A3,>A4,>A5
     6998 96  
     6999 97  
     699A 98  
     699B 99  
     699C 9A  
     699D 97  
     699E 9B  
     699F 9C  
     69A0 9D  
     69A1 9E  
     69A2 9F  
     69A3 A0  
     69A4 A1  
     69A5 A2  
     69A6 A3  
     69A7 A4  
     69A8 A5  
0086 69A9 A6  GLINE4_9 BYTE >A6,>A7
     69AA A7  
0087 69AB A8  GLINE4_28 BYTE >A8,>A9,>AA,>AB,>AC,>AD,>AE,>AF
     69AC A9  
     69AD AA  
     69AE AB  
     69AF AC  
     69B0 AD  
     69B1 AE  
     69B2 AF  
0088          
0089          G_SCR1
0090 69B3 31      MOVE >0280,G@GUDG96,V@>0B00 ; Copy our screen chars
     69B4 02  
     69B5 80
     69B6 AB  
     69B7 00
     69B8 66  
     69B9 DC
0091          
0092 69BA 31  	MOVE >0018,G@GLINE0_25,V@>0001
     69BB 00  
     69BC 18
     69BD A0  
     69BE 01
     69BF 69  
     69C0 5C
0093 69C1 31  	MOVE >0012,G@GLINE1_25,V@>0027
     69C2 00  
     69C3 12
     69C4 A0  
     69C5 27
     69C6 69  
     69C7 74
0094 69C8 31  	MOVE >0011,G@GLINE2_24,V@>0047
     69C9 00  
     69CA 11
     69CB A0  
     69CC 47
     69CD 69  
     69CE 86
0095 69CF 31  	MOVE >0012,G@GLINE3_25,V@>0067
     69D0 00  
     69D1 12
     69D2 A0  
     69D3 67
     69D4 69  
     69D5 97
0096 69D6 31  	MOVE >0002,G@GLINE4_9,V@>0087
     69D7 00  
     69D8 02
     69D9 A0  
     69DA 87
     69DB 69  
     69DC A9
0097 69DD 31  	MOVE >0008,G@GLINE4_28,V@>0094
     69DE 00  
     69DF 08
     69E0 A0  
     69E1 94
     69E2 69  
     69E3 AB
0098          
0099 69E4 00      RTN
0100          
