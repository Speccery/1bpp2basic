XGA99 CROSS-ASSEMBLER   VERSION 3.0.1
              > config.gpl
0001          * config.gpl
0002          * Configurator for GROMMY2
0003          * At this point this is just a demo how to render the generated screen.gpl
0004          * EP 2023-11-26
0005          *
0006          * Compile the GPL code to binary with:
0007          * xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
0008          * output file is config.bin, since the filename ends with g it is treated
0009          * by an emulator such as js99er.net as a GROM file.
0010          *
0011          * This file includes the screen.gpl file at the very end.
0012          *
0013          
0014          LALIGN    EQU >02              Left alignment of text
0015          LALIGN2   EQU >03
0016          LAYOUTVER EQU 5         Row for Version number
0017          LAYOUTBAN EQU 8        Row for selected bank display
0018          VEROFS    EQU 32*LAYOUTVER
0019          VALIDIND  EQU VEROFS-29         ; Indicator for valid command
0020          VRAMDUMPAREA EQU VEROFS+224+32
0021          LAYOUTPAG EQU 7
0022          PAGOFS    EQU 32*LAYOUTPAG
0023          
0024          * A few variables for the grommy2 config to use.
0025          * I am not sure if these are free to use, but I will try :)
0026          XREG    EQU >832C   ; ** Program text or token pointer (in BASIC?)
0027          YREG    EQU >832E   ; ** Pointer to line number tale (in BASIC)
0028          ZREG    EQU >8330   ; ** Start of line number table pointer (in BASIC)
0029          ; >8332 .. 8337 seem to contain pointers also used by BASIC not GPL
0030          BMODE   EQU >8332
0031          PAGE0   EQU >8333
0032          PAGE1   EQU >8334
0033          PAGE2   EQU >8335
0034          
0035          
0036          * Grommy2 command buffer in scratchpad
0037          GCMDBYTE EQU >8340
0038          GCMDP2   EQU >8342
0039          GCMDP3   EQU >8343
0040          GCMDP4   EQU >8344
0041          GCMDP5   EQU >8345
0042          GCMDP6   EQU >8346
0043          GCMDP7   EQU >8347
0044          
0045          BANK    EQU >8350           Active bank
0046          SHADOW  EQU >8351           Shadow enable / disable
0047          PAD0    EQU >835C
0048          PAD1    EQU >835D
0049          PAD2    EQU >835E
0050          PAD3    EQU >835F
0051          PAD4    EQU >8360
0052          PAD5    EQU >8361
0053          INDEX   EQU PAD5
0054          DUMPA   EQU >8362           ; GROM Dump address
0055          VRAMP   EQU >8340           ; VRAM ptr overlays GCMDBYTE
0056          
0057          DSP     EQU >8372           ; GPL data stack pointer
0058          SCANKEY EQU >8375
0059          VDPTIMER EQU >8379          ; Incremented by VDP interrupts
0060          * Hardware interface address
0061          HWIF     EQU >5FF0
0062          
0063          HEXBASECH EQU >E0         ; Base character for hex display
0064          ALIVECH   EQU >DF         ; Placed in top right corner, show we are alive
0065          
0066          
0067 6000 AA  G6000  DATA >AA01             standard header  version 1
     6001 01
0068 6002 00         DATA >0000             # of programs 0
     6003 00
0069 6004 00         DATA >0000             no power up
     6005 00
0070 6006 60         DATA G6010             program
     6007 10
0071 6008 00         DATA >0000             DSRs
     6009 00
0072 600A 00         DATA >0000             subprograms
     600B 00
0073 600C 00         DATA >0000
     600D 00
0074 600E 00         DATA >0000
     600F 00
0075          
0076 6010 00  G6010  DATA >0000         * No next program
     6011 00
0077 6012 60         DATA GPROG
     6013 2A
0078 6014 0E         STRI 'GROMMY2 CONFIG'
     6015 47  
     6016 52  
     6017 4F  
     6018 4D  
     6019 4D  
     601A 59  
     601B 32  
     601C 20  
     601D 43  
     601E 4F  
     601F 4E  
     6020 46  
     6021 49  
     6022 47  
0079          
0080          GVREGS
0081 6023 E0      BYTE  >E0              VDP registers values: standard mode
0082 6024 00      BYTE  >00              screen image at >0000
0083 6025 0E      BYTE  >0E              color table at >0380
0084 6026 01      BYTE  >01              char patterns at >0800
0085 6027 06      BYTE  >06              sprite attributes at >0300
0086 6028 00      BYTE  >00              sprite patterns at >0000
0087 6029 F5      BYTE  >F5              text/screen colors: white / light blue
0088          
0089          GPROG
0090 602A 86      CLR   @>8374
     602B 74  
0091 602C BF      DST   >0900,@>834A     load upper case chars 32->
     602D 4A  
     602E 09  
     602F 00
0092 6030 06      CALL  G@>0018
     6031 00  
     6032 18
0093          * Setup roughly as with mini memory
0094 6033 39      MOVE >0007,G@GVREGS,#>01    Set VDP Regs
     6034 00  
     6035 07
     6036 01  
     6037 60  
     6038 23
0095 6039 86      CLR   V@>0800          clear charpats 0-31
     603A A8  
     603B 00
0096 603C 35      MOVE  >00FF,V@>0800,V@>0801
     603D 00  
     603E FF
     603F A8  
     6040 01
     6041 A8  
     6042 00
0097          
0098 6043 BE      ST    >7E,@>8373       init subroutine stack
     6044 73  
     6045 7E  
0099 6046 87      DCLR  @>8322           clear error code
     6047 22  
0100 6048 87      DCLR  @>8348           clear flags
     6049 48  
0101          
0102 604A 87      DCLR   @DUMPA
     604B 62  
0103 604C 86      CLR    @BANK           Actually init from grommy2
     604D 50  
0104 604E 86      CLR    @SHADOW         Actually init from grommy2
     604F 51  
0105          
0106 6050 87      DCLR   @XREG
     6051 2C  
0107 6052 87      DCLR   @YREG
     6053 2E  
0108 6054 87      DCLR   @ZREG
     6055 30  
0109          
0110 6056 06      CALL G@GVDPSETUP
     6057 69  
     6058 92
0111          
0112 6059 06      CALL G@G_SCR1       ; Setup the screen which was automatically generated
     605A 6C  
     605B 7D
0113          * Setup additional chars E0..EF as numbers 0..9 and A..F
0114          * 0x980 = hex(0x800+ord('0')*8)
0115          * 0xa08 = hex(0x800+ord('A')*8)
0116          * 0xf00 = hex(0x800+0xe0*8)
0117          * 0xf50 = hex(0x800+0xea*8)
0118          CHSRC1 EQU >800+(8*'0')
0119          CHSRC2 EQU >800+(8*'A')
0120          CHOFS1 EQU >800+(8*HEXBASECH)
0121          CHOFS2 EQU >800+(8*(HEXBASECH+10))
0122 605C 35      MOVE 10*8,V@CHSRC1,V@CHOFS1  * 10 number patterns
     605D 00  
     605E 50
     605F AF  
     6060 0F
     6061 00
     6062 A9  
     6063 80
0123 6064 35      MOVE  6*8,V@CHSRC2,V@CHOFS2
     6065 00  
     6066 30
     6067 AF  
     6068 0F
     6069 50
     606A AA  
     606B 08
0124          * Set the colors for these characters.
0125 606C BE      ST   >A5,V@>39C
     606D A3  
     606E 9C
     606F A5  
0126 6070 BE      ST   >A5,V@>39D
     6071 A3  
     6072 9D
     6073 A5  
0127          * Make the fonts "bold"
0128 6074 BF      DST  >F00,@VRAMP
     6075 40  
     6076 0F  
     6077 00
0129 6078 BC  !   ST   V@0(@VRAMP),@PAD0
     6079 5C  
     607A E0  
     607B 00
     607C 40
0130 607D E6      SRL  1,@PAD0
     607E 5C  
     607F 01  
0131 6080 B4      OR   V@0(@VRAMP),@PAD0
     6081 5C  
     6082 E0  
     6083 00
     6084 40
0132 6085 BC      ST  @PAD0,V@0(@VRAMP)
     6086 E0  
     6087 00
     6088 40
     6089 5C  
0133 608A 91      DINC @VRAMP
     608B 40  
0134 608C D7      DCEQ >F80,@VRAMP
     608D 40  
     608E 0F  
     608F 80
0135 6090 40      BR   -!
     6091 78  
0136          * Copy the fonts to make inverse duplicates
0137 6092 35      MOVE >80,V@>F00,V@>F80
     6093 00  
     6094 80
     6095 AF  
     6096 0F
     6097 80
     6098 AF  
     6099 0F
     609A 00
0138 609B BE      ST   >5A,V@>39E
     609C A3  
     609D 9E
     609E 5A  
0139 609F BE      ST   >5A,V@>39F
     60A0 A3  
     60A1 9F
     60A2 5A  
0140          * Move machine code to scratchpad
0141 60A3 31      MOVE BINLEN,G@BINDATA,@>8300 ; Move assembly code in place
     60A4 00  
     60A5 22
     60A6 00  
     60A7 69  
     60A8 70
0142          
0143          SCREEN1:
0144          * Clear the screen (bottom part)
0145 60A9 BE      ST   ' ',V@PAGOFS
     60AA A0  
     60AB E0
     60AC 20  
0146 60AD 35      MOVE 768-PAGOFS-1,V@PAGOFS,V@PAGOFS+1   ; Clear screen bottom
     60AE 02  
     60AF 1F
     60B0 A0  
     60B1 E1
     60B2 A0  
     60B3 E0
0147          * Use the FMT token to add some strings on the screen
0148 60B4 08      FMT
0149 60B5 FF      COL LALIGN
     60B6 02  
0150 60B7 FE      ROW LAYOUTVER
     60B8 05  
0151 60B9 1D      HTEX 'VER 0.0.00 BANK 0 SHADOW 0    '
     60BA 56  
     60BB 45  
     60BC 52  
     60BD 20  
     60BE 30  
     60BF 2E  
     60C0 30  
     60C1 2E  
     60C2 30  
     60C3 30  
     60C4 20  
     60C5 42  
     60C6 41  
     60C7 4E  
     60C8 4B  
     60C9 20  
     60CA 30  
     60CB 20  
     60CC 53  
     60CD 48  
     60CE 41  
     60CF 44  
     60D0 4F  
     60D1 57  
     60D2 20  
     60D3 30  
     60D4 20  
     60D5 20  
     60D6 20  
     60D7 20  
0152 60D8 FF      COL LALIGN
     60D9 02  
0153 60DA 1D      HTEX '           MODE 0 PG 01 02 03 '
     60DB 20  
     60DC 20  
     60DD 20  
     60DE 20  
     60DF 20  
     60E0 20  
     60E1 20  
     60E2 20  
     60E3 20  
     60E4 20  
     60E5 20  
     60E6 4D  
     60E7 4F  
     60E8 44  
     60E9 45  
     60EA 20  
     60EB 30  
     60EC 20  
     60ED 50  
     60EE 47  
     60EF 20  
     60F0 30  
     60F1 31  
     60F2 20  
     60F3 30  
     60F4 32  
     60F5 20  
     60F6 30  
     60F7 33  
     60F8 20  
0154 60F9 FF      COL LALIGN
     60FA 02  
0155 60FB 19      HTEX 'SELECT GROM BANK FOR READS'
     60FC 53  
     60FD 45  
     60FE 4C  
     60FF 45  
     6100 43  
     6101 54  
     6102 20  
     6103 47  
     6104 52  
     6105 4F  
     6106 4D  
     6107 20  
     6108 42  
     6109 41  
     610A 4E  
     610B 4B  
     610C 20  
     610D 46  
     610E 4F  
     610F 52  
     6110 20  
     6111 52  
     6112 45  
     6113 41  
     6114 44  
     6115 53  
0156 6116 A0      ROW+ >01
0157 6117 FF      COL LALIGN2
     6118 03  
0158 6119 1A      HTEX '0 USER BANK 0 / SYSTEM BANK'
     611A 30  
     611B 20  
     611C 55  
     611D 53  
     611E 45  
     611F 52  
     6120 20  
     6121 42  
     6122 41  
     6123 4E  
     6124 4B  
     6125 20  
     6126 30  
     6127 20  
     6128 2F  
     6129 20  
     612A 53  
     612B 59  
     612C 53  
     612D 54  
     612E 45  
     612F 4D  
     6130 20  
     6131 42  
     6132 41  
     6133 4E  
     6134 4B  
0159 6135 A0      ROW+ >01
0160 6136 FF      COL LALIGN2
     6137 03  
0161 6138 0C      HTEX '1 USER BANK 1'
     6139 31  
     613A 20  
     613B 55  
     613C 53  
     613D 45  
     613E 52  
     613F 20  
     6140 42  
     6141 41  
     6142 4E  
     6143 4B  
     6144 20  
     6145 31  
0162 6146 A0      ROW+ >01
0163 6147 FF      COL LALIGN2
     6148 03  
0164 6149 0C      HTEX '2 USER BANK 2'
     614A 32  
     614B 20  
     614C 55  
     614D 53  
     614E 45  
     614F 52  
     6150 20  
     6151 42  
     6152 41  
     6153 4E  
     6154 4B  
     6155 20  
     6156 32  
0165 6157 A0      ROW+ >01
0166 6158 FF      COL LALIGN2
     6159 03  
0167 615A 0C      HTEX '3 USER BANK 3'
     615B 33  
     615C 20  
     615D 55  
     615E 53  
     615F 45  
     6160 52  
     6161 20  
     6162 42  
     6163 41  
     6164 4E  
     6165 4B  
     6166 20  
     6167 33  
0168 6168 A0      ROW+ >01
0169 6169 FF      COL LALIGN2
     616A 03  
0170 616B 0A      HTEX '4 GRAM BANK'
     616C 34  
     616D 20  
     616E 47  
     616F 52  
     6170 41  
     6171 4D  
     6172 20  
     6173 42  
     6174 41  
     6175 4E  
     6176 4B  
0171          
0172 6177 A1      ROW+ >02
0173 6178 FF      COL LALIGN
     6179 02  
0174 617A 09      HTEX 'SHADOW RAM'
     617B 53  
     617C 48  
     617D 41  
     617E 44  
     617F 4F  
     6180 57  
     6181 20  
     6182 52  
     6183 41  
     6184 4D  
0175 6185 A0      ROW+ >01
0176 6186 FF      COL LALIGN2
     6187 03  
0177 6188 15      HTEX '5 ENABLE     6 DISABLE'
     6189 35  
     618A 20  
     618B 45  
     618C 4E  
     618D 41  
     618E 42  
     618F 4C  
     6190 45  
     6191 20  
     6192 20  
     6193 20  
     6194 20  
     6195 20  
     6196 36  
     6197 20  
     6198 44  
     6199 49  
     619A 53  
     619B 41  
     619C 42  
     619D 4C  
     619E 45  
0178          
0179 619F A1      ROW+ >02
0180 61A0 FF      COL LALIGN
     61A1 02  
0181 61A2 16      HTEX 'FLASH GRAM TO USER BANK'
     61A3 46  
     61A4 4C  
     61A5 41  
     61A6 53  
     61A7 48  
     61A8 20  
     61A9 47  
     61AA 52  
     61AB 41  
     61AC 4D  
     61AD 20  
     61AE 54  
     61AF 4F  
     61B0 20  
     61B1 55  
     61B2 53  
     61B3 45  
     61B4 52  
     61B5 20  
     61B6 42  
     61B7 41  
     61B8 4E  
     61B9 4B  
0182 61BA A0      ROW+ >01
0183 61BB FF      COL LALIGN2
     61BC 03  
0184 61BD 19      HTEX '7 BK0  8 BK1  9 BK2  E BK3'
     61BE 37  
     61BF 20  
     61C0 42  
     61C1 4B  
     61C2 30  
     61C3 20  
     61C4 20  
     61C5 38  
     61C6 20  
     61C7 42  
     61C8 4B  
     61C9 31  
     61CA 20  
     61CB 20  
     61CC 39  
     61CD 20  
     61CE 42  
     61CF 4B  
     61D0 32  
     61D1 20  
     61D2 20  
     61D3 45  
     61D4 20  
     61D5 42  
     61D6 4B  
     61D7 33  
0185          
0186 61D8 A1      ROW+ >02
0187 61D9 FF      COL LALIGN
     61DA 02  
0188 61DB 15      HTEX 'COPY GROM BANK TO GRAM'
     61DC 43  
     61DD 4F  
     61DE 50  
     61DF 59  
     61E0 20  
     61E1 47  
     61E2 52  
     61E3 4F  
     61E4 4D  
     61E5 20  
     61E6 42  
     61E7 41  
     61E8 4E  
     61E9 4B  
     61EA 20  
     61EB 54  
     61EC 4F  
     61ED 20  
     61EE 47  
     61EF 52  
     61F0 41  
     61F1 4D  
0189 61F2 A0      ROW+ >01
0190 61F3 FF      COL LALIGN2
     61F4 03  
0191 61F5 19      HTEX 'A BK0  B BK1  C BK2  D BK3'
     61F6 41  
     61F7 20  
     61F8 42  
     61F9 4B  
     61FA 30  
     61FB 20  
     61FC 20  
     61FD 42  
     61FE 20  
     61FF 42  
     6200 4B  
     6201 31  
     6202 20  
     6203 20  
     6204 43  
     6205 20  
     6206 42  
     6207 4B  
     6208 32  
     6209 20  
     620A 20  
     620B 44  
     620C 20  
     620D 42  
     620E 4B  
     620F 33  
0192          
0193 6210 A1      ROW+ >02
0194 6211 FF      COL LALIGN
     6212 02  
0195 6213 1B      HTEX 'M MAIN.. U DUMP.. P PAGING..'
     6214 4D  
     6215 20  
     6216 4D  
     6217 41  
     6218 49  
     6219 4E  
     621A 2E  
     621B 2E  
     621C 20  
     621D 55  
     621E 20  
     621F 44  
     6220 55  
     6221 4D  
     6222 50  
     6223 2E  
     6224 2E  
     6225 20  
     6226 50  
     6227 20  
     6228 50  
     6229 41  
     622A 47  
     622B 49  
     622C 4E  
     622D 47  
     622E 2E  
     622F 2E  
0196          
0197 6230 FB      FEND
0198          
0199          * Pattern address of character ALIVECH
0200          PATADR EQU >0800+(8*ALIVECH)
0201          * Test a couple of chars
0202          *    MOVE 64,G@DENSE_FONT,V@PATADR-64
0203          *    ST >F7,V@0
0204          *    ST >F8,V@1
0205          *    ST >F9,V@2
0206          *    ST >FA,V@3
0207          *    ST >FB,V@4
0208          *    ST >FC,V@5
0209          *    ST >FD,V@6
0210          *    ST >FE,V@7
0211          
0212 6231 06      CALL  SHOW_VERSION      ; Get version, bank, shadow info
     6232 68  
     6233 5A
0213 6234 05      B     GUPDATE           ; update screen
     6235 62  
     6236 EA
0214          MAINSEL:
0215 6237 06      CALL  CLEARVALID
     6238 65  
     6239 ED
0216          GWAIT
0217 623A 03      SCAN
0218 623B 62      BS    MGOTKEY
     623C 47  
0219          * We did not get a key. Animate something.
0220 623D BE      ST    ALIVECH,V@>001F      Write char FF to top right corner
     623E A0  
     623F 1F
     6240 DF  
0221 6241 90      INC   V@PATADR
     6242 AE  
     6243 F8
0222 6244 05      B    G@GWAIT          wait for the user to press a key
     6245 62  
     6246 3A
0223          
0224          MGOTKEY:
0225 6247 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     6248 A0  
     6249 82
     624A 75  
0226 624B CE      CGT   '0'-1,@SCANKEY       greater than >= 0
     624C 75  
     624D 2F  
0227 624E 42      BR    GG01              no skip forward
     624F E4  
0228 6250 CE      CGT   '9',@SCANKEY        Key greater than '9'?
     6251 75  
     6252 39  
0229 6253 62      BS    CHECK_ABC             ; Yes: skip forward
     6254 6E  
0230 6255 A6      SUB   '0',@SCANKEY
     6256 75  
     6257 30  
0231 6258 8A      CASE  @SCANKEY
     6259 75  
0232 625A 42      BR    MKEY0
     625B A0  
0233 625C 42      BR    MKEY1
     625D A0  
0234 625E 42      BR    MKEY2
     625F A0  
0235 6260 42      BR    MKEY3
     6261 A0  
0236 6262 42      BR    MKEY4
     6263 AB  
0237 6264 42      BR    MKEY5
     6265 91  
0238 6266 42      BR    MKEY6
     6267 9C  
0239 6268 42      BR    MKEY7
     6269 B3  
0240 626A 42      BR    MKEY8
     626B B3  
0241 626C 42      BR    MKEY9
     626D B3  
0242          
0243          CHECK_ABC
0244          ; Commands A,B, C,D,E,U,P
0245 626E D6      CEQ   'U',@SCANKEY
     626F 75  
     6270 55  
0246 6271 63      BS    DUMPSCREEN
     6272 23  
0247 6273 D6      CEQ   'P',@SCANKEY
     6274 75  
     6275 50  
0248 6276 66      BS    PAGINGSCREEN
     6277 DE  
0249 6278 CE      CGT   'A'-1,@SCANKEY
     6279 75  
     627A 40  
0250 627B 42      BR    GG01
     627C E4  
0251 627D CE      CGT   'E',@SCANKEY
     627E 75  
     627F 45  
0252 6280 62      BS    GG01
     6281 E4  
0253 6282 A6      SUB   'A',@SCANKEY
     6283 75  
     6284 41  
0254 6285 8A      CASE  @SCANKEY
     6286 75  
0255 6287 42      BR    MKEYA
     6288 C7  
0256 6289 42      BR    MKEYB
     628A C7  
0257 628B 42      BR    MKEYC
     628C C7  
0258 628D 42      BR    MKEYD
     628E C7  
0259 628F 42      BR    MKEYE
     6290 C2  
0260          
0261          MKEY5:
0262 6291 BE      ST  1,@SHADOW
     6292 51  
     6293 01  
0263          SHADOWSET
0264 6294 BC      ST  @SHADOW,@GCMDP2    ; Set parameter 2
     6295 42  
     6296 51  
0265 6297 BE      ST  3,@GCMDBYTE         ; Command 3 shadow enable/disable
     6298 40  
     6299 03  
0266 629A 42      BR  ISSUECMD
     629B D7  
0267          MKEY6:
0268 629C 86      CLR @SHADOW
     629D 51  
0269 629E 42      BR  SHADOWSET
     629F 94  
0270          MKEY0
0271          MKEY1
0272          MKEY2
0273          MKEY3
0274 62A0 BC      ST   @SCANKEY,@BANK
     62A1 50  
     62A2 75  
0275 62A3 BC      ST   @SCANKEY,@GCMDP2    ; Set parameter 2
     62A4 42  
     62A5 75  
0276          BANKSEL
0277 62A6 BE      ST   1,@GCMDBYTE         ; Command 1 select bank for reads
     62A7 40  
     62A8 01  
0278 62A9 42      BR  ISSUECMD
     62AA D7  
0279          MKEY4
0280 62AB BC      ST   @SCANKEY,@BANK
     62AC 50  
     62AD 75  
0281 62AE BE      ST   8,@GCMDP2           ; GRAM bank is 8
     62AF 42  
     62B0 08  
0282 62B1 42      BR   BANKSEL
     62B2 A6  
0283          
0284          MKEY7  ; User bank 0
0285          MKEY8  ; User bank 1
0286          MKEY9  ; User bank 2
0287 62B3 A6      SUB 7,@SCANKEY      ; becomes 0,1,2
     62B4 75  
     62B5 07  
0288 62B6 BC      ST  @SCANKEY,@GCMDP2
     62B7 42  
     62B8 75  
0289          GRAM2FLASH
0290 62B9 BE      ST   >3F,@GCMDP3        ; Bit mask: flash entire bank
     62BA 43  
     62BB 3F  
0291 62BC BE      ST   4,@GCMDBYTE
     62BD 40  
     62BE 04  
0292 62BF 05      B   ISSUECMD
     62C0 62  
     62C1 D7
0293          MKEYE:                       ; Flash GRAM to user bank 3
0294 62C2 BE      ST   >03,@GCMDP2        ; User bank 3
     62C3 42  
     62C4 03  
0295 62C5 42      BR   GRAM2FLASH
     62C6 B9  
0296          
0297          MKEYA                       ; Copy bank 0 to GRAM
0298          MKEYB
0299          MKEYC
0300          MKEYD
0301 62C7 BC      ST    @SCANKEY,@GCMDP2
     62C8 42  
     62C9 75  
0302          COPY2GRAM:
0303 62CA BE      ST    '*',V@VALIDIND    ; Command valid indicator
     62CB A0  
     62CC 83
     62CD 2A  
0304 62CE BE      ST    2,@GCMDBYTE
     62CF 40  
     62D0 02  
0305 62D1 42      BR    ISSUECMD
     62D2 D7  
0306          
0307          ISSUECMD1:                  ; Clear last 4 parameter bytes
0308 62D3 87      DCLR  @GCMDBYTE+4
     62D4 44  
0309 62D5 87      DCLR  @GCMDBYTE+6
     62D6 46  
0310          ISSUECMD:
0311 62D7 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     62D8 00  
     62D9 08
     62DA 48  
     62DB 69  
     62DC 0C
0312 62DD BE      ST    '*',V@VALIDIND    ; Command valid indicator
     62DE A0  
     62DF 83
     62E0 2A  
0313 62E1 06      CALL  GSENDCMD          ; Send command to HW
     62E2 68  
     62E3 F7
0314          
0315          GG01:
0316 62E4 D6      CEQ   >0F,@SCANKEY       is it Fctn-9?
     62E5 75  
     62E6 0F  
0317 62E7 42      BR    G@GCONT2         no: GCONT2
     62E8 EA  
0318 62E9 0B      EXIT                   yes: reset the TI-99/4A
0319          
0320          GCONT2
0321          * Update screen to reflect current status
0322          GUPDATE
0323          * Status of Shadow RAM enable/disable
0324 62EA BE      ST  '0',@PAD0
     62EB 5C  
     62EC 30  
0325 62ED A0      ADD @SHADOW,@PAD0
     62EE 5C  
     62EF 51  
0326 62F0 BC      ST  @PAD0,V@VEROFS+>1B        Write to VRAM
     62F1 A0  
     62F2 BB
     62F3 5C  
0327          * Status of selected bank
0328 62F4 BE      ST  '0',@PAD0
     62F5 5C  
     62F6 30  
0329 62F7 A0      ADD @BANK,@PAD0
     62F8 5C  
     62F9 50  
0330 62FA BC      ST  @PAD0,V@VEROFS+>12  ; Write to VRAM
     62FB A0  
     62FC B2
     62FD 5C  
0331          
0332          
0333          * Start update GROM read bank. First erase bank markings.
0334          BANKOFS EQU (32*LAYOUTBAN)+4
0335 62FE BE      ST ' ',V@BANKOFS
     62FF A1  
     6300 04
     6301 20  
0336 6302 BE      ST ' ',V@BANKOFS+>20
     6303 A1  
     6304 24
     6305 20  
0337 6306 BE      ST ' ',V@BANKOFS+>40
     6307 A1  
     6308 44
     6309 20  
0338 630A BE      ST ' ',V@BANKOFS+>60
     630B A1  
     630C 64
     630D 20  
0339 630E BE      ST ' ',V@BANKOFS+>80
     630F A1  
     6310 84
     6311 20  
0340 6312 87      DCLR @PAD0
     6313 5C  
0341 6314 BC      ST   @BANK,@PAD3        Copy to low byte the bank #
     6315 5F  
     6316 50  
0342 6317 E3      DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
     6318 5E  
     6319 00  
     631A 05
0343 631B BE      ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
     631C E1  
     631D 04
     631E 5E
     631F 2A  
0344          * End update GROM read bank.
0345 6320 05      B   G@MAINSEL
     6321 62  
     6322 37
0346          
0347          *----------------------------------------
0348          * Second screen with a few features.
0349          *----------------------------------------
0350          DUMPSCREEN:
0351 6323 BE      ST   ' ',V@VEROFS
     6324 A0  
     6325 A0
     6326 20  
0352 6327 35      MOVE 768-VEROFS-1-32,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     6328 02  
     6329 3F
     632A A0  
     632B A1
     632C A0  
     632D A0
0353 632E 08      FMT
0354 632F FF      COL LALIGN
     6330 02  
0355 6331 FE      ROW LAYOUTVER
     6332 05  
0356 6333 14      HTEX '1 DEC 2 INC DUMP ADDR'
     6334 31  
     6335 20  
     6336 44  
     6337 45  
     6338 43  
     6339 20  
     633A 32  
     633B 20  
     633C 49  
     633D 4E  
     633E 43  
     633F 20  
     6340 44  
     6341 55  
     6342 4D  
     6343 50  
     6344 20  
     6345 41  
     6346 44  
     6347 44  
     6348 52  
0357 6349 A0      ROW+ >01
0358 634A FF      COL LALIGN
     634B 02  
0359 634C 12      HTEX '4 FILL GRAM WITH FF'
     634D 34  
     634E 20  
     634F 46  
     6350 49  
     6351 4C  
     6352 4C  
     6353 20  
     6354 47  
     6355 52  
     6356 41  
     6357 4D  
     6358 20  
     6359 57  
     635A 49  
     635B 54  
     635C 48  
     635D 20  
     635E 46  
     635F 46  
0360 6360 A0      ROW+ >01
0361 6361 FF      COL LALIGN
     6362 02  
0362 6363 1B      HTEX '5 COPY 24K GROM 8000 TO GRAM'
     6364 35  
     6365 20  
     6366 43  
     6367 4F  
     6368 50  
     6369 59  
     636A 20  
     636B 32  
     636C 34  
     636D 4B  
     636E 20  
     636F 47  
     6370 52  
     6371 4F  
     6372 4D  
     6373 20  
     6374 38  
     6375 30  
     6376 30  
     6377 30  
     6378 20  
     6379 54  
     637A 4F  
     637B 20  
     637C 47  
     637D 52  
     637E 41  
     637F 4D  
0363 6380 A0      ROW+ >01
0364 6381 FF      COL LALIGN
     6382 02  
0365 6383 0E      HTEX '6 ARM EXECUTE X'
     6384 36  
     6385 20  
     6386 41  
     6387 52  
     6388 4D  
     6389 20  
     638A 45  
     638B 58  
     638C 45  
     638D 43  
     638E 55  
     638F 54  
     6390 45  
     6391 20  
     6392 58  
0366 6393 A0      ROW+ >01
0367 6394 FF      COL LALIGN
     6395 02  
0368 6396 11      HTEX '7 ARM EXECUTE 4000'
     6397 37  
     6398 20  
     6399 41  
     639A 52  
     639B 4D  
     639C 20  
     639D 45  
     639E 58  
     639F 45  
     63A0 43  
     63A1 55  
     63A2 54  
     63A3 45  
     63A4 20  
     63A5 34  
     63A6 30  
     63A7 30  
     63A8 30  
0369 63A9 A0      ROW+ >01
0370 63AA FF      COL LALIGN
     63AB 02  
0371 63AC 18      HTEX '0 BURN FIRMWARE FROM GRAM'
     63AD 30  
     63AE 20  
     63AF 42  
     63B0 55  
     63B1 52  
     63B2 4E  
     63B3 20  
     63B4 46  
     63B5 49  
     63B6 52  
     63B7 4D  
     63B8 57  
     63B9 41  
     63BA 52  
     63BB 45  
     63BC 20  
     63BD 46  
     63BE 52  
     63BF 4F  
     63C0 4D  
     63C1 20  
     63C2 47  
     63C3 52  
     63C4 41  
     63C5 4D  
0372 63C6 A0      ROW+ >01
0373 63C7 FF      COL LALIGN
     63C8 02  
0374 63C9 18      HTEX 'X Y Z: EDIT VAR X, Y OR Z'
     63CA 58  
     63CB 20  
     63CC 59  
     63CD 20  
     63CE 5A  
     63CF 3A  
     63D0 20  
     63D1 45  
     63D2 44  
     63D3 49  
     63D4 54  
     63D5 20  
     63D6 56  
     63D7 41  
     63D8 52  
     63D9 20  
     63DA 58  
     63DB 2C  
     63DC 20  
     63DD 59  
     63DE 20  
     63DF 4F  
     63E0 52  
     63E1 20  
     63E2 5A  
0375 63E3 FB      FEND
0376          
0377 63E4 31      MOVE BINLEN,G@BINDATA,@>8300 ; Move assembly code in place
     63E5 00  
     63E6 22
     63E7 00  
     63E8 69  
     63E9 70
0378          
0379          * ; test characters on last line
0380          *     ST  HEXBASECH,@PAD0
0381          *     DST 32*23,@VRAMP          * Beginning of last row
0382          * !   ST  @PAD0,V@0(@VRAMP)
0383          *     DINC @VRAMP
0384          *     INC @PAD0
0385          *     CZ  @PAD0
0386          *     BR  -!
0387          
0388          
0389          ; First test in units of frame count (VDPTIMER)
0390          ; Test runs for 4 frames.
0391          ;   GPL with original HEXOUT: 119 ticks
0392          ;   GPL call to GPL HEXOUT routine issuing XML >F0:  55 ticks
0393          ;   Replace GPL call with XML >F0: 47 ticks
0394          ;   All GPL with new hex characters, no gap between '9' and 'A': 87 ticks
0395          ;     This also handles two characers at a time. But still slow.
0401          
0402 63EA 05      B  SKIPBENCH
     63EB 64  
     63EC 07
0403          ; Run benchmark
0404 63ED BE      ST    4,@XREG               ; Loop counter
     63EE 2C  
     63EF 04  
0405 63F0 BC      ST    @VDPTIMER,@XREG+1     ; Read timer
     63F1 2D  
     63F2 79  
0406 63F3 06  !   CALL  G@DODUMP
     63F4 64  
     63F5 52
0407 63F6 A3      DADD  8,@DUMPA
     63F7 62  
     63F8 00  
     63F9 08
0408 63FA 92      DEC   @XREG
     63FB 2C  
0409 63FC 8E      CZ    @XREG
     63FD 2C  
0410 63FE 43      BR   -!
     63FF F3  
0411 6400 BC      ST    @VDPTIMER,@XREG       ; Read timer
     6401 2C  
     6402 79  
0412 6403 A7      DSUB  4*10,@DUMPA
     6404 62  
     6405 00  
     6406 28
0413          SKIPBENCH:
0414 6407 05      B     MAKEDUMP      ; NOP
     6408 64  
     6409 0A
0415          
0416          MAKEDUMP:
0417 640A BD      DST  @YREG,@DUMPA
     640B 62  
     640C 2E  
0418 640D 06      CALL G@DODUMP
     640E 64  
     640F 52
0419 6410 06      CALL  CLEARVALID
     6411 65  
     6412 ED
0420          ; Wait for keypress
0421          KW1:
0422 6413 03      SCAN
0423 6414 64      BS    DGOTKEY
     6415 1C  
0424 6416 90      INC   V@PATADR
     6417 AE  
     6418 F8
0425 6419 05      B     KW1
     641A 64  
     641B 13
0426          DGOTKEY:
0427 641C D6      CEQ   'M',@SCANKEY
     641D 75  
     641E 4D  
0428 641F 60      BS    SCREEN1           ; Back to main screen
     6420 A9  
0429 6421 D6      CEQ   'P',@SCANKEY
     6422 75  
     6423 50  
0430 6424 66      BS    PAGINGSCREEN
     6425 DE  
0431 6426 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     6427 A0  
     6428 82
     6429 75  
0432 642A CE      CGT   'X'-1,@SCANKEY    ; Key >= 'X'
     642B 75  
     642C 57  
0433 642D 64      BS    XYZ               ; Yes: go to XYZ
     642E AA  
0434 642F CE      CGT   '0'-1,@SCANKEY
     6430 75  
     6431 2F  
0435 6432 44      BR    KW1               ; Key less than zero -> loop
     6433 13  
0436 6434 CE      CGT   '9',@SCANKEY      ; Key over '7' -> loop
     6435 75  
     6436 39  
0437 6437 64      BS    KW1
     6438 13  
0438 6439 A6      SUB   '0',@SCANKEY
     643A 75  
     643B 30  
0439 643C 8A      CASE  @SCANKEY
     643D 75  
0440 643E 45      BR    DKEY0
     643F 30  
0441 6440 45      BR    DKEY1
     6441 14  
0442 6442 45      BR    DKEY2
     6443 1B  
0443 6444 43      BR    DUMPSCREEN    ; Key 3
     6445 23  
0444 6446 45      BR    DKEY4
     6447 4F  
0445 6448 45      BR    DKEY5
     6449 6E  
0446 644A 45      BR    DKEY6
     644B 8D  
0447 644C 45      BR    DKEY7
     644D AE  
0448 644E 45      BR    DKEY8         ; Undocumented, burn failsafe memory
     644F B4  
0449 6450 45      BR    DKEY9         ; Undocumented, burn 2K page
     6451 CE  
0450          
0451          DODUMP:
0452 6452 BF      DST   VRAMDUMPAREA,@VRAMP
     6453 40  
     6454 01  
     6455 A0
0453 6456 86      CLR   @PAD2             ; Row counter
     6457 5E  
0454 6458 BE      ST    '*',V@VALIDIND
     6459 A0  
     645A 83
     645B 2A  
0455          DUMP2:
0456 645C BE      ST    ' ',V@>FFFF(VRAMP)    ; setup VRAM address in case assembly used
     645D EF  
     645E FF
     645F FF
     6460 40
     6461 20  
0457 6462 BC      ST    @DUMPA,@PAD0      ; Hi byte off address
     6463 5C  
     6464 62  
0001 6465 0F      XML >F0
     6466 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0459 6467 A3      DADD  2,@VRAMP
     6468 40  
     6469 00  
     646A 02
0460 646B BC      ST    @DUMPA+1,@PAD0    ; Lo byte off address
     646C 5C  
     646D 63  
0001 646E 0F      XML >F0
     646F F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0462 6470 BE      ST    ':',V@2(@VRAMP)
     6471 E0  
     6472 02
     6473 40
     6474 3A  
0463 6475 A3      DADD  3,@VRAMP
     6476 40  
     6477 00  
     6478 03
0464 6479 86      CLR   @PAD1             ; column counter
     647A 5D  
0465          ; Dump 8 bytes from from 16 bit ptr  DUMPA
0466          DUMP1:
0467 647B 33      MOVE  1,G@0(@DUMPA),@PAD0    ; Read from GROM pointed to by DUMPA
     647C 00  
     647D 01
     647E 5C  
     647F 00  
     6480 00
     6481 62
0001 6482 0F      XML >F0
     6483 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0469 6484 BE      ST    ' ',V@2(@VRAMP)
     6485 E0  
     6486 02
     6487 40
     6488 20  
0470 6489 A3      DADD  3,@VRAMP
     648A 40  
     648B 00  
     648C 03
0471 648D 91      DINC  @DUMPA
     648E 62  
0472 648F 90      INC   @PAD1
     6490 5D  
0473 6491 D6      CEQ   8,@PAD1           ; 8 columns - are we done?
     6492 5D  
     6493 08  
0474 6494 44      BR    DUMP1             ; No: jump to dump1
     6495 7B  
0475          ; Advance VRAM pointer, we add and mask to bring pointer to beginning
0476          ; of next line.
0477 6496 A3      DADD  >1F,@VRAMP
     6497 40  
     6498 00  
     6499 1F
0478 649A B3      DAND  >0FE0,@VRAMP
     649B 40  
     649C 0F  
     649D E0
0479 649E 90      INC   @PAD2             ; inc Row
     649F 5E  
0480 64A0 D6      CEQ   8,@PAD2           ; Done with 8 rows?
     64A1 5E  
     64A2 08  
0481 64A3 44      BR    DUMP2             ; No: jump to dump2
     64A4 5C  
0482 64A5 A7      DSUB  8*8,@DUMPA           ; Undo the incs in the loop above
     64A6 62  
     64A7 00  
     64A8 40
0483 64A9 00      RTN
0484          
0485          ; Check if we have button X Y Z pressed
0486          XYZ:
0487 64AA CE      CGT   'Z',@SCANKEY    ; Above Z?
     64AB 75  
     64AC 5A  
0488 64AD 64      BS    KW1             ; Yes: KW1
     64AE 13  
0489          ; Ok now we need to ask the user for a value and store it to X, Y or Z register.
0490          ; Show the current value of the variable after character code
0491 64AF BF      DST   VEROFS-29,@VRAMP ; Location in VRAM
     64B0 40  
     64B1 00  
     64B2 83
0492 64B3 BC      ST    @SCANKEY,@PAD3
     64B4 5F  
     64B5 75  
0493 64B6 A6      SUB   'X',@PAD3       ; Now pad is 0,1,2 for X,Y,Z
     64B7 5F  
     64B8 58  
0494 64B9 E2      SLL   1,@PAD3         ; Multiply by 2
     64BA 5F  
     64BB 01  
0495 64BC 86      CLR   @PAD2           ; clear high byte
     64BD 5E  
0496 64BE A3      DADD  XREG,@PAD2       ; Add address of XREG, now PAD2:PAD3 is a pointer to value
     64BF 5E  
     64C0 83  
     64C1 2C
0497          
0498 64C2 BC      ST    @0(@PAD2),@PAD0  ; Hi byte of reg
     64C3 5C  
     64C4 CF  
     64C5 7D
     64C6 00
     64C7 5E
0001 64C8 0F      XML >F0
     64C9 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0500 64CA A3      DADD  2,@VRAMP
     64CB 40  
     64CC 00  
     64CD 02
0501 64CE BC      ST    @1(@PAD2),@PAD0  ; Lo byte of reg
     64CF 5C  
     64D0 CF  
     64D1 7D
     64D2 01
     64D3 5E
0001 64D4 0F      XML >F0
     64D5 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0503 64D6 A7      DSUB  2,@VRAMP          ; Point to beginning of hex digits
     64D7 40  
     64D8 00  
     64D9 02
0504 64DA BE      ST    4,@PAD4           ; 4 digits to edit, VRAMP points to them
     64DB 60  
     64DC 04  
0505 64DD 06      CALL  EDITHEX           ; go and edit them
     64DE 65  
     64DF FE
0506          ; YREG is used as dump addres. If it changed, refresh screen.
0507 64E0 D5      DCEQ  @YREG,@DUMPA
     64E1 62  
     64E2 2E  
0508 64E3 44      BR    MAKEDUMP
     64E4 0A  
0509 64E5 05      B     G@KW1
     64E6 64  
     64E7 13
0510          
0511          
0512          
0513          ASKCONFIRM:
0514          ; Ask for confirmation. Clear a few rows to clarify
0515 64E8 BE      ST   ' ',V@VEROFS
     64E9 A0  
     64EA A0
     64EB 20  
0516 64EC 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64ED 02  
     64EE 5F
     64EF A0  
     64F0 A1
     64F1 A0  
     64F2 A0
0517 64F3 08      FMT
0518 64F4 FF      COL LALIGN
     64F5 02  
0519 64F6 FE      ROW LAYOUTVER
     64F7 05  
0520 64F8 15      HTEX '!!PRESS 1 TO CONFIRM!!'
     64F9 21  
     64FA 21  
     64FB 50  
     64FC 52  
     64FD 45  
     64FE 53  
     64FF 53  
     6500 20  
     6501 31  
     6502 20  
     6503 54  
     6504 4F  
     6505 20  
     6506 43  
     6507 4F  
     6508 4E  
     6509 46  
     650A 49  
     650B 52  
     650C 4D  
     650D 21  
     650E 21  
0521 650F FB      FEND
0522          WAIT0:
0523 6510 03      SCAN
0524 6511 45      BR    WAIT0
     6512 10  
0525 6513 00      RTN
0526          
0527          DKEY1:
0528 6514 A7      DSUB  64,@YREG
     6515 2E  
     6516 00  
     6517 40
0529 6518 05      B     MAKEDUMP
     6519 64  
     651A 0A
0530          DKEY2:
0531 651B A3      DADD  64,@YREG
     651C 2E  
     651D 00  
     651E 40
0532 651F 05      B     MAKEDUMP
     6520 64  
     6521 0A
0533          DKEY3:
0534 6522 BE      ST   ' ',V@VEROFS
     6523 A0  
     6524 A0
     6525 20  
0535 6526 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     6527 02  
     6528 5F
     6529 A0  
     652A A1
     652B A0  
     652C A0
0536 652D 05      B     SCREEN1
     652E 60  
     652F A9
0537          DKEY0:      ; Burn to Flash
0538 6530 06      CALL  G@ASKCONFIRM
     6531 64  
     6532 E8
0539 6533 D6      CEQ   '1',@SCANKEY       is the key one?
     6534 75  
     6535 31  
0540 6536 43      BR    G@DUMPSCREEN       no: DUMPSCREEN
     6537 23  
0541          ; Yes, continue to Flash the MCU
0542 6538 04      BACK  >F3              screen colors: white on some other color
     6539 F3  
0543 653A BE      ST    'F',V@VALIDIND    ; Command valid indicator
     653B A0  
     653C 83
     653D 46  
0544 653E BE      ST    6,@GCMDBYTE
     653F 40  
     6540 06  
0545 6541 BF      DST   >1234,@GCMDBYTE+2
     6542 42  
     6543 12  
     6544 34
0546 6545 87      DCLR  @GCMDBYTE+4
     6546 44  
0547 6547 87      DCLR  @GCMDBYTE+6
     6548 46  
0548 6549 06      CALL  ISSUECMD
     654A 62  
     654B D7
0549          ; We probably do not return from this call... GROMMY might be in a funny state
0550 654C 05      B     G@MAKEDUMP
     654D 64  
     654E 0A
0551          
0552          DKEY4:      ; Command to fill GRAM with >FF, all 24K
0553 654F BF      DST   >FFFF,@PAD2   ; Fill value, 2 bytes
     6550 5E  
     6551 FF  
     6552 FF
0554 6553 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6554 A0  
     6555 83
     6556 2A  
0555 6557 87      DCLR  @PAD4
     6558 60  
0556 6559 2D  !   MOVE  2,@PAD2,G@0(@PAD4)    ; store to grom
     655A 00  
     655B 02
     655C 00  
     655D 00
     655E 60
     655F 5E  
0557 6560 95      DINCT @PAD4
     6561 60  
0558 6562 D7      DCEQ  >6000,@PAD4
     6563 60  
     6564 60  
     6565 00
0559 6566 45      BR    -!
     6567 59  
0560 6568 06      CALL  CLEARVALID
     6569 65  
     656A ED
0561 656B 05      B     MAKEDUMP
     656C 64  
     656D 0A
0562          
0563          DKEY5:
0564 656E BE      ST    '*',V@VALIDIND    ; Command valid indicator
     656F A0  
     6570 83
     6571 2A  
0565 6572 21      MOVE >2000,G@>8000,G@>0000
     6573 20  
     6574 00
     6575 00  
     6576 00
     6577 80  
     6578 00
0566 6579 21      MOVE >2000,G@>A000,G@>2000
     657A 20  
     657B 00
     657C 20  
     657D 00
     657E A0  
     657F 00
0567 6580 21      MOVE >2000,G@>C000,G@>4000
     6581 20  
     6582 00
     6583 40  
     6584 00
     6585 C0  
     6586 00
0568 6587 06      CALL  CLEARVALID
     6588 65  
     6589 ED
0569 658A 05      B     MAKEDUMP
     658B 64  
     658C 0A
0570          
0571          DKEY6:      ; ARM execute at address X
0572 658D BD      DST   @XREG,@PAD0
     658E 5C  
     658F 2C  
0573 6590 B6      OR    >0100,@PAD0
     6591 5C  
     6592 00  
0574 6593 BD      DST   @PAD0,@GCMDBYTE+2   ; thumb bit high
     6594 42  
     6595 5C  
0575          DKEY6ASK:
0576 6596 06      CALL  G@ASKCONFIRM
     6597 64  
     6598 E8
0577 6599 D6      CEQ   '1',@SCANKEY       is the key one?
     659A 75  
     659B 31  
0578 659C 43      BR    G@DUMPSCREEN       no: DUMPSCREEN
     659D 23  
0579 659E BE      ST    'F',V@VALIDIND    ; Command valid indicator
     659F A0  
     65A0 83
     65A1 46  
0580 65A2 BE      ST    7,@GCMDBYTE
     65A3 40  
     65A4 07  
0581 65A5 87      DCLR  @GCMDBYTE+4
     65A6 44  
0582 65A7 87      DCLR  @GCMDBYTE+6
     65A8 46  
0583 65A9 06      CALL  ISSUECMD
     65AA 62  
     65AB D7
0584          ; We probably do not return from this call... GROMMY might be in a funny state
0585 65AC 44      BR    MAKEDUMP
     65AD 0A  
0586          
0587          DKEY7:
0588 65AE BF      DST   >0140,@GCMDBYTE+2  ; ARM has different byte order
     65AF 42  
     65B0 01  
     65B1 40
0589 65B2 45      BR    DKEY6ASK
     65B3 96  
0590          
0591          DKEY8:      ; Undocumented, burn filesafe bank from bottom of GRAM
0592 65B4 06      CALL  G@ASKCONFIRM
     65B5 64  
     65B6 E8
0593 65B7 D6      CEQ   '1',@SCANKEY       is the key one?
     65B8 75  
     65B9 31  
0594 65BA 43      BR    G@DUMPSCREEN       no: DUMPSCREEN
     65BB 23  
0595 65BC BE      ST    '*',V@VALIDIND    ; Command valid indicator
     65BD A0  
     65BE 83
     65BF 2A  
0596 65C0 BE      ST    8,@GCMDBYTE
     65C1 40  
     65C2 08  
0597 65C3 87      DCLR  @GCMDBYTE+2
     65C4 42  
0598 65C5 87      DCLR  @GCMDBYTE+4
     65C6 44  
0599 65C7 87      DCLR  @GCMDBYTE+6
     65C8 46  
0600 65C9 06      CALL  ISSUECMD
     65CA 62  
     65CB D7
0601 65CC 44      BR    MAKEDUMP
     65CD 0A  
0602          
0603          DKEY9:      ; Undocumented, burn any 2K page
0604 65CE 06      CALL  G@ASKCONFIRM
     65CF 64  
     65D0 E8
0605 65D1 D6      CEQ   '1',@SCANKEY       is the key one?
     65D2 75  
     65D3 31  
0606 65D4 43      BR    G@DUMPSCREEN       no: DUMPSCREEN
     65D5 23  
0607 65D6 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     65D7 A0  
     65D8 83
     65D9 2A  
0608 65DA BE      ST    12,@GCMDBYTE
     65DB 40  
     65DC 0C  
0609 65DD BC      ST    @XREG+1,@GCMDP2   ; source page number
     65DE 42  
     65DF 2D  
0610 65E0 BC      ST    @YREG+1,@GCMDP3   ; dest page number
     65E1 43  
     65E2 2F  
0611 65E3 BC      ST    @ZREG+1,@GCMDP4   ; number of pages
     65E4 44  
     65E5 31  
0612 65E6 87      DCLR  @GCMDBYTE+6
     65E7 46  
0613 65E8 06      CALL  ISSUECMD
     65E9 62  
     65EA D7
0614 65EB 44      BR    MAKEDUMP
     65EC 0A  
0615          
0616          
0617          *----------------------------------------
0618          CLEARVALID:
0619 65ED BE      ST    ' ',V@VALIDIND
     65EE A0  
     65EF 83
     65F0 20  
0620 65F1 BE      ST    ' ',V@VALIDIND+1
     65F2 A0  
     65F3 84
     65F4 20  
0621 65F5 BE      ST    ' ',V@VALIDIND+2
     65F6 A0  
     65F7 85
     65F8 20  
0622 65F9 BE      ST    ' ',V@VALIDIND+3
     65FA A0  
     65FB 86
     65FC 20  
0623 65FD 00      RTN
0624          
0625          *----------------------------------------
0626          * Edit HEX
0627          * Number already displayed with E0..EF or F0..FF.
0628          * Parameters:
0629          *   VRAMP points to the screen area.
0630          *   PAD2:PAD3 points to the value.
0631          *   PAD4 number of digits to edit. Must be even.
0632          *----------------------------------------
0633          EDITHEX:
0634 65FE 86      CLR  @INDEX   ; current digit index
     65FF 61  
0635          EWAIT:
0636 6600 03      SCAN
0637 6601 66      BS   EGOTKEY
     6602 1F  
0638          ; No key. Flash the cursor pointed at VRAMP by copying bit 4 of frame counter
0639          ; to the character code.
0640 6603 BC      ST   @VDPTIMER,@PAD0
     6604 5C  
     6605 79  
0641 6606 B2      AND  >10,@PAD0
     6607 5C  
     6608 10  
0642 6609 BC      ST   V@0(@VRAMP),@PAD1
     660A 5D  
     660B E0  
     660C 00
     660D 40
0643 660E B2      AND  >EF,@PAD1
     660F 5D  
     6610 EF  
0644 6611 B4      OR   @PAD1,@PAD0
     6612 5C  
     6613 5D  
0645 6614 BC      ST  @PAD0,V@0(@VRAMP)
     6615 E0  
     6616 00
     6617 40
     6618 5C  
0646 6619 90      INC   V@PATADR
     661A AE  
     661B F8
0647 661C 05      B    EWAIT
     661D 66  
     661E 00
0648          
0649          EGOTKEY:    ; We received a key. If it is '0' - '9' or 'A'-'F' it is a hex digit, thus edit.
0650 661F CE      CGT   '0'-1,@SCANKEY       ; greater than >= 0
     6620 75  
     6621 2F  
0651 6622 46      BR    ENODIGIT             ; No -> ENODIGIT
     6623 5E  
0652 6624 CE      CGT   '9',@SCANKEY         ; Key greater than '9'?
     6625 75  
     6626 39  
0653 6627 66      BS    CHECKAF
     6628 4E  
0654 6629 A6      SUB   '0',@SCANKEY         ; Here we have '0'-'9' make it 0-9
     662A 75  
     662B 30  
0655          GOTDIGIT:
0656 662C A2      ADD   HEXBASECH,@SCANKEY
     662D 75  
     662E E0  
0657 662F BC      ST    @SCANKEY,V@0(@VRAMP)  ; Store digit into VRAM.
     6630 E0  
     6631 00
     6632 40
     6633 75  
0658 6634 91      DINC  @VRAMP
     6635 40  
0659 6636 90      INC   @INDEX
     6637 61  
0660 6638 D4      CEQ   @INDEX,@PAD4          ; Index=number of digits?
     6639 60  
     663A 61  
0661 663B 46      BR    EWAIT                 ; No: get back to waiting next key
     663C 00  
0662 663D 06      CALL  BACK2BEGIN
     663E 66  
     663F 43
0663 6640 05      B     EWAIT                 ; Wait for next keypress
     6641 66  
     6642 00
0664          
0665          BACK2BEGIN:
0666 6643 B2      AND   >EF,V@0(VRAMP)        ; Yes: make sure no cursor show here.
     6644 E0  
     6645 00
     6646 40
     6647 EF  
0667 6648 A4      SUB   @INDEX,@VRAMP+1       ; Yes: Reset VRAMP back to beginning of number (BUGBUG: carry not handled!)
     6649 41  
     664A 61  
0668 664B 86      CLR   @INDEX                ; Reset index
     664C 61  
0669 664D 00      RTN
0670          
0671          CHECKAF:                        ; Check if we have 'A'..'F'
0672 664E CE      CGT   'A'-1,@SCANKEY        ; >= 'A' ?
     664F 75  
     6650 40  
0673 6651 46      BR    ENODIGIT              ; no: -> ENODIGIT
     6652 5E  
0674 6653 CE      CGT   'F',@SCANKEY          ; >= 'F' ?
     6654 75  
     6655 46  
0675 6656 66      BS    ENODIGIT              ; Yes: -> ENODIGIT
     6657 5E  
0676 6658 A6      SUB   'A'-10,@SCANKEY       ; Make 'A' into 10
     6659 75  
     665A 37  
0677 665B 05      B     GOTDIGIT              ; Display etc.
     665C 66  
     665D 2C
0678          
0679          ENODIGIT:                       ; Here we do not have digit 0-9, A-F
0680 665E D6      CEQ    13,@SCANKEY          ; Is it enter?
     665F 75  
     6660 0D  
0681 6661 46      BR     EWAIT                ; No: get next key
     6662 00  
0682          ; Here we have the digits in VRAM. Decode the number.
0683 6663 06      CALL   BACK2BEGIN           ; Reset VRAMP to beginning of number
     6664 66  
     6665 43
0684 6666 BC  !   ST     V@0(@VRAMP),@PAD0    ; Get first digit
     6667 5C  
     6668 E0  
     6669 00
     666A 40
0685 666B B2      AND    >0F,@PAD0            ; Low 4 bits are the hex digit
     666C 5C  
     666D 0F  
0686 666E E2      SLL    4,@PAD0
     666F 5C  
     6670 04  
0687 6671 BC      ST     V@1(VRAMP),@PAD1     ; Get second digit
     6672 5D  
     6673 E0  
     6674 01
     6675 40
0688 6676 B2      AND    >0F,@PAD1
     6677 5D  
     6678 0F  
0689 6679 B4      OR     @PAD1,@PAD0          ; Now PAD0 has the byte.
     667A 5C  
     667B 5D  
0690 667C BC      ST     @PAD0,@0(@PAD2)      ; Store byte
     667D CF  
     667E 7D
     667F 00
     6680 5E
     6681 5C  
0691 6682 94      INCT   @INDEX
     6683 61  
0692 6684 91      DINC   @PAD2
     6685 5E  
0693 6686 95      DINCT  @VRAMP
     6687 40  
0694 6688 D4      CEQ    @INDEX,@PAD4         ; Are we at the end, INDEX==COUNT?
     6689 60  
     668A 61  
0695 668B 46      BR     -!                   ; No, continue
     668C 66  
0696 668D A4      SUB    @INDEX,@PAD3         ; Reset PAD2:PAD3 pointer (BUGBUG no carry)
     668E 5F  
     668F 61  
0697 6690 06      CALL   BACK2BEGIN           ; Reset VRAMP
     6691 66  
     6692 43
0698 6693 00      RTN                         ; Done
0699          
0700          
0701          *----------------------------------------
0702          * Display in HEX the byte in PAD0
0703          *----------------------------------------
0704          HEXOUT:
0705 6694 0F    XML >F0       ; Jump via >8300
     6695 F0  
0706 6696 00    RTN
0707          
0708          HEXOUT1:
0709 6697 BC      ST   @PAD0,@PAD4
     6698 60  
     6699 5C  
0710 669A E6      SRL   >04,@PAD4       isolate first nibble
     669B 60  
     669C 04  
0711 669D CE      CGT   >09,@PAD4       greater than 9?
     669E 60  
     669F 09  
0712 66A0 66      BS    HEX1            yes
     66A1 A7  
0713 66A2 A2      ADD   >30,@PAD4       no: make it char 0-9
     66A3 60  
     66A4 30  
0714 66A5 46      BR    HEX2
     66A6 AA  
0715 66A7 A2  HEX1: ADD   >37,@PAD4      yes: make it char A-F
     66A8 60  
     66A9 37  
0716          HEX2:
0717          ; Output first hex digit (most significant digit)
0718 66AA BC      ST    @PAD4,V@0(@VRAMP)
     66AB E0  
     66AC 00
     66AD 40
     66AE 60  
0719          ; Work on 2nd digit
0720 66AF BC      ST    @PAD0,@PAD4     copy number
     66B0 60  
     66B1 5C  
0721 66B2 B2      AND   >0F,@PAD4       isolate second nibble
     66B3 60  
     66B4 0F  
0722 66B5 CE      CGT   >09,@PAD4       greater than 9?
     66B6 60  
     66B7 09  
0723 66B8 66      BS    HEX3          yes
     66B9 BF  
0724 66BA A2      ADD   >30,@PAD4       no: make it char 0-9
     66BB 60  
     66BC 30  
0725 66BD 46      BR    HEX4
     66BE C2  
0726 66BF A2  HEX3  ADD   >37,@PAD4       yes: make it char A-F
     66C0 60  
     66C1 37  
0727          HEX4:
0728          ; Output 2nd hex digit (least significant digit)
0729 66C2 BC      ST    @PAD4,V@1(@VRAMP)
     66C3 E0  
     66C4 01
     66C5 40
     66C6 60  
0730 66C7 00      RTN
0731          
0732          * Use the new hex characters which do not have a gap between 9 and A
0733          HEXOUT2:
0734 66C8 BC      ST   @PAD0,@PAD4
     66C9 60  
     66CA 5C  
0735 66CB BC      ST   @PAD0,@PAD5
     66CC 61  
     66CD 5C  
0736 66CE E6      SRL  >04,@PAD4       isolate first nibble
     66CF 60  
     66D0 04  
0737 66D1 B2      AND  >0F,@PAD5
     66D2 61  
     66D3 0F  
0738          TWINHEXBC EQU   (HEXBASECH * 256) + HEXBASECH
0739 66D4 A3      DADD TWINHEXBC,@PAD4
     66D5 60  
     66D6 E0  
     66D7 E0
0740 66D8 BD      DST  @PAD4,V@0(VRAMP)
     66D9 E0  
     66DA 00
     66DB 40
     66DC 60  
0741 66DD 01      RTNC
0742          
0743          *----------------------------------------
0744          * Screen used to select paging features
0745          *----------------------------------------
0746          PAGINGSCREEN:
0747 66DE BE      ST   ' ',V@PAGOFS
     66DF A0  
     66E0 E0
     66E1 20  
0748 66E2 35      MOVE 768-PAGOFS-1-32,V@PAGOFS,V@PAGOFS+1   ; Clear screen bottom
     66E3 01  
     66E4 FF
     66E5 A0  
     66E6 E1
     66E7 A0  
     66E8 E0
0749 66E9 08      FMT
0750 66EA FF      COL LALIGN
     66EB 02  
0751 66EC FE      ROW LAYOUTVER
     66ED 05  
0752 66EE 1D      HTEX 'VER 0.0.00 BANK 0 SHADOW 0    '
     66EF 56  
     66F0 45  
     66F1 52  
     66F2 20  
     66F3 30  
     66F4 2E  
     66F5 30  
     66F6 2E  
     66F7 30  
     66F8 30  
     66F9 20  
     66FA 42  
     66FB 41  
     66FC 4E  
     66FD 4B  
     66FE 20  
     66FF 30  
     6700 20  
     6701 53  
     6702 48  
     6703 41  
     6704 44  
     6705 4F  
     6706 57  
     6707 20  
     6708 30  
     6709 20  
     670A 20  
     670B 20  
     670C 20  
0753 670D FF      COL LALIGN
     670E 02  
0754 670F 1D      HTEX '           MODE 0 PG 01 02 03 '
     6710 20  
     6711 20  
     6712 20  
     6713 20  
     6714 20  
     6715 20  
     6716 20  
     6717 20  
     6718 20  
     6719 20  
     671A 20  
     671B 4D  
     671C 4F  
     671D 44  
     671E 45  
     671F 20  
     6720 30  
     6721 20  
     6722 50  
     6723 47  
     6724 20  
     6725 30  
     6726 31  
     6727 20  
     6728 30  
     6729 32  
     672A 20  
     672B 30  
     672C 33  
     672D 20  
0755 672E FF      COL LALIGN
     672F 02  
0756 6730 FE      ROW LAYOUTBAN
     6731 08  
0757 6732 12      HTEX 'SELECT BANKING MODE'
     6733 53  
     6734 45  
     6735 4C  
     6736 45  
     6737 43  
     6738 54  
     6739 20  
     673A 42  
     673B 41  
     673C 4E  
     673D 4B  
     673E 49  
     673F 4E  
     6740 47  
     6741 20  
     6742 4D  
     6743 4F  
     6744 44  
     6745 45  
0758 6746 A0      ROW+ >01
0759 6747 FF      COL LALIGN
     6748 02  
0760 6749 11      HTEX '0 STANDARD BANKING'
     674A 30  
     674B 20  
     674C 53  
     674D 54  
     674E 41  
     674F 4E  
     6750 44  
     6751 41  
     6752 52  
     6753 44  
     6754 20  
     6755 42  
     6756 41  
     6757 4E  
     6758 4B  
     6759 49  
     675A 4E  
     675B 47  
0761 675C A0      ROW+ >01
0762 675D FF      COL LALIGN
     675E 02  
0763 675F 10      HTEX '1 GROMMY2 BANKING'
     6760 31  
     6761 20  
     6762 47  
     6763 52  
     6764 4F  
     6765 4D  
     6766 4D  
     6767 59  
     6768 32  
     6769 20  
     676A 42  
     676B 41  
     676C 4E  
     676D 4B  
     676E 49  
     676F 4E  
     6770 47  
0764 6771 A0      ROW+ >01
0765 6772 FF      COL LALIGN
     6773 02  
0766 6774 12      HTEX '2 GROMMY2 8K PAGING'
     6775 32  
     6776 20  
     6777 47  
     6778 52  
     6779 4F  
     677A 4D  
     677B 4D  
     677C 59  
     677D 32  
     677E 20  
     677F 38  
     6780 4B  
     6781 20  
     6782 50  
     6783 41  
     6784 47  
     6785 49  
     6786 4E  
     6787 47  
0767 6788 A0      ROW+ >01
0768 6789 FF      COL LALIGN
     678A 02  
0769 678B 09      HTEX '3 FAILSAFE'
     678C 33  
     678D 20  
     678E 46  
     678F 41  
     6790 49  
     6791 4C  
     6792 53  
     6793 41  
     6794 46  
     6795 45  
0770 6796 A1      ROW+ >02
0771 6797 FF      COL LALIGN
     6798 02  
0772 6799 0D      HTEX '4 EDIT PAGE #0'
     679A 34  
     679B 20  
     679C 45  
     679D 44  
     679E 49  
     679F 54  
     67A0 20  
     67A1 50  
     67A2 41  
     67A3 47  
     67A4 45  
     67A5 20  
     67A6 23  
     67A7 30  
0773 67A8 A0      ROW+ >01
0774 67A9 FF      COL LALIGN
     67AA 02  
0775 67AB 0D      HTEX '5 EDIT PAGE #1'
     67AC 35  
     67AD 20  
     67AE 45  
     67AF 44  
     67B0 49  
     67B1 54  
     67B2 20  
     67B3 50  
     67B4 41  
     67B5 47  
     67B6 45  
     67B7 20  
     67B8 23  
     67B9 31  
0776 67BA A0      ROW+ >01
0777 67BB FF      COL LALIGN
     67BC 02  
0778 67BD 0D      HTEX '6 EDIT PAGE #2'
     67BE 36  
     67BF 20  
     67C0 45  
     67C1 44  
     67C2 49  
     67C3 54  
     67C4 20  
     67C5 50  
     67C6 41  
     67C7 47  
     67C8 45  
     67C9 20  
     67CA 23  
     67CB 32  
0779          
0780 67CC FB      FEND
0781          PAGINGLOOP:
0782 67CD 06      CALL G@SHOW_VERSION
     67CE 68  
     67CF 5A
0783          
0784          PKEYWAIT:
0785 67D0 03      SCAN
0786 67D1 67      BS    PGOTKEY
     67D2 D9  
0787 67D3 90      INC   V@PATADR
     67D4 AE  
     67D5 F8
0788 67D6 05      B     PKEYWAIT
     67D7 67  
     67D8 D0
0789          PGOTKEY:
0790 67D9 D6      CEQ   'M',@SCANKEY
     67DA 75  
     67DB 4D  
0791 67DC 60      BS    SCREEN1           ; Back to main screen
     67DD A9  
0792 67DE D6      CEQ   'U',@SCANKEY
     67DF 75  
     67E0 55  
0793 67E1 63      BS    DUMPSCREEN
     67E2 23  
0794          
0795 67E3 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     67E4 A0  
     67E5 82
     67E6 75  
0796 67E7 CE      CGT   '0'-1,@SCANKEY        ; greater than >= '0' ?
     67E8 75  
     67E9 2F  
0797 67EA 47      BR    PKEYWAIT              ; no: get another
     67EB D0  
0798 67EC CE      CGT   '6',@SCANKEY          ; Key greater than '6'?
     67ED 75  
     67EE 36  
0799 67EF 67      BS    PKEYWAIT              ; Yes: get another key
     67F0 D0  
0800 67F1 A6      SUB   '0',@SCANKEY
     67F2 75  
     67F3 30  
0801 67F4 8A      CASE  @SCANKEY
     67F5 75  
0802 67F6 48      BR    PKEY0
     67F7 04  
0803 67F8 48      BR    PKEY1
     67F9 04  
0804 67FA 48      BR    PKEY2
     67FB 04  
0805 67FC 48      BR    PKEY3
     67FD 04  
0806 67FE 48      BR    PKEY4
     67FF 1A  
0807 6800 48      BR    PKEY5
     6801 44  
0808 6802 48      BR    PKEY6
     6803 4F  
0809          
0810          PKEY0       ; Switch to banking mode
0811          PKEY1
0812          PKEY2
0813          PKEY3
0814 6804 BE      ST    9,@GCMDBYTE         ; Command 9 set banking mode
     6805 40  
     6806 09  
0815 6807 BC      ST    @SCANKEY,@GCMDP2    ; Set parameter 2
     6808 42  
     6809 75  
0816 680A 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     680B 00  
     680C 08
     680D 48  
     680E 69  
     680F 0C
0817 6810 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6811 A0  
     6812 83
     6813 2A  
0818 6814 06      CALL  GSENDCMD          ; Send command to HW
     6815 68  
     6816 F7
0819 6817 05      B     PAGINGLOOP
     6818 67  
     6819 CD
0820          
0821          PKEY4   ; Edit digits for PAGE0
0822 681A BF      DST   VEROFS+>37,@VRAMP ; Digits displayed here
     681B 40  
     681C 00  
     681D D7
0823 681E BF      DST   PAGE0,@PAD2       ; Value to edit is pointed to by PAD2:PAD3
     681F 5E  
     6820 83  
     6821 33
0824          PEDITBK:
0825 6822 BE      ST    2,@PAD4           ; 2 digits to edit, VRAMP points to them
     6823 60  
     6824 02  
0826 6825 06      CALL  EDITHEX           ; go and edit them
     6826 65  
     6827 FE
0827 6828 BE      ST    11,@GCMDBYTE      ; Setup all three pages
     6829 40  
     682A 0B  
0828 682B BC      ST    @PAGE0,@GCMDP2
     682C 42  
     682D 33  
0829 682E BC      ST    @PAGE1,@GCMDP3
     682F 43  
     6830 34  
0830 6831 BC      ST    @PAGE2,@GCMDP4
     6832 44  
     6833 35  
0831 6834 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     6835 00  
     6836 08
     6837 48  
     6838 69  
     6839 0C
0832 683A BE      ST    '*',V@VALIDIND    ; Command valid indicator
     683B A0  
     683C 83
     683D 2A  
0833 683E 06      CALL  GSENDCMD          ; Send command to HW
     683F 68  
     6840 F7
0834 6841 05      B     PKEYWAIT
     6842 67  
     6843 D0
0835          PKEY5:
0836 6844 BF      DST   VEROFS+>3A,@VRAMP ; Digits displayed here
     6845 40  
     6846 00  
     6847 DA
0837 6848 BF      DST   PAGE1,@PAD2       ; Value to edit is pointed to by PAD2:PAD3
     6849 5E  
     684A 83  
     684B 34
0838 684C 05      B     PEDITBK
     684D 68  
     684E 22
0839          
0840          PKEY6:
0841 684F BF      DST   VEROFS+>3D,@VRAMP ; Digits displayed here
     6850 40  
     6851 00  
     6852 DD
0842 6853 BF      DST   PAGE2,@PAD2       ; Value to edit is pointed to by PAD2:PAD3
     6854 5E  
     6855 83  
     6856 35
0843 6857 05      B     PEDITBK
     6858 68  
     6859 22
0844          
0845          
0846          
0847          
0848          
0849          *----------------------------------------
0850          * Read grommy2 version, update on screen.
0851          * Also read and set bank & shadow values.
0852          *----------------------------------------
0853          SHOW_VERSION
0854 685A 06      CALL G@GINITCMD
     685B 68  
     685C F0
0855 685D 06      CALL G@GSENDCMD
     685E 68  
     685F F7
0856          * Check result of command - did we get OK?
0857 6860 31      MOVE 2,G@HWIF,@PAD0
     6861 00  
     6862 02
     6863 5C  
     6864 5F  
     6865 F0
0858 6866 D7      DCEQ >4F4B,@PAD0        ; did we get OK?
     6867 5C  
     6868 4F  
     6869 4B
0859 686A 68      BS   VER_OK             ; Yes: go to VER_OK
     686B 77  
0860          ** No grommy2 detected. Put in dummy data.
0861 686C 87      DCLR @PAD2              ; Major and minor zero
     686D 5E  
0862 686E BE      ST   99,@PAD4           ; Build 99
     686F 60  
     6870 63  
0863 6871 86      CLR  @SHADOW
     6872 51  
0864 6873 86      CLR  @BANK
     6874 50  
0865 6875 48      BR   VER1
     6876 A0  
0866          VER_OK:     ; grommy responded, read data
0867          * Copy values from GROM IF to pad
0868 6877 31      MOVE 3,G@HWIF+8,@PAD2
     6878 00  
     6879 03
     687A 5E  
     687B 5F  
     687C F8
0869          * Get active bank from grommy2
0870 687D 31      MOVE 1,G@HWIF+3,@BANK
     687E 00  
     687F 01
     6880 50  
     6881 5F  
     6882 F3
0871 6883 BC      ST   @BANK,@BMODE       ; Copy to banking mode
     6884 32  
     6885 50  
0872 6886 E6      SRL  4,@BMODE           ; High nibble to banking mode
     6887 32  
     6888 04  
0873 6889 B2      AND  >0F,@BANK          ; Low nibble is bank number
     688A 50  
     688B 0F  
0874 688C D6      CEQ  8,@BANK            ; Is GRAM bank 8 selected?
     688D 50  
     688E 08  
0875 688F 48      BR   NOGRAM1            ; No, we're good
     6890 94  
0876 6891 BE      ST   4,@BANK            ; yes, convert to 3 here
     6892 50  
     6893 04  
0877          NOGRAM1:
0878          * Get RAM shadow from grommy2
0879 6894 31      MOVE 1,G@HWIF+4,@SHADOW
     6895 00  
     6896 01
     6897 51  
     6898 5F  
     6899 F4
0880          * Get page numbers from grommy2
0881 689A 31      MOVE 3,G@HWIF+5,@PAGE0
     689B 00  
     689C 03
     689D 33  
     689E 5F  
     689F F5
0882          VER1:
0883          * Show major version in p2
0884 68A0 BE      ST  '0',@PAD0
     68A1 5C  
     68A2 30  
0885 68A3 A0      ADD @PAD2,@PAD0
     68A4 5C  
     68A5 5E  
0886 68A6 BC      ST  @PAD0,V@VEROFS+>6        Write to VRAM
     68A7 A0  
     68A8 A6
     68A9 5C  
0887          * Show minor version in p3
0888 68AA BE      ST  '0',@PAD0
     68AB 5C  
     68AC 30  
0889 68AD A0      ADD @PAD3,@PAD0
     68AE 5C  
     68AF 5F  
0890 68B0 BC      ST  @PAD0,V@VEROFS+>8        Write to VRAM
     68B1 A0  
     68B2 A8
     68B3 5C  
0891          * Show build version in p4. The build is two digits from 0 to 99
0892 68B4 86      CLR  @PAD0              Zero fill as the value to divide is 16 bits§
     68B5 5C  
0893 68B6 BC      ST   @PAD4,@PAD1
     68B7 5D  
     68B8 60  
0894 68B9 AE      DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
     68BA 5C  
     68BB 0A  
0895 68BC A2      ADD  '0',@PAD0
     68BD 5C  
     68BE 30  
0896 68BF BC      ST   @PAD0,V@VEROFS+>A      Write to VRAM
     68C0 A0  
     68C1 AA
     68C2 5C  
0897 68C3 A2      ADD  '0',@PAD1          Remainder
     68C4 5D  
     68C5 30  
0898 68C6 BC      ST   @PAD1,V@VEROFS+>B      Write to VRAM
     68C7 A0  
     68C8 AB
     68C9 5D  
0899          * Show Banking mode
0900 68CA BE      ST   '0',@PAD0
     68CB 5C  
     68CC 30  
0901 68CD A0      ADD  @BMODE,@PAD0
     68CE 5C  
     68CF 32  
0902 68D0 BC      ST   @pAD0,V@VEROFS+>32 ; Show banking mode
     68D1 A0  
     68D2 D2
     68D3 5C  
0903          * Show page numbers
0904 68D4 BE      ST    ' ',V@VEROFS+>37-1    ; setup VRAM address in case assembly used
     68D5 A0  
     68D6 D6
     68D7 20  
0905 68D8 BC      ST    @PAGE0,@PAD0      ; Hi byte off address
     68D9 5C  
     68DA 33  
0001 68DB 0F      XML >F0
     68DC F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0907 68DD BE      ST    ' ',V@VEROFS+>3A-1    ; setup VRAM address in case assembly used
     68DE A0  
     68DF D9
     68E0 20  
0908 68E1 BC      ST    @PAGE1,@PAD0      ; Hi byte off address
     68E2 5C  
     68E3 34  
0001 68E4 0F      XML >F0
     68E5 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0910 68E6 BE      ST    ' ',V@VEROFS+>3D-1    ; setup VRAM address in case assembly used
     68E7 A0  
     68E8 DC
     68E9 20  
0911 68EA BC      ST    @PAGE2,@PAD0      ; Hi byte off address
     68EB 5C  
     68EC 35  
0001 68ED 0F      XML >F0
     68EE F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0913 68EF 00      RTN
0914          
0915          
0916          *----------------------------------------
0917          * Init command buffer in pad
0918          *----------------------------------------
0919          GINITCMD
0920 68F0 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
     68F1 00  
     68F2 10
     68F3 40  
     68F4 69  
     68F5 04
0921 68F6 00         RTN
0922          
0923          *----------------------------------------
0924          * Send command to grommy2
0925          *----------------------------------------
0926          GSENDCMD
0927 68F7 BC         ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
     68F8 41  
     68F9 40  
0928 68FA BA         XOR   >FF,@GCMDBYTE+1
     68FB 41  
     68FC FF  
0929 68FD 25         MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
     68FE 00  
     68FF 10
     6900 5F  
     6901 F0
     6902 40  
0930 6903 00         RTN
0931          
0932          
0933          GROMMY_DAT
0934 6904 00         DATA   >00FF,>003F,>0000,>0000
     6905 FF
     6906 00  
     6907 3F
     6908 00  
     6909 00
     690A 00  
     690B 00
0935 690C 45         TEXT 'EPGROMMY'
     690D 50  
     690E 47  
     690F 52  
     6910 4F  
     6911 4D  
     6912 4D  
     6913 59  
0936          
0937          
0938          DENSE_FONT ; Define character cells wihtin 4x8 cell
0939          ; Numnbers 0 and 1
0940 6914 22          BYTE >22
0941 6915 56          BYTE >56
0942 6916 52          BYTE >52
0943 6917 52          BYTE >52
0944 6918 52          BYTE >52
0945 6919 52          BYTE >52
0946 691A 27          BYTE >27
0947 691B 00          BYTE >00
0948          ; Define a cell with 2 and 3
0949 691C 26          BYTE >26
0950 691D 51          BYTE >51
0951 691E 11          BYTE >11
0952 691F 26          BYTE >26
0953 6920 41          BYTE >41
0954 6921 41          BYTE >41
0955 6922 76          BYTE >76
0956 6923 00          BYTE >00
0957          ; Define a cell with 4 and 5
0958 6924 17          BYTE >17
0959 6925 34          BYTE >34
0960 6926 54          BYTE >54
0961 6927 76          BYTE >76
0962 6928 11          BYTE >11
0963 6929 11          BYTE >11
0964 692A 16          BYTE >16
0965 692B 00          BYTE >00
0966          ; Define a cell with 6 and 7
0967 692C 37          BYTE >37
0968 692D 41          BYTE >41
0969 692E 62          BYTE >62
0970 692F 52          BYTE >52
0971 6930 52          BYTE >52
0972 6931 52          BYTE >52
0973 6932 22          BYTE >22
0974 6933 00          BYTE >00
0975          ; Define a cell with 8 and 9
0976 6934 22          BYTE >22
0977 6935 55          BYTE >55
0978 6936 55          BYTE >55
0979 6937 23          BYTE >23
0980 6938 51          BYTE >51
0981 6939 51          BYTE >51
0982 693A 26          BYTE >26
0983 693B 00          BYTE >00
0984          ; Define a cell with A and B
0985 693C 26          BYTE >26
0986 693D 55          BYTE >55
0987 693E 55          BYTE >55
0988 693F 76          BYTE >76
0989 6940 55          BYTE >55
0990 6941 55          BYTE >55
0991 6942 56          BYTE >56
0992 6943 00          BYTE >00
0993          ; Define a cell with C and D
0994 6944 36          BYTE >36
0995 6945 45          BYTE >45
0996 6946 45          BYTE >45
0997 6947 45          BYTE >45
0998 6948 45          BYTE >45
0999 6949 45          BYTE >45
1000 694A 36          BYTE >36
1001 694B 00          BYTE >00
1002          ; Define a cell with E and F
1003 694C 77          BYTE >77
1004 694D 44          BYTE >44
1005 694E 44          BYTE >44
1006 694F 66          BYTE >66
1007 6950 44          BYTE >44
1008 6951 44          BYTE >44
1009 6952 74          BYTE >74
1010 6953 00          BYTE >00
1011          
1012          * Test code copied from Mini Memory
1013 6954 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
     6955 00  
     6956 10
     6957 40  
     6958 69  
     6959 04
1014 695A BC         ST    @>839A,@>8340                Copy command byte
     695B 40  
     695C 80  
     695D 9A
1015 695E BC         ST    @>839A,@>8341                The second byte is its complement
     695F 41  
     6960 80  
     6961 9A
1016 6962 BA         XOR   >FF,@>8341
     6963 41  
     6964 FF  
1017 6965 BC         ST    @>839B,@>8342                Copy p2.
     6966 42  
     6967 80  
     6968 9B
1018 6969 25         MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
     696A 00  
     696B 10
     696C 5F  
     696D F0
     696E 40  
1019 696F 00         RTN
1020          
1021              copy 'bin2hex.gpl'
              > bin2hex.gpl
0001          * bin2gpl.py output to bin2hex.gpl
0002          * Sun Jul 28 10:43:06 2024
0003          * Binary data
0004          BINDATA:
0005 6970 83    DATA >8302
     6971 02
0006 6972 D0    DATA >d060
     6973 60
0007 6974 83    DATA >835c
     6975 5C
0008 6976 09    DATA >0941
     6977 41
0009 6978 02    DATA >0221
     6979 21
0010 697A E0    DATA >e000
     697B 00
0011 697C DB    DATA >dbc1
     697D C1
0012 697E FF    DATA >fffe
     697F FE
0013 6980 D0    DATA >d060
     6981 60
0014 6982 83    DATA >835c
     6983 5C
0015 6984 02    DATA >0241
     6985 41
0016 6986 0F    DATA >0f00
     6987 00
0017 6988 02    DATA >0221
     6989 21
0018 698A E0    DATA >e000
     698B 00
0019 698C DB    DATA >dbc1
     698D C1
0020 698E FF    DATA >fffe
     698F FE
0021 6990 04    DATA >045b
     6991 5B
0022          BINLEN EQU >22   ; 34
0023          
              > config.gpl
1022          
1023          *----------------------------------------
1024          * VDP setup for module
1025          *----------------------------------------
1026          GVDPSETUP
1027 6992 BE      ST    >D0,V@>0300      no sprites
     6993 A3  
     6994 00
     6995 D0  
1028 6996 BE      ST    >F5,V@>0380      init color table as white on blue for all chars
     6997 A3  
     6998 80
     6999 F5  
1029 699A 35      MOVE  >001F,V@>0380,V@>0381
     699B 00  
     699C 1F
     699D A3  
     699E 81
     699F A3  
     69A0 80
1030 69A1 07      ALL   >20              erase screen
     69A2 20  
1031 69A3 04      BACK  >F5              screen colors: white on light blue
     69A4 F5  
1032 69A5 00      RTN
1033          
1034              COPY 'screen.gpl'
              > screen.gpl
0001          * Character definitions
0002 69A6 00  GUDG96	BYTE >00,>00,>00,>00,>00,>00,>00,>00 ; Character 96
     69A7 00  
     69A8 00  
     69A9 00  
     69AA 00  
     69AB 00  
     69AC 00  
     69AD 00  
0003 69AE 00  GUDG97	BYTE >00,>00,>70,>43,>72,>42,>42,>72 ; Character 97
     69AF 00  
     69B0 70  
     69B1 43  
     69B2 72  
     69B3 42  
     69B4 42  
     69B5 72  
0004 69B6 00  GUDG98	BYTE >00,>28,>08,>A9,>2A,>2E,>2B,>29 ; Character 98
     69B7 28  
     69B8 08  
     69B9 A9  
     69BA 2A  
     69BB 2E  
     69BC 2B  
     69BD 29  
0005 69BE 00  GUDG99	BYTE >00,>00,>0F,>09,>09,>0E,>08,>08 ; Character 99
     69BF 00  
     69C0 0F  
     69C1 09  
     69C2 09  
     69C3 0E  
     69C4 08  
     69C5 08  
0006 69C6 00  GUDG100	BYTE >00,>40,>00,>46,>49,>4F,>48,>46 ; Character 100
     69C7 40  
     69C8 00  
     69C9 46  
     69CA 49  
     69CB 4F  
     69CC 48  
     69CD 46  
0007 69CE 00  GUDG101	BYTE >00,>41,>41,>79,>49,>49,>49,>49 ; Character 101
     69CF 41  
     69D0 41  
     69D1 79  
     69D2 49  
     69D3 49  
     69D4 49  
     69D5 49  
0008 69D6 00  GUDG102	BYTE >00,>40,>40,>1C,>10,>0C,>06,>1C ; Character 102
     69D7 40  
     69D8 40  
     69D9 1C  
     69DA 10  
     69DB 0C  
     69DC 06  
     69DD 1C  
0009 69DE 00  GUDG103	BYTE >00,>00,>00,>00,>00,>00,>1C,>3F ; Character 103
     69DF 00  
     69E0 00  
     69E1 00  
     69E2 00  
     69E3 00  
     69E4 1C  
     69E5 3F  
0010 69E6 00  GUDG104	BYTE >00,>00,>00,>00,>00,>00,>00,>3F ; Character 104
     69E7 00  
     69E8 00  
     69E9 00  
     69EA 00  
     69EB 00  
     69EC 00  
     69ED 3F  
0011 69EE 00  GUDG105	BYTE >00,>00,>00,>00,>00,>00,>00,>9C ; Character 105
     69EF 00  
     69F0 00  
     69F1 00  
     69F2 00  
     69F3 00  
     69F4 00  
     69F5 9C  
0012 69F6 00  GUDG106	BYTE >00,>00,>00,>00,>00,>00,>07,>3F ; Character 106
     69F7 00  
     69F8 00  
     69F9 00  
     69FA 00  
     69FB 00  
     69FC 07  
     69FD 3F  
0013 69FE 00  GUDG107	BYTE >00,>00,>00,>00,>00,>00,>00,>F0 ; Character 107
     69FF 00  
     6A00 00  
     6A01 00  
     6A02 00  
     6A03 00  
     6A04 00  
     6A05 F0  
0014 6A06 00  GUDG108	BYTE >00,>00,>00,>00,>00,>00,>06,>9F ; Character 108
     6A07 00  
     6A08 00  
     6A09 00  
     6A0A 00  
     6A0B 00  
     6A0C 06  
     6A0D 9F  
0015 6A0E 00  GUDG109	BYTE >00,>00,>00,>00,>00,>00,>03,>8F ; Character 109
     6A0F 00  
     6A10 00  
     6A11 00  
     6A12 00  
     6A13 00  
     6A14 03  
     6A15 8F  
0016 6A16 00  GUDG110	BYTE >00,>00,>00,>00,>00,>00,>00,>C7 ; Character 110
     6A17 00  
     6A18 00  
     6A19 00  
     6A1A 00  
     6A1B 00  
     6A1C 00  
     6A1D C7  
0017 6A1E 00  GUDG111	BYTE >00,>00,>00,>00,>00,>00,>00,>F3 ; Character 111
     6A1F 00  
     6A20 00  
     6A21 00  
     6A22 00  
     6A23 00  
     6A24 00  
     6A25 F3  
0018 6A26 00  GUDG112	BYTE >00,>00,>00,>00,>00,>00,>C0,>F1 ; Character 112
     6A27 00  
     6A28 00  
     6A29 00  
     6A2A 00  
     6A2B 00  
     6A2C C0  
     6A2D F1  
0019 6A2E 00  GUDG113	BYTE >00,>00,>00,>00,>00,>00,>60,>F8 ; Character 113
     6A2F 00  
     6A30 00  
     6A31 00  
     6A32 00  
     6A33 00  
     6A34 60  
     6A35 F8  
0020 6A36 00  GUDG114	BYTE >00,>00,>00,>00,>00,>00,>00,>FC ; Character 114
     6A37 00  
     6A38 00  
     6A39 00  
     6A3A 00  
     6A3B 00  
     6A3C 00  
     6A3D FC  
0021 6A3E 00  GUDG115	BYTE >00,>03,>0F,>1F,>3F,>3F,>7F,>7E ; Character 115
     6A3F 03  
     6A40 0F  
     6A41 1F  
     6A42 3F  
     6A43 3F  
     6A44 7F  
     6A45 7E  
0022 6A46 00  GUDG116	BYTE >00,>F0,>FC,>FE,>FF,>FF,>3F,>3F ; Character 116
     6A47 F0  
     6A48 FC  
     6A49 FE  
     6A4A FF  
     6A4B FF  
     6A4C 3F  
     6A4D 3F  
0023 6A4E 00  GUDG117	BYTE >00,>00,>00,>00,>00,>80,>80,>80 ; Character 117
     6A4F 00  
     6A50 00  
     6A51 00  
     6A52 00  
     6A53 80  
     6A54 80  
     6A55 80  
0024 6A56 7F  GUDG118	BYTE >7F,>FF,>FF,>FE,>FE,>FE,>FE,>FE ; Character 118
     6A57 FF  
     6A58 FF  
     6A59 FE  
     6A5A FE  
     6A5B FE  
     6A5C FE  
     6A5D FE  
0025 6A5E FF  GUDG119	BYTE >FF,>FF,>FF,>7F,>7F,>7F,>7F,>7F ; Character 119
     6A5F FF  
     6A60 FF  
     6A61 7F  
     6A62 7F  
     6A63 7F  
     6A64 7F  
     6A65 7F  
0026 6A66 3F  GUDG120	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>3F,>3F ; Character 120
     6A67 3F  
     6A68 3F  
     6A69 3F  
     6A6A 3F  
     6A6B 3F  
     6A6C 3F  
     6A6D 3F  
0027 6A6E BC  GUDG121	BYTE >BC,>FC,>FC,>FD,>FD,>FD,>F9,>C1 ; Character 121
     6A6F FC  
     6A70 FC  
     6A71 FD  
     6A72 FD  
     6A73 FD  
     6A74 F9  
     6A75 C1  
0028 6A76 7F  GUDG122	BYTE >7F,>FF,>FF,>FC,>FC,>FC,>FC,>FC ; Character 122
     6A77 FF  
     6A78 FF  
     6A79 FC  
     6A7A FC  
     6A7B FC  
     6A7C FC  
     6A7D FC  
0029 6A7E F8  GUDG123	BYTE >F8,>FC,>FE,>FE,>FE,>FE,>FE,>FE ; Character 123
     6A7F FC  
     6A80 FE  
     6A81 FE  
     6A82 FE  
     6A83 FE  
     6A84 FE  
     6A85 FE  
0030 6A86 FF  GUDG124	BYTE >FF,>FF,>FF,>9F,>9F,>9F,>9F,>9F ; Character 124
     6A87 FF  
     6A88 FF  
     6A89 9F  
     6A8A 9F  
     6A8B 9F  
     6A8C 9F  
     6A8D 9F  
0031 6A8E DF  GUDG125	BYTE >DF,>FF,>FF,>E7,>C7,>C7,>C7,>C7 ; Character 125
     6A8F FF  
     6A90 FF  
     6A91 E7  
     6A92 C7  
     6A93 C7  
     6A94 C7  
     6A95 C7  
0032 6A96 E7  GUDG126	BYTE >E7,>E7,>E7,>F7,>F7,>F7,>F7,>F7 ; Character 126
     6A97 E7  
     6A98 E7  
     6A99 F7  
     6A9A F7  
     6A9B F7  
     6A9C F7  
     6A9D F7  
0033 6A9E FF  GUDG127	BYTE >FF,>FF,>FF,>F3,>F3,>F3,>F3,>F3 ; Character 127
     6A9F FF  
     6AA0 FF  
     6AA1 F3  
     6AA2 F3  
     6AA3 F3  
     6AA4 F3  
     6AA5 F3  
0034 6AA6 FB  GUDG128	BYTE >FB,>FF,>FF,>FC,>F8,>F8,>F8,>F8 ; Character 128
     6AA7 FF  
     6AA8 FF  
     6AA9 FC  
     6AAA F8  
     6AAB F8  
     6AAC F8  
     6AAD F8  
0035 6AAE FC  GUDG129	BYTE >FC,>FC,>FC,>FE,>FE,>FE,>FE,>FE ; Character 129
     6AAF FC  
     6AB0 FC  
     6AB1 FE  
     6AB2 FE  
     6AB3 FE  
     6AB4 FE  
     6AB5 FE  
0036 6AB6 FE  GUDG130	BYTE >FE,>FE,>7E,>7E,>7E,>7E,>7E,>3F ; Character 130
     6AB7 FE  
     6AB8 7E  
     6AB9 7E  
     6ABA 7E  
     6ABB 7E  
     6ABC 7E  
     6ABD 3F  
0037 6ABE 3F  GUDG131	BYTE >3F,>7F,>7F,>7F,>7E,>7E,>7E,>7E ; Character 131
     6ABF 7F  
     6AC0 7F  
     6AC1 7F  
     6AC2 7E  
     6AC3 7E  
     6AC4 7E  
     6AC5 7E  
0038 6AC6 7E  GUDG132	BYTE >7E,>7E,>7E,>00,>00,>00,>00,>01 ; Character 132
     6AC7 7E  
     6AC8 7E  
     6AC9 00  
     6ACA 00  
     6ACB 00  
     6ACC 00  
     6ACD 01  
0039 6ACE 3F  GUDG133	BYTE >3F,>3F,>3F,>7F,>7F,>FF,>FF,>FE ; Character 133
     6ACF 3F  
     6AD0 3F  
     6AD1 7F  
     6AD2 7F  
     6AD3 FF  
     6AD4 FF  
     6AD5 FE  
0040 6AD6 80  GUDG134	BYTE >80,>80,>80,>80,>00,>00,>00,>00 ; Character 134
     6AD7 80  
     6AD8 80  
     6AD9 80  
     6ADA 00  
     6ADB 00  
     6ADC 00  
     6ADD 00  
0041 6ADE FE  GUDG135	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FF ; Character 135
     6ADF FE  
     6AE0 FE  
     6AE1 FE  
     6AE2 FE  
     6AE3 FE  
     6AE4 FE  
     6AE5 FF  
0042 6AE6 7F  GUDG136	BYTE >7F,>7F,>7F,>7F,>7F,>7F,>7F,>FF ; Character 136
     6AE7 7F  
     6AE8 7F  
     6AE9 7F  
     6AEA 7F  
     6AEB 7F  
     6AEC 7F  
     6AED FF  
0043 6AEE C1  GUDG137	BYTE >C1,>81,>81,>81,>81,>81,>81,>81 ; Character 137
     6AEF 81  
     6AF0 81  
     6AF1 81  
     6AF2 81  
     6AF3 81  
     6AF4 81  
     6AF5 81  
0044 6AF6 FC  GUDG138	BYTE >FC,>FC,>FC,>FC,>FC,>FC,>FC,>FC ; Character 138
     6AF7 FC  
     6AF8 FC  
     6AF9 FC  
     6AFA FC  
     6AFB FC  
     6AFC FC  
     6AFD FC  
0045 6AFE FE  GUDG139	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FE ; Character 139
     6AFF FE  
     6B00 FE  
     6B01 FE  
     6B02 FE  
     6B03 FE  
     6B04 FE  
     6B05 FE  
0046 6B06 9F  GUDG140	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>9F,>9F ; Character 140
     6B07 9F  
     6B08 9F  
     6B09 9F  
     6B0A 9F  
     6B0B 9F  
     6B0C 9F  
     6B0D 9F  
0047 6B0E C7  GUDG141	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>C7,>C7 ; Character 141
     6B0F C7  
     6B10 C7  
     6B11 C7  
     6B12 C7  
     6B13 C7  
     6B14 C7  
     6B15 C7  
0048 6B16 F7  GUDG142	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>F7,>F7 ; Character 142
     6B17 F7  
     6B18 F7  
     6B19 F7  
     6B1A F7  
     6B1B F7  
     6B1C F7  
     6B1D F7  
0049 6B1E F3  GUDG143	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>F3,>F3 ; Character 143
     6B1F F3  
     6B20 F3  
     6B21 F3  
     6B22 F3  
     6B23 F3  
     6B24 F3  
     6B25 F3  
0050 6B26 F8  GUDG144	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>F8,>F8 ; Character 144
     6B27 F8  
     6B28 F8  
     6B29 F8  
     6B2A F8  
     6B2B F8  
     6B2C F8  
     6B2D F8  
0051 6B2E 3F  GUDG145	BYTE >3F,>3F,>3F,>3F,>1F,>1F,>1F,>1F ; Character 145
     6B2F 3F  
     6B30 3F  
     6B31 3F  
     6B32 1F  
     6B33 1F  
     6B34 1F  
     6B35 1F  
0052 6B36 7E  GUDG146	BYTE >7E,>7E,>7E,>7E,>FC,>FC,>FC,>FC ; Character 146
     6B37 7E  
     6B38 7E  
     6B39 7E  
     6B3A FC  
     6B3B FC  
     6B3C FC  
     6B3D FC  
0053 6B3E 01  GUDG147	BYTE >01,>03,>07,>07,>0F,>0F,>1F,>3F ; Character 147
     6B3F 03  
     6B40 07  
     6B41 07  
     6B42 0F  
     6B43 0F  
     6B44 1F  
     6B45 3F  
0054 6B46 FC  GUDG148	BYTE >FC,>FC,>F8,>F8,>F0,>E0,>E0,>C0 ; Character 148
     6B47 FC  
     6B48 F8  
     6B49 F8  
     6B4A F0  
     6B4B E0  
     6B4C E0  
     6B4D C0  
0055 6B4E 7F  GUDG149	BYTE >7F,>7F,>3F,>00,>FE,>FE,>FF,>7F ; Character 149
     6B4F 7F  
     6B50 3F  
     6B51 00  
     6B52 FE  
     6B53 FE  
     6B54 FF  
     6B55 7F  
0056 6B56 FF  GUDG150	BYTE >FF,>FF,>7F,>7F,>7F,>7F,>FF,>FE ; Character 150
     6B57 FF  
     6B58 7F  
     6B59 7F  
     6B5A 7F  
     6B5B 7F  
     6B5C FF  
     6B5D FE  
0057 6B5E 3F  GUDG151	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>00,>00 ; Character 151
     6B5F 3F  
     6B60 3F  
     6B61 3F  
     6B62 3F  
     6B63 3F  
     6B64 00  
     6B65 00  
0058 6B66 81  GUDG152	BYTE >81,>81,>80,>80,>80,>80,>00,>00 ; Character 152
     6B67 81  
     6B68 80  
     6B69 80  
     6B6A 80  
     6B6B 80  
     6B6C 00  
     6B6D 00  
0059 6B6E FC  GUDG153	BYTE >FC,>FC,>FF,>FF,>7F,>1F,>00,>00 ; Character 153
     6B6F FC  
     6B70 FF  
     6B71 FF  
     6B72 7F  
     6B73 1F  
     6B74 00  
     6B75 00  
0060 6B76 FE  GUDG154	BYTE >FE,>FE,>FC,>FC,>F8,>E0,>00,>00 ; Character 154
     6B77 FE  
     6B78 FC  
     6B79 FC  
     6B7A F8  
     6B7B E0  
     6B7C 00  
     6B7D 00  
0061 6B7E 9F  GUDG155	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>00,>00 ; Character 155
     6B7F 9F  
     6B80 9F  
     6B81 9F  
     6B82 9F  
     6B83 9F  
     6B84 00  
     6B85 00  
0062 6B86 C7  GUDG156	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>00,>00 ; Character 156
     6B87 C7  
     6B88 C7  
     6B89 C7  
     6B8A C7  
     6B8B C7  
     6B8C 00  
     6B8D 00  
0063 6B8E F7  GUDG157	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>00,>00 ; Character 157
     6B8F F7  
     6B90 F7  
     6B91 F7  
     6B92 F7  
     6B93 F7  
     6B94 00  
     6B95 00  
0064 6B96 F3  GUDG158	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>00,>00 ; Character 158
     6B97 F3  
     6B98 F3  
     6B99 F3  
     6B9A F3  
     6B9B F3  
     6B9C 00  
     6B9D 00  
0065 6B9E F8  GUDG159	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>00,>00 ; Character 159
     6B9F F8  
     6BA0 F8  
     6BA1 F8  
     6BA2 F8  
     6BA3 F8  
     6BA4 00  
     6BA5 00  
0066 6BA6 FE  GUDG160	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>00,>00 ; Character 160
     6BA7 FE  
     6BA8 FE  
     6BA9 FE  
     6BAA FE  
     6BAB FE  
     6BAC 00  
     6BAD 00  
0067 6BAE 1F  GUDG161	BYTE >1F,>0F,>0F,>0F,>0F,>1F,>3F,>3F ; Character 161
     6BAF 0F  
     6BB0 0F  
     6BB1 0F  
     6BB2 0F  
     6BB3 1F  
     6BB4 3F  
     6BB5 3F  
0068 6BB6 FC  GUDG162	BYTE >FC,>FC,>FC,>FC,>F8,>F8,>F8,>F0 ; Character 162
     6BB7 FC  
     6BB8 FC  
     6BB9 FC  
     6BBA F8  
     6BBB F8  
     6BBC F8  
     6BBD F0  
0069 6BBE 3F  GUDG163	BYTE >3F,>7F,>7F,>7F,>7F,>7F,>00,>00 ; Character 163
     6BBF 7F  
     6BC0 7F  
     6BC1 7F  
     6BC2 7F  
     6BC3 7F  
     6BC4 00  
     6BC5 00  
0070 6BC6 80  GUDG164	BYTE >80,>FF,>FF,>FF,>FF,>FF,>00,>00 ; Character 164
     6BC7 FF  
     6BC8 FF  
     6BC9 FF  
     6BCA FF  
     6BCB FF  
     6BCC 00  
     6BCD 00  
0071 6BCE 00  GUDG165	BYTE >00,>00,>80,>80,>80,>80,>00,>00 ; Character 165
     6BCF 00  
     6BD0 80  
     6BD1 80  
     6BD2 80  
     6BD3 80  
     6BD4 00  
     6BD5 00  
0072 6BD6 3F  GUDG166	BYTE >3F,>0F,>00,>00,>00,>00,>00,>00 ; Character 166
     6BD7 0F  
     6BD8 00  
     6BD9 00  
     6BDA 00  
     6BDB 00  
     6BDC 00  
     6BDD 00  
0073 6BDE FC  GUDG167	BYTE >FC,>F0,>00,>00,>00,>00,>00,>00 ; Character 167
     6BDF F0  
     6BE0 00  
     6BE1 00  
     6BE2 00  
     6BE3 00  
     6BE4 00  
     6BE5 00  
0074 6BE6 3F  GUDG168	BYTE >3F,>00,>00,>00,>00,>00,>00,>00 ; Character 168
     6BE7 00  
     6BE8 00  
     6BE9 00  
     6BEA 00  
     6BEB 00  
     6BEC 00  
     6BED 00  
0075 6BEE E0  GUDG169	BYTE >E0,>00,>00,>00,>00,>00,>00,>00 ; Character 169
     6BEF 00  
     6BF0 00  
     6BF1 00  
     6BF2 00  
     6BF3 00  
     6BF4 00  
     6BF5 00  
0076 6BF6 3E  GUDG170	BYTE >3E,>60,>60,>60,>60,>60,>32,>1E ; Character 170
     6BF7 60  
     6BF8 60  
     6BF9 60  
     6BFA 60  
     6BFB 60  
     6BFC 32  
     6BFD 1E  
0077 6BFE 3E  GUDG171	BYTE >3E,>66,>43,>C3,>43,>62,>76,>3C ; Character 171
     6BFF 66  
     6C00 43  
     6C01 C3  
     6C02 43  
     6C03 62  
     6C04 76  
     6C05 3C  
0078 6C06 63  GUDG172	BYTE >63,>73,>7B,>6F,>6F,>67,>67,>63 ; Character 172
     6C07 73  
     6C08 7B  
     6C09 6F  
     6C0A 6F  
     6C0B 67  
     6C0C 67  
     6C0D 63  
0079 6C0E 7C  GUDG173	BYTE >7C,>60,>60,>7C,>60,>60,>60,>60 ; Character 173
     6C0F 60  
     6C10 60  
     6C11 7C  
     6C12 60  
     6C13 60  
     6C14 60  
     6C15 60  
0080 6C16 C7  GUDG174	BYTE >C7,>CC,>CC,>CC,>CC,>CC,>CE,>C7 ; Character 174
     6C17 CC  
     6C18 CC  
     6C19 CC  
     6C1A CC  
     6C1B CC  
     6C1C CE  
     6C1D C7  
0081 6C1E C0  GUDG175	BYTE >C0,>00,>00,>C0,>E0,>60,>E0,>C0 ; Character 175
     6C1F 00  
     6C20 00  
     6C21 C0  
     6C22 E0  
     6C23 60  
     6C24 E0  
     6C25 C0  
0082 6C26 61  GLINE0_25 BYTE >61,>62,>63,>64,>65,>66,>67,>68,>68,>69,>6A,>6B,>68,>6C,>6D,>6E,>6F,>70,>71,>72,>68,>73,>74,>75
     6C27 62  
     6C28 63  
     6C29 64  
     6C2A 65  
     6C2B 66  
     6C2C 67  
     6C2D 68  
     6C2E 68  
     6C2F 69  
     6C30 6A  
     6C31 6B  
     6C32 68  
     6C33 6C  
     6C34 6D  
     6C35 6E  
     6C36 6F  
     6C37 70  
     6C38 71  
     6C39 72  
     6C3A 68  
     6C3B 73  
     6C3C 74  
     6C3D 75  
0083 6C3E 76  GLINE1_25 BYTE >76,>77,>78,>79,>7A,>7B,>78,>7C,>7D,>7E,>7F,>80,>81,>82,>83,>84,>85,>86
     6C3F 77  
     6C40 78  
     6C41 79  
     6C42 7A  
     6C43 7B  
     6C44 78  
     6C45 7C  
     6C46 7D  
     6C47 7E  
     6C48 7F  
     6C49 80  
     6C4A 81  
     6C4B 82  
     6C4C 83  
     6C4D 84  
     6C4E 85  
     6C4F 86  
0084 6C50 87  GLINE2_24 BYTE >87,>88,>78,>89,>8A,>8B,>78,>8C,>8D,>8E,>8F,>90,>8B,>91,>92,>93,>94
     6C51 88  
     6C52 78  
     6C53 89  
     6C54 8A  
     6C55 8B  
     6C56 78  
     6C57 8C  
     6C58 8D  
     6C59 8E  
     6C5A 8F  
     6C5B 90  
     6C5C 8B  
     6C5D 91  
     6C5E 92  
     6C5F 93  
     6C60 94  
0085 6C61 95  GLINE3_25 BYTE >95,>96,>97,>98,>99,>9A,>97,>9B,>9C,>9D,>9E,>9F,>A0,>A1,>A2,>A3,>A4,>A5
     6C62 96  
     6C63 97  
     6C64 98  
     6C65 99  
     6C66 9A  
     6C67 97  
     6C68 9B  
     6C69 9C  
     6C6A 9D  
     6C6B 9E  
     6C6C 9F  
     6C6D A0  
     6C6E A1  
     6C6F A2  
     6C70 A3  
     6C71 A4  
     6C72 A5  
0086 6C73 A6  GLINE4_9 BYTE >A6,>A7
     6C74 A7  
0087 6C75 A8  GLINE4_28 BYTE >A8,>A9,>AA,>AB,>AC,>AD,>AE,>AF
     6C76 A9  
     6C77 AA  
     6C78 AB  
     6C79 AC  
     6C7A AD  
     6C7B AE  
     6C7C AF  
0088          
0089          G_SCR1
0090 6C7D 31      MOVE >0280,G@GUDG96,V@>0B00 ; Copy our screen chars
     6C7E 02  
     6C7F 80
     6C80 AB  
     6C81 00
     6C82 69  
     6C83 A6
0091          
0092 6C84 31  	MOVE >0018,G@GLINE0_25,V@>0001
     6C85 00  
     6C86 18
     6C87 A0  
     6C88 01
     6C89 6C  
     6C8A 26
0093 6C8B 31  	MOVE >0012,G@GLINE1_25,V@>0027
     6C8C 00  
     6C8D 12
     6C8E A0  
     6C8F 27
     6C90 6C  
     6C91 3E
0094 6C92 31  	MOVE >0011,G@GLINE2_24,V@>0047
     6C93 00  
     6C94 11
     6C95 A0  
     6C96 47
     6C97 6C  
     6C98 50
0095 6C99 31  	MOVE >0012,G@GLINE3_25,V@>0067
     6C9A 00  
     6C9B 12
     6C9C A0  
     6C9D 67
     6C9E 6C  
     6C9F 61
0096 6CA0 31  	MOVE >0002,G@GLINE4_9,V@>0087
     6CA1 00  
     6CA2 02
     6CA3 A0  
     6CA4 87
     6CA5 6C  
     6CA6 73
0097 6CA7 31  	MOVE >0008,G@GLINE4_28,V@>0094
     6CA8 00  
     6CA9 08
     6CAA A0  
     6CAB 94
     6CAC 6C  
     6CAD 75
0098          
0099 6CAE 00      RTN
0100          
