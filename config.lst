XGA99 CROSS-ASSEMBLER   VERSION 3.0.1
              > config.gpl
0001          * config.gpl
0002          * Configurator for GROMMY2
0003          * At this point this is just a demo how to render the generated screen.gpl
0004          * EP 2023-11-26
0005          *
0006          * Compile the GPL code to binary with:
0007          * xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
0008          * output file is config.bin, since the filename ends with g it is treated
0009          * by an emulator such as js99er.net as a GROM file.
0010          *
0011          * This file includes the screen.gpl file at the very end.
0012          *
0013          
0014          LALIGN    EQU >02              Left alignment of text
0015          LALIGN2   EQU >03
0016          LAYOUTVER EQU 5         Row for Version number
0017          LAYOUTBAN EQU 8        Row for selected bank display
0018          VEROFS    EQU 32*LAYOUTVER
0019          VALIDIND  EQU VEROFS-29         ; Indicator for valid command
0020          * Grommy2 command buffer in scratchpad
0021          GCMDBYTE EQU >8340
0022          GCMDP2   EQU >8342
0023          GCMDP3   EQU >8343
0024          GCMDP4   EQU >8344
0025          GCMDP5   EQU >8345
0026          GCMDP6   EQU >8346
0027          GCMDP7   EQU >8347
0028          
0029          BANK    EQU >8350           Active bank
0030          SHADOW  EQU >8351           Shadow enable / disable
0031          PAD0    EQU >835C
0032          PAD1    EQU >835D
0033          PAD2    EQU >835E
0034          PAD3    EQU >835F
0035          PAD4    EQU >8360
0036          DUMPA   EQU >8362           ; GROM Dump address
0037          VRAMP   EQU >8340           ; VRAM ptr overlays GCMDBYTE
0038          
0039          SCANKEY EQU >8375
0040          * Hardware interface address
0041          HWIF     EQU >5FF0
0042          
0043          
0044 6000 AA  G6000  DATA >AA01             standard header  version 1
     6001 01
0045 6002 00         DATA >0000             # of programs 0
     6003 00
0046 6004 00         DATA >0000             no power up
     6005 00
0047 6006 60         DATA G6010             program
     6007 10
0048 6008 00         DATA >0000             DSRs
     6009 00
0049 600A 00         DATA >0000             subprograms
     600B 00
0050 600C 00         DATA >0000
     600D 00
0051 600E 00         DATA >0000
     600F 00
0052          
0053 6010 00  G6010  DATA >0000         * No next program
     6011 00
0054 6012 60         DATA GPROG
     6013 2A
0055 6014 0E         STRI 'GROMMY2 CONFIG'
     6015 47  
     6016 52  
     6017 4F  
     6018 4D  
     6019 4D  
     601A 59  
     601B 32  
     601C 20  
     601D 43  
     601E 4F  
     601F 4E  
     6020 46  
     6021 49  
     6022 47  
0056          
0057          GVREGS
0058 6023 E0      BYTE  >E0              VDP registers values: standard mode
0059 6024 00      BYTE  >00              screen image at >0000
0060 6025 0E      BYTE  >0E              color table at >0380
0061 6026 01      BYTE  >01              char patterns at >0800
0062 6027 06      BYTE  >06              sprite attributes at >0300
0063 6028 00      BYTE  >00              sprite patterns at >0000
0064 6029 F5      BYTE  >F5              text/screen colors: white / light blue
0065          
0066          GPROG
0067 602A 86      CLR   @>8374
     602B 74  
0068 602C BF      DST   >0900,@>834A     load upper case chars 32->
     602D 4A  
     602E 09  
     602F 00
0069 6030 06      CALL  G@>0018
     6031 00  
     6032 18
0070          * Setup roughly as with mini memory
0071 6033 39      MOVE >0007,G@GVREGS,#>01    Set VDP Regs
     6034 00  
     6035 07
     6036 01  
     6037 60  
     6038 23
0072 6039 86      CLR   V@>0800          clear charpats 0-31
     603A A8  
     603B 00
0073 603C 35      MOVE  >00FF,V@>0800,V@>0801
     603D 00  
     603E FF
     603F A8  
     6040 01
     6041 A8  
     6042 00
0074          
0075 6043 BE      ST    >7E,@>8373       init subroutine stack
     6044 73  
     6045 7E  
0076 6046 87      DCLR  @>8322           clear error code
     6047 22  
0077 6048 87      DCLR  @>8348           clear flags
     6049 48  
0078          
0079 604A 87      DCLR   @DUMPA
     604B 62  
0080 604C 86      CLR    @BANK           Actually init from grommy2
     604D 50  
0081 604E 86      CLR    @SHADOW         Actually init from grommy2
     604F 51  
0082          
0083 6050 06      CALL G@GVDPSETUP
     6051 65  
     6052 55
0084          
0085 6053 06      CALL G@G_SCR1       ; Setup the screen which was automatically generated
     6054 68  
     6055 40
0086          SCREEN1:
0087          * Use the FMT token to add some strings on the screen
0088 6056 08      FMT
0089 6057 FF      COL LALIGN
     6058 02  
0090 6059 FE      ROW LAYOUTVER
     605A 05  
0091 605B 1D      HTEX 'VERSION 0.0.00 BANK 0 SHADOW 0'
     605C 56  
     605D 45  
     605E 52  
     605F 53  
     6060 49  
     6061 4F  
     6062 4E  
     6063 20  
     6064 30  
     6065 2E  
     6066 30  
     6067 2E  
     6068 30  
     6069 30  
     606A 20  
     606B 42  
     606C 41  
     606D 4E  
     606E 4B  
     606F 20  
     6070 30  
     6071 20  
     6072 53  
     6073 48  
     6074 41  
     6075 44  
     6076 4F  
     6077 57  
     6078 20  
     6079 30  
0092 607A A0      ROW+ >01
0093 607B FF      COL LALIGN
     607C 02  
0094 607D 19      HTEX 'SELECT GROM BANK FOR READS'
     607E 53  
     607F 45  
     6080 4C  
     6081 45  
     6082 43  
     6083 54  
     6084 20  
     6085 47  
     6086 52  
     6087 4F  
     6088 4D  
     6089 20  
     608A 42  
     608B 41  
     608C 4E  
     608D 4B  
     608E 20  
     608F 46  
     6090 4F  
     6091 52  
     6092 20  
     6093 52  
     6094 45  
     6095 41  
     6096 44  
     6097 53  
0095 6098 A0      ROW+ >01
0096 6099 FF      COL LALIGN2
     609A 03  
0097 609B 0C      HTEX '0 SYSTEM BANK'
     609C 30  
     609D 20  
     609E 53  
     609F 59  
     60A0 53  
     60A1 54  
     60A2 45  
     60A3 4D  
     60A4 20  
     60A5 42  
     60A6 41  
     60A7 4E  
     60A8 4B  
0098 60A9 A0      ROW+ >01
0099 60AA FF      COL LALIGN2
     60AB 03  
0100 60AC 0C      HTEX '1 USER BANK 1'
     60AD 31  
     60AE 20  
     60AF 55  
     60B0 53  
     60B1 45  
     60B2 52  
     60B3 20  
     60B4 42  
     60B5 41  
     60B6 4E  
     60B7 4B  
     60B8 20  
     60B9 31  
0101 60BA A0      ROW+ >01
0102 60BB FF      COL LALIGN2
     60BC 03  
0103 60BD 0C      HTEX '2 USER BANK 2'
     60BE 32  
     60BF 20  
     60C0 55  
     60C1 53  
     60C2 45  
     60C3 52  
     60C4 20  
     60C5 42  
     60C6 41  
     60C7 4E  
     60C8 4B  
     60C9 20  
     60CA 32  
0104 60CB A0      ROW+ >01
0105 60CC FF      COL LALIGN2
     60CD 03  
0106 60CE 0A      HTEX '3 GRAM BANK'
     60CF 33  
     60D0 20  
     60D1 47  
     60D2 52  
     60D3 41  
     60D4 4D  
     60D5 20  
     60D6 42  
     60D7 41  
     60D8 4E  
     60D9 4B  
0107          
0108 60DA A1      ROW+ >02
0109 60DB FF      COL LALIGN
     60DC 02  
0110 60DD 09      HTEX 'SHADOW RAM'
     60DE 53  
     60DF 48  
     60E0 41  
     60E1 44  
     60E2 4F  
     60E3 57  
     60E4 20  
     60E5 52  
     60E6 41  
     60E7 4D  
0111 60E8 A0      ROW+ >01
0112 60E9 FF      COL LALIGN2
     60EA 03  
0113 60EB 15      HTEX '4 ENABLE     5 DISABLE'
     60EC 34  
     60ED 20  
     60EE 45  
     60EF 4E  
     60F0 41  
     60F1 42  
     60F2 4C  
     60F3 45  
     60F4 20  
     60F5 20  
     60F6 20  
     60F7 20  
     60F8 20  
     60F9 35  
     60FA 20  
     60FB 44  
     60FC 49  
     60FD 53  
     60FE 41  
     60FF 42  
     6100 4C  
     6101 45  
0114          
0115 6102 A1      ROW+ >02
0116 6103 FF      COL LALIGN
     6104 02  
0117 6105 16      HTEX 'FLASH GRAM TO USER BANK'
     6106 46  
     6107 4C  
     6108 41  
     6109 53  
     610A 48  
     610B 20  
     610C 47  
     610D 52  
     610E 41  
     610F 4D  
     6110 20  
     6111 54  
     6112 4F  
     6113 20  
     6114 55  
     6115 53  
     6116 45  
     6117 52  
     6118 20  
     6119 42  
     611A 41  
     611B 4E  
     611C 4B  
0118 611D A0      ROW+ >01
0119 611E FF      COL LALIGN2
     611F 03  
0120 6120 14      HTEX '6 BANK 1     7 BANK 2'
     6121 36  
     6122 20  
     6123 42  
     6124 41  
     6125 4E  
     6126 4B  
     6127 20  
     6128 31  
     6129 20  
     612A 20  
     612B 20  
     612C 20  
     612D 20  
     612E 37  
     612F 20  
     6130 42  
     6131 41  
     6132 4E  
     6133 4B  
     6134 20  
     6135 32  
0121          
0122 6136 A1      ROW+ >02
0123 6137 FF      COL LALIGN
     6138 02  
0124 6139 14      HTEX 'COPY ROM BANK TO GRAM'
     613A 43  
     613B 4F  
     613C 50  
     613D 59  
     613E 20  
     613F 52  
     6140 4F  
     6141 4D  
     6142 20  
     6143 42  
     6144 41  
     6145 4E  
     6146 4B  
     6147 20  
     6148 54  
     6149 4F  
     614A 20  
     614B 47  
     614C 52  
     614D 41  
     614E 4D  
0125 614F A0      ROW+ >01
0126 6150 FF      COL LALIGN2
     6151 03  
0127 6152 16      HTEX 'A COPY FROM SYSTEM BANK'
     6153 41  
     6154 20  
     6155 43  
     6156 4F  
     6157 50  
     6158 59  
     6159 20  
     615A 46  
     615B 52  
     615C 4F  
     615D 4D  
     615E 20  
     615F 53  
     6160 59  
     6161 53  
     6162 54  
     6163 45  
     6164 4D  
     6165 20  
     6166 42  
     6167 41  
     6168 4E  
     6169 4B  
0128 616A A0      ROW+ >01
0129 616B FF      COL LALIGN2
     616C 03  
0130 616D 16      HTEX 'B COPY FROM USER BANK 1'
     616E 42  
     616F 20  
     6170 43  
     6171 4F  
     6172 50  
     6173 59  
     6174 20  
     6175 46  
     6176 52  
     6177 4F  
     6178 4D  
     6179 20  
     617A 55  
     617B 53  
     617C 45  
     617D 52  
     617E 20  
     617F 42  
     6180 41  
     6181 4E  
     6182 4B  
     6183 20  
     6184 31  
0131 6185 A0      ROW+ >01
0132 6186 FF      COL LALIGN2
     6187 03  
0133 6188 16      HTEX 'C COPY FROM USER BANK 2'
     6189 43  
     618A 20  
     618B 43  
     618C 4F  
     618D 50  
     618E 59  
     618F 20  
     6190 46  
     6191 52  
     6192 4F  
     6193 4D  
     6194 20  
     6195 55  
     6196 53  
     6197 45  
     6198 52  
     6199 20  
     619A 42  
     619B 41  
     619C 4E  
     619D 4B  
     619E 20  
     619F 32  
0134          
0135 61A0 A0      ROW+ >01
0136 61A1 FF      COL LALIGN
     61A2 02  
0137 61A3 08      HTEX '9 MORE...'
     61A4 39  
     61A5 20  
     61A6 4D  
     61A7 4F  
     61A8 52  
     61A9 45  
     61AA 2E  
     61AB 2E  
     61AC 2E  
0138          
0139 61AD FB      FEND
0140          
0141          * Pattern address of character 0xFF
0142          PATADR EQU >0800+(255*8)
0143          * Test a couple of chars
0144          *    MOVE 64,G@DENSE_FONT,V@PATADR-64
0145          *    ST >F7,V@0
0146          *    ST >F8,V@1
0147          *    ST >F9,V@2
0148          *    ST >FA,V@3
0149          *    ST >FB,V@4
0150          *    ST >FC,V@5
0151          *    ST >FD,V@6
0152          *    ST >FE,V@7
0153          
0154 61AE 06      CALL  SHOW_VERSION      ; Get version, bank, shadow info
     61AF 64  
     61B0 70
0155 61B1 05      B     GUPDATE           ; update screen
     61B2 62  
     61B3 6E
0156          
0157          GWAIT
0158 61B4 03      SCAN
0159 61B5 61      BS    GOTKEY
     61B6 C3  
0160          * We did not get a key. Animate something.
0161 61B7 BE      ST    >FF,V@>001F      Write char FF to top left corner
     61B8 A0  
     61B9 1F
     61BA FF  
0162 61BB A2      ADD   1,V@PATADR
     61BC AF  
     61BD 0F
     61BE F8
     61BF 01  
0163 61C0 05      B    G@GWAIT          wait for the user to press a key
     61C1 61  
     61C2 B4
0164          
0165          
0166          GOTKEY:
0167 61C3 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     61C4 A0  
     61C5 82
     61C6 75  
0168 61C7 BE      ST    ' ',V@VALIDIND        ; Assume invalid CMD
     61C8 A0  
     61C9 83
     61CA 20  
0169 61CB CE      CGT   '0'-1,@SCANKEY       greater than >= 0
     61CC 75  
     61CD 2F  
0170 61CE 42      BR    GG01              no skip forward
     61CF 68  
0171 61D0 CE      CGT   '9',@SCANKEY        Key greater than '9'?
     61D1 75  
     61D2 39  
0172 61D3 61      BS    CHECK_ABC             ; Yes: skip forward
     61D4 EE  
0173 61D5 A6      SUB   '0',@SCANKEY
     61D6 75  
     61D7 30  
0174 61D8 8A      CASE  @SCANKEY
     61D9 75  
0175 61DA 42      BR    KEY0
     61DB 12  
0176 61DC 42      BR    KEY1
     61DD 12  
0177 61DE 42      BR    KEY2
     61DF 12  
0178 61E0 42      BR    KEY3
     61E1 1D  
0179 61E2 42      BR    KEY4
     61E3 03  
0180 61E4 42      BR    KEY5
     61E5 0E  
0181 61E6 42      BR    KEY6
     61E7 25  
0182 61E8 42      BR    KEY7
     61E9 30  
0183 61EA 42      BR    KEY8
     61EB 35  
0184 61EC 42      BR    KEY9
     61ED 3E  
0185          CHECK_ABC
0186          ; Commands A,B and C
0187 61EE CE      CGT   'A'-1,@SCANKEY
     61EF 75  
     61F0 40  
0188 61F1 42      BR    GG01
     61F2 68  
0189 61F3 CE      CGT   'C',@SCANKEY
     61F4 75  
     61F5 43  
0190 61F6 62      BS    GG01
     61F7 68  
0191 61F8 A6      SUB   'A',@SCANKEY
     61F9 75  
     61FA 41  
0192 61FB 8A      CASE  @SCANKEY
     61FC 75  
0193 61FD 42      BR    KEYA
     61FE 41  
0194 61FF 42      BR    KEYB
     6200 4D  
0195 6201 42      BR    KEYC
     6202 52  
0196          
0197          KEY4:
0198 6203 BE      ST  1,@SHADOW
     6204 51  
     6205 01  
0199          SHADOWSET
0200 6206 BC      ST  @SHADOW,@GCMDP2    ; Set parameter 2
     6207 42  
     6208 51  
0201 6209 BE      ST  3,@GCMDBYTE         ; Command 3 shadow enable/disable
     620A 40  
     620B 03  
0202 620C 42      BR  ISSUECMD
     620D 5B  
0203          KEY5:
0204 620E 86      CLR @SHADOW
     620F 51  
0205 6210 42      BR  SHADOWSET
     6211 06  
0206          KEY0
0207          KEY1
0208          KEY2
0209 6212 BC      ST   @SCANKEY,@BANK
     6213 50  
     6214 75  
0210 6215 BC      ST   @SCANKEY,@GCMDP2    ; Set parameter 2
     6216 42  
     6217 75  
0211          BANKSEL
0212 6218 BE      ST   1,@GCMDBYTE         ; Command 1 select bank for reads
     6219 40  
     621A 01  
0213 621B 42      BR  ISSUECMD
     621C 5B  
0214          KEY3
0215 621D BC      ST   @SCANKEY,@BANK
     621E 50  
     621F 75  
0216 6220 BE      ST   8,@GCMDP2           ; GRAM bank is 8
     6221 42  
     6222 08  
0217 6223 42      BR   BANKSEL
     6224 18  
0218          
0219          KEY6:                       ; Flash GRAM to user bank 1
0220 6225 BE      ST   >01,@GCMDP2        ; User bank 1
     6226 42  
     6227 01  
0221          GRAM2FLASH
0222 6228 BE      ST   >3F,@GCMDP3        ; Bit mask: flash entire bank
     6229 43  
     622A 3F  
0223 622B BE      ST   4,@GCMDBYTE
     622C 40  
     622D 04  
0224 622E 42      BR  ISSUECMD
     622F 5B  
0225          KEY7:                       ; Flash GRAM to user bank 2
0226 6230 BE      ST   >02,@GCMDP2        ; User bank 2
     6231 42  
     6232 02  
0227 6233 42      BR   GRAM2FLASH
     6234 28  
0228          KEY8
0229 6235 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6236 A0  
     6237 83
     6238 2A  
0230 6239 06      CALL  SHOW_VERSION
     623A 64  
     623B 70
0231 623C 41      BR    GWAIT
     623D B4  
0232          KEY9:
0233 623E 05      B   DUMPSCREEN
     623F 62  
     6240 A3
0234          
0235          KEYA:                       ; Copy bank 0 to GRAM
0236 6241 BE      ST    0,@GCMDP2
     6242 42  
     6243 00  
0237          COPY2GRAM:
0238 6244 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6245 A0  
     6246 83
     6247 2A  
0239 6248 BE      ST    2,@GCMDBYTE
     6249 40  
     624A 02  
0240 624B 42      BR    ISSUECMD
     624C 5B  
0241          KEYB:
0242 624D BE      ST    1,@GCMDP2
     624E 42  
     624F 01  
0243 6250 42      BR    COPY2GRAM
     6251 44  
0244          KEYC:
0245 6252 BE      ST    2,@GCMDP2
     6253 42  
     6254 02  
0246 6255 42      BR    COPY2GRAM
     6256 44  
0247          
0248          ISSUECMD1:                  ; Clear last 4 parameter bytes
0249 6257 87      DCLR  @GCMDBYTE+4
     6258 44  
0250 6259 87      DCLR  @GCMDBYTE+6
     625A 46  
0251          ISSUECMD:
0252 625B 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     625C 00  
     625D 08
     625E 48  
     625F 64  
     6260 F1
0253 6261 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6262 A0  
     6263 83
     6264 2A  
0254 6265 06      CALL  GSENDCMD          ; Send command to HW
     6266 64  
     6267 DC
0255          
0256          GG01:
0257 6268 D6      CEQ   >0F,@SCANKEY       is it Fctn-9?
     6269 75  
     626A 0F  
0258 626B 42      BR    G@GCONT2         no: GCONT2
     626C 6E  
0259 626D 0B      EXIT                   yes: reset the TI-99/4A
0260          
0261          GCONT2
0262          * Update screen to reflect current status
0263          GUPDATE
0264          * Status of Shadow RAM enable/disable
0265 626E BE      ST  '0',@PAD0
     626F 5C  
     6270 30  
0266 6271 A0      ADD @SHADOW,@PAD0
     6272 5C  
     6273 51  
0267 6274 BC      ST  @PAD0,V@VEROFS+>1F        Write to VRAM
     6275 A0  
     6276 BF
     6277 5C  
0268          * Status of selected bank
0269 6278 BE      ST  '0',@PAD0
     6279 5C  
     627A 30  
0270 627B A0      ADD @BANK,@PAD0
     627C 5C  
     627D 50  
0271 627E BC      ST  @PAD0,V@VEROFS+>16  ; Write to VRAM
     627F A0  
     6280 B6
     6281 5C  
0272          
0273          
0274          * Start update GROM read bank. First erase bank markings.
0275          BANKOFS EQU (32*LAYOUTBAN)+4
0276 6282 BE      ST ' ',V@BANKOFS
     6283 A1  
     6284 04
     6285 20  
0277 6286 BE      ST ' ',V@BANKOFS+>20
     6287 A1  
     6288 24
     6289 20  
0278 628A BE      ST ' ',V@BANKOFS+>40
     628B A1  
     628C 44
     628D 20  
0279 628E BE      ST ' ',V@BANKOFS+>60
     628F A1  
     6290 64
     6291 20  
0280 6292 87      DCLR @PAD0
     6293 5C  
0281 6294 BC      ST   @BANK,@PAD3        Copy to low byte the bank #
     6295 5F  
     6296 50  
0282 6297 E3      DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
     6298 5E  
     6299 00  
     629A 05
0283 629B BE      ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
     629C E1  
     629D 04
     629E 5E
     629F 2A  
0284          * End update GROM read bank.
0285 62A0 05      B   G@GWAIT
     62A1 61  
     62A2 B4
0286          
0287          *----------------------------------------
0288          * Second screen with a few features.
0289          *----------------------------------------
0290          DUMPSCREEN:
0291 62A3 BE      ST   ' ',V@VEROFS
     62A4 A0  
     62A5 A0
     62A6 20  
0292 62A7 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     62A8 02  
     62A9 5F
     62AA A0  
     62AB A1
     62AC A0  
     62AD A0
0293 62AE 08      FMT
0294 62AF FF      COL LALIGN
     62B0 02  
0295 62B1 FE      ROW LAYOUTVER
     62B2 05  
0296 62B3 1A      HTEX '1 DEC 2 INC DUMP ADDR 3 RET'
     62B4 31  
     62B5 20  
     62B6 44  
     62B7 45  
     62B8 43  
     62B9 20  
     62BA 32  
     62BB 20  
     62BC 49  
     62BD 4E  
     62BE 43  
     62BF 20  
     62C0 44  
     62C1 55  
     62C2 4D  
     62C3 50  
     62C4 20  
     62C5 41  
     62C6 44  
     62C7 44  
     62C8 52  
     62C9 20  
     62CA 33  
     62CB 20  
     62CC 52  
     62CD 45  
     62CE 54  
0297 62CF A0      ROW+ >01
0298 62D0 FF      COL LALIGN
     62D1 02  
0299 62D2 12      HTEX '4 FILL GRAM WITH FF'
     62D3 34  
     62D4 20  
     62D5 46  
     62D6 49  
     62D7 4C  
     62D8 4C  
     62D9 20  
     62DA 47  
     62DB 52  
     62DC 41  
     62DD 4D  
     62DE 20  
     62DF 57  
     62E0 49  
     62E1 54  
     62E2 48  
     62E3 20  
     62E4 46  
     62E5 46  
0300 62E6 A0      ROW+ >01
0301 62E7 FF      COL LALIGN
     62E8 02  
0302 62E9 1B      HTEX '5 COPY 24K GROM 8000 TO GRAM'
     62EA 35  
     62EB 20  
     62EC 43  
     62ED 4F  
     62EE 50  
     62EF 59  
     62F0 20  
     62F1 32  
     62F2 34  
     62F3 4B  
     62F4 20  
     62F5 47  
     62F6 52  
     62F7 4F  
     62F8 4D  
     62F9 20  
     62FA 38  
     62FB 30  
     62FC 30  
     62FD 30  
     62FE 20  
     62FF 54  
     6300 4F  
     6301 20  
     6302 47  
     6303 52  
     6304 41  
     6305 4D  
0303 6306 A0      ROW+ >01
0304 6307 FF      COL LALIGN
     6308 02  
0305 6309 18      HTEX '0 BURN FIRMWARE FROM GRAM'
     630A 30  
     630B 20  
     630C 42  
     630D 55  
     630E 52  
     630F 4E  
     6310 20  
     6311 46  
     6312 49  
     6313 52  
     6314 4D  
     6315 57  
     6316 41  
     6317 52  
     6318 45  
     6319 20  
     631A 46  
     631B 52  
     631C 4F  
     631D 4D  
     631E 20  
     631F 47  
     6320 52  
     6321 41  
     6322 4D  
0306 6323 A1      ROW+ >02
0307 6324 FF      COL LALIGN
     6325 02  
0308 6326 0A      HTEX 'GROM DUMPER'
     6327 47  
     6328 52  
     6329 4F  
     632A 4D  
     632B 20  
     632C 44  
     632D 55  
     632E 4D  
     632F 50  
     6330 45  
     6331 52  
0309 6332 FB      FEND
0310          
0311          MAKEDUMP:
0312 6333 BF      DST   VEROFS+160,@VRAMP
     6334 40  
     6335 01  
     6336 40
0313 6337 86      CLR   @PAD2             ; Row counter
     6338 5E  
0314          DUMP2:
0315 6339 BC      ST    @DUMPA,@PAD0      ; Hi byte off address
     633A 5C  
     633B 62  
0316 633C 06      CALL  HEXOUT
     633D 64  
     633E 3F
0317 633F A3      DADD  2,@VRAMP
     6340 40  
     6341 00  
     6342 02
0318 6343 BC      ST    @DUMPA+1,@PAD0    ; Lo byte off address
     6344 5C  
     6345 63  
0319 6346 06      CALL  HEXOUT
     6347 64  
     6348 3F
0320 6349 BE      ST    ':',V@2(@VRAMP)
     634A E0  
     634B 02
     634C 40
     634D 3A  
0321 634E A3      DADD  3,@VRAMP
     634F 40  
     6350 00  
     6351 03
0322 6352 86      CLR   @PAD1             ; column counter
     6353 5D  
0323          ; Dump 8 bytes from from 16 bit ptr  DUMPA
0324          DUMP1:
0325 6354 33      MOVE  1,G@0(@DUMPA),@PAD0    ; Read from GROM pointed to by DUMPA
     6355 00  
     6356 01
     6357 5C  
     6358 00  
     6359 00
     635A 62
0326 635B 06      CALL  HEXOUT
     635C 64  
     635D 3F
0327 635E BE      ST    ' ',V@2(@VRAMP)
     635F E0  
     6360 02
     6361 40
     6362 20  
0328 6363 A3      DADD  3,@VRAMP
     6364 40  
     6365 00  
     6366 03
0329 6367 91      DINC  @DUMPA
     6368 62  
0330 6369 90      INC   @PAD1
     636A 5D  
0331 636B D6      CEQ   8,@PAD1           ; 8 columns - are we done?
     636C 5D  
     636D 08  
0332 636E 43      BR    DUMP1             ; No: jump to dump1
     636F 54  
0333          ; Advance VRAM pointer, we add and mask to bring pointer to beginning
0334          ; of next line.
0335 6370 A3      DADD  >1F,@VRAMP
     6371 40  
     6372 00  
     6373 1F
0336 6374 B3      DAND  >0FE0,@VRAMP
     6375 40  
     6376 0F  
     6377 E0
0337 6378 90      INC   @PAD2             ; inc Row
     6379 5E  
0338 637A D6      CEQ   8,@PAD2           ; Done with 8 rows?
     637B 5E  
     637C 08  
0339 637D 43      BR    DUMP2             ; No: jump to dump2
     637E 39  
0340 637F A7      DSUB  8*8,@DUMPA           ; Undo the incs in the loop above
     6380 62  
     6381 00  
     6382 40
0341          ; Wait for keypress
0342          KW1:
0343 6383 03      SCAN
0344 6384 43      BR    KW1
     6385 83  
0345 6386 CE      CGT   '0'-1,@SCANKEY
     6387 75  
     6388 2F  
0346 6389 43      BR    KW1               ; Key less than zero -> loop
     638A 83  
0347 638B CE      CGT   '5',@SCANKEY      ; Key over '4' -> loop
     638C 75  
     638D 35  
0348 638E 63      BS    KW1
     638F 83  
0349 6390 A6      SUB   '0',@SCANKEY
     6391 75  
     6392 30  
0350 6393 8A      CASE  @SCANKEY          ; BUGBUG make range check
     6394 75  
0351 6395 43      BR    DKEY0
     6396 BD  
0352 6397 43      BR    DKEY1
     6398 A1  
0353 6399 43      BR    DKEY2
     639A A8  
0354 639B 43      BR    DKEY3
     639C AF  
0355 639D 44      BR    DKEY4
     639E 03  
0356 639F 44      BR    DKEY5
     63A0 1F  
0357          
0358          DKEY1:
0359 63A1 A7      DSUB  64,@DUMPA
     63A2 62  
     63A3 00  
     63A4 40
0360 63A5 05      B     MAKEDUMP
     63A6 63  
     63A7 33
0361          DKEY2:
0362 63A8 A3      DADD  64,@DUMPA
     63A9 62  
     63AA 00  
     63AB 40
0363 63AC 05      B     MAKEDUMP
     63AD 63  
     63AE 33
0364          DKEY3:
0365 63AF BE      ST   ' ',V@VEROFS
     63B0 A0  
     63B1 A0
     63B2 20  
0366 63B3 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     63B4 02  
     63B5 5F
     63B6 A0  
     63B7 A1
     63B8 A0  
     63B9 A0
0367 63BA 05      B     SCREEN1
     63BB 60  
     63BC 56
0368          DKEY0:      ; Burn to Flash
0369          ; Ask for confirmation. Clear a few rows to clarify
0370 63BD BE      ST   ' ',V@VEROFS
     63BE A0  
     63BF A0
     63C0 20  
0371 63C1 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     63C2 02  
     63C3 5F
     63C4 A0  
     63C5 A1
     63C6 A0  
     63C7 A0
0372 63C8 08      FMT
0373 63C9 FF      COL LALIGN
     63CA 02  
0374 63CB FE      ROW LAYOUTVER
     63CC 05  
0375 63CD 15      HTEX '!!PRESS 1 TO CONFIRM!!'
     63CE 21  
     63CF 21  
     63D0 50  
     63D1 52  
     63D2 45  
     63D3 53  
     63D4 53  
     63D5 20  
     63D6 31  
     63D7 20  
     63D8 54  
     63D9 4F  
     63DA 20  
     63DB 43  
     63DC 4F  
     63DD 4E  
     63DE 46  
     63DF 49  
     63E0 52  
     63E1 4D  
     63E2 21  
     63E3 21  
0376 63E4 FB      FEND
0377          WAIT0:
0378 63E5 03      SCAN
0379 63E6 43      BR    WAIT0
     63E7 E5  
0380 63E8 D6      CEQ   '1',@SCANKEY       is the key one?
     63E9 75  
     63EA 31  
0381 63EB 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     63EC A3  
0382          ; Yes, continue to Flash the MCU
0383 63ED 04      BACK  >F3              screen colors: white on some other color
     63EE F3  
0384 63EF BE      ST    'F',V@VALIDIND    ; Command valid indicator
     63F0 A0  
     63F1 83
     63F2 46  
0385 63F3 BE      ST    6,@GCMDBYTE
     63F4 40  
     63F5 06  
0386 63F6 BF      DST   >1234,@GCMDBYTE+2
     63F7 42  
     63F8 12  
     63F9 34
0387 63FA 87      DCLR  @GCMDBYTE+4
     63FB 44  
0388 63FC 87      DCLR  @GCMDBYTE+6
     63FD 46  
0389 63FE 06      CALL  ISSUECMD
     63FF 62  
     6400 5B
0390          ; We probably do not return from this call... GROMMY might be in a funny state
0391 6401 43      BR    MAKEDUMP
     6402 33  
0392          
0393          DKEY4:      ; Command to fill GRAM with >FF, all 24K
0394 6403 BF      DST   >FFFF,@PAD2   ; Fill value, 2 bytes
     6404 5E  
     6405 FF  
     6406 FF
0395 6407 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6408 A0  
     6409 83
     640A 2A  
0396 640B 25      MOVE  >1,@PAD2,G@>0
     640C 00  
     640D 01
     640E 00  
     640F 00
     6410 5E  
0397 6411 21      MOVE  >5FFF,G@>0,G@>1
     6412 5F  
     6413 FF
     6414 00  
     6415 01
     6416 00  
     6417 00
0398 6418 BE      ST    ' ',V@VALIDIND    ; Command valid indicator
     6419 A0  
     641A 83
     641B 20  
0399 641C 05      B     MAKEDUMP
     641D 63  
     641E 33
0400          
0401          DKEY5:
0402 641F BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6420 A0  
     6421 83
     6422 2A  
0403 6423 21      MOVE >2000,G@>8000,G@>0000
     6424 20  
     6425 00
     6426 00  
     6427 00
     6428 80  
     6429 00
0404 642A 21      MOVE >2000,G@>A000,G@>2000
     642B 20  
     642C 00
     642D 20  
     642E 00
     642F A0  
     6430 00
0405 6431 21      MOVE >2000,G@>C000,G@>4000
     6432 20  
     6433 00
     6434 40  
     6435 00
     6436 C0  
     6437 00
0406 6438 BE      ST    ' ',V@VALIDIND    ; Command valid indicator
     6439 A0  
     643A 83
     643B 20  
0407 643C 05      B     MAKEDUMP
     643D 63  
     643E 33
0408          
0409          *----------------------------------------
0410          * Display in HEX the byte in PAD0
0411          *----------------------------------------
0412          HEXOUT:
0413 643F BC      ST   @PAD0,@PAD4
     6440 60  
     6441 5C  
0414 6442 E6      SRL   >04,@PAD4       isolate first nibble
     6443 60  
     6444 04  
0415 6445 CE      CGT   >09,@PAD4       greater than 9?
     6446 60  
     6447 09  
0416 6448 64      BS    HEX1            yes
     6449 4F  
0417 644A A2      ADD   >30,@PAD4       no: make it char 0-9
     644B 60  
     644C 30  
0418 644D 44      BR    HEX2
     644E 52  
0419 644F A2  HEX1: ADD   >37,@PAD4      yes: make it char A-F
     6450 60  
     6451 37  
0420          HEX2:
0421          ; Output first hex digit (most significant digit)
0422 6452 BC      ST    @PAD4,V@0(@VRAMP)
     6453 E0  
     6454 00
     6455 40
     6456 60  
0423          ; Work on 2nd digit
0424 6457 BC      ST    @PAD0,@PAD4     copy number
     6458 60  
     6459 5C  
0425 645A B2      AND   >0F,@PAD4       isolate second nibble
     645B 60  
     645C 0F  
0426 645D CE      CGT   >09,@PAD4       greater than 9?
     645E 60  
     645F 09  
0427 6460 64      BS    HEX3          yes
     6461 67  
0428 6462 A2      ADD   >30,@PAD4       no: make it char 0-9
     6463 60  
     6464 30  
0429 6465 44      BR    HEX4
     6466 6A  
0430 6467 A2  HEX3  ADD   >37,@PAD4       yes: make it char A-F
     6468 60  
     6469 37  
0431          HEX4:
0432          ; Output 2nd hex digit (least significant digit)
0433 646A BC      ST    @PAD4,V@1(@VRAMP)
     646B E0  
     646C 01
     646D 40
     646E 60  
0434 646F 00      RTN
0435          
0436          
0437          *----------------------------------------
0438          * Read grommy2 version, update on screen.
0439          * Also read and set bank & shadow values.
0440          *----------------------------------------
0441          SHOW_VERSION
0442 6470 06      CALL G@GINITCMD
     6471 64  
     6472 D5
0443 6473 06      CALL G@GSENDCMD
     6474 64  
     6475 DC
0444          * Check result of command - did we get OK?
0445 6476 31      MOVE 2,G@HWIF,@PAD0
     6477 00  
     6478 02
     6479 5C  
     647A 5F  
     647B F0
0446 647C D7      DCEQ >4F4B,@PAD0        ; did we get OK?
     647D 5C  
     647E 4F  
     647F 4B
0447 6480 64      BS   VER_OK             ; Yes: go to VER_OK
     6481 8D  
0448          ** No grommy2 detected. Put in dummy data.
0449 6482 87      DCLR @PAD2              ; Major and minor zero
     6483 5E  
0450 6484 BE      ST   99,@PAD4           ; Build 99
     6485 60  
     6486 63  
0451 6487 86      CLR  @SHADOW
     6488 51  
0452 6489 86      CLR  @BANK
     648A 50  
0453 648B 44      BR   VER1
     648C AA  
0454          VER_OK:     ; grommy responded, read data
0455          * Copy values from GROM IF to pad
0456 648D 31      MOVE 3,G@HWIF+8,@PAD2
     648E 00  
     648F 03
     6490 5E  
     6491 5F  
     6492 F8
0457          * Get active bank from grommy2
0458 6493 31      MOVE 1,G@HWIF+3,@BANK
     6494 00  
     6495 01
     6496 50  
     6497 5F  
     6498 F3
0459 6499 B2      AND  >0F,@BANK
     649A 50  
     649B 0F  
0460 649C D6      CEQ  8,@BANK            ; Is GRAM bank 8 selected?
     649D 50  
     649E 08  
0461 649F 44      BR   NOGRAM1            ; No, we're good
     64A0 A4  
0462 64A1 BE      ST   3,@BANK            ; yes, convert to 3 here
     64A2 50  
     64A3 03  
0463          NOGRAM1:
0464          * Get RAM shadow from grommy2
0465 64A4 31      MOVE 1,G@HWIF+4,@SHADOW
     64A5 00  
     64A6 01
     64A7 51  
     64A8 5F  
     64A9 F4
0466          VER1:
0467          * Show major version in p2
0468 64AA BE      ST  '0',@PAD0
     64AB 5C  
     64AC 30  
0469 64AD A0      ADD @PAD2,@PAD0
     64AE 5C  
     64AF 5E  
0470 64B0 BC      ST  @PAD0,V@VEROFS+>A        Write to VRAM
     64B1 A0  
     64B2 AA
     64B3 5C  
0471          * Show minor version in p3
0472 64B4 BE      ST  '0',@PAD0
     64B5 5C  
     64B6 30  
0473 64B7 A0      ADD @PAD3,@PAD0
     64B8 5C  
     64B9 5F  
0474 64BA BC      ST  @PAD0,V@VEROFS+>C        Write to VRAM
     64BB A0  
     64BC AC
     64BD 5C  
0475          * Show build version in p4. The build is two digits from 0 to 99
0476 64BE 86      CLR  @PAD0              Zero fill as the value to divide is 16 bits§
     64BF 5C  
0477 64C0 BC      ST   @PAD4,@PAD1
     64C1 5D  
     64C2 60  
0478 64C3 AE      DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
     64C4 5C  
     64C5 0A  
0479 64C6 A2      ADD  '0',@PAD0
     64C7 5C  
     64C8 30  
0480 64C9 BC      ST   @PAD0,V@VEROFS+>E      Write to VRAM
     64CA A0  
     64CB AE
     64CC 5C  
0481 64CD A2      ADD  '0',@PAD1          Remainder
     64CE 5D  
     64CF 30  
0482 64D0 BC      ST   @PAD1,V@VEROFS+>F      Write to VRAM
     64D1 A0  
     64D2 AF
     64D3 5D  
0483 64D4 00      RTN
0484          
0485          
0486          *----------------------------------------
0487          * Init command buffer in pad
0488          *----------------------------------------
0489          GINITCMD
0490 64D5 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
     64D6 00  
     64D7 10
     64D8 40  
     64D9 64  
     64DA E9
0491 64DB 00         RTN
0492          
0493          *----------------------------------------
0494          * Send command to grommy2
0495          *----------------------------------------
0496          GSENDCMD
0497 64DC BC         ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
     64DD 41  
     64DE 40  
0498 64DF BA         XOR   >FF,@GCMDBYTE+1
     64E0 41  
     64E1 FF  
0499 64E2 25         MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
     64E3 00  
     64E4 10
     64E5 5F  
     64E6 F0
     64E7 40  
0500 64E8 00         RTN
0501          
0502          
0503          GROMMY_DAT
0504 64E9 00         DATA   >00FF,>003F,>0000,>0000
     64EA FF
     64EB 00  
     64EC 3F
     64ED 00  
     64EE 00
     64EF 00  
     64F0 00
0505 64F1 45         TEXT 'EPGROMMY'
     64F2 50  
     64F3 47  
     64F4 52  
     64F5 4F  
     64F6 4D  
     64F7 4D  
     64F8 59  
0506          
0507          
0508          DENSE_FONT ; Define character cells wihtin 4x8 cell
0509          ; Numnbers 0 and 1
0510 64F9 22          BYTE >22
0511 64FA 56          BYTE >56
0512 64FB 52          BYTE >52
0513 64FC 52          BYTE >52
0514 64FD 52          BYTE >52
0515 64FE 52          BYTE >52
0516 64FF 27          BYTE >27
0517 6500 00          BYTE >00
0518          ; Define a cell with 2 and 3
0519 6501 26          BYTE >26
0520 6502 51          BYTE >51
0521 6503 11          BYTE >11
0522 6504 26          BYTE >26
0523 6505 41          BYTE >41
0524 6506 41          BYTE >41
0525 6507 76          BYTE >76
0526 6508 00          BYTE >00
0527          ; Define a cell with 4 and 5
0528 6509 17          BYTE >17
0529 650A 34          BYTE >34
0530 650B 54          BYTE >54
0531 650C 76          BYTE >76
0532 650D 11          BYTE >11
0533 650E 11          BYTE >11
0534 650F 16          BYTE >16
0535 6510 00          BYTE >00
0536          ; Define a cell with 6 and 7
0537 6511 37          BYTE >37
0538 6512 41          BYTE >41
0539 6513 62          BYTE >62
0540 6514 52          BYTE >52
0541 6515 52          BYTE >52
0542 6516 52          BYTE >52
0543 6517 22          BYTE >22
0544 6518 00          BYTE >00
0545          ; Define a cell with 8 and 9
0546 6519 22          BYTE >22
0547 651A 55          BYTE >55
0548 651B 55          BYTE >55
0549 651C 23          BYTE >23
0550 651D 51          BYTE >51
0551 651E 51          BYTE >51
0552 651F 26          BYTE >26
0553 6520 00          BYTE >00
0554          ; Define a cell with A and B
0555 6521 26          BYTE >26
0556 6522 55          BYTE >55
0557 6523 55          BYTE >55
0558 6524 76          BYTE >76
0559 6525 55          BYTE >55
0560 6526 55          BYTE >55
0561 6527 56          BYTE >56
0562 6528 00          BYTE >00
0563          ; Define a cell with C and D
0564 6529 36          BYTE >36
0565 652A 45          BYTE >45
0566 652B 45          BYTE >45
0567 652C 45          BYTE >45
0568 652D 45          BYTE >45
0569 652E 45          BYTE >45
0570 652F 36          BYTE >36
0571 6530 00          BYTE >00
0572          ; Define a cell with E and F
0573 6531 77          BYTE >77
0574 6532 44          BYTE >44
0575 6533 44          BYTE >44
0576 6534 66          BYTE >66
0577 6535 44          BYTE >44
0578 6536 44          BYTE >44
0579 6537 74          BYTE >74
0580 6538 00          BYTE >00
0581          
0582          * Test code copied from Mini Memory
0583 6539 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
     653A 00  
     653B 10
     653C 40  
     653D 64  
     653E E9
0584 653F BC         ST    @>839A,@>8340                Copy command byte
     6540 40  
     6541 80  
     6542 9A
0585 6543 BC         ST    @>839A,@>8341                The second byte is its complement
     6544 41  
     6545 80  
     6546 9A
0586 6547 BA         XOR   >FF,@>8341
     6548 41  
     6549 FF  
0587 654A BC         ST    @>839B,@>8342                Copy p2.
     654B 42  
     654C 80  
     654D 9B
0588 654E 25         MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
     654F 00  
     6550 10
     6551 5F  
     6552 F0
     6553 40  
0589 6554 00         RTN
0590          
0591          
0592          *----------------------------------------
0593          * VDP setup for module
0594          *----------------------------------------
0595          GVDPSETUP
0596 6555 BE      ST    >D0,V@>0300      no sprites
     6556 A3  
     6557 00
     6558 D0  
0597 6559 BE      ST    >F5,V@>0380      init color table as white on blue for all chars
     655A A3  
     655B 80
     655C F5  
0598 655D 35      MOVE  >001F,V@>0380,V@>0381
     655E 00  
     655F 1F
     6560 A3  
     6561 81
     6562 A3  
     6563 80
0599 6564 07      ALL   >20              erase screen
     6565 20  
0600 6566 04      BACK  >F5              screen colors: white on light blue
     6567 F5  
0601 6568 00      RTN
0602          
0603              COPY 'screen.gpl'
              > screen.gpl
0001          * Character definitions
0002 6569 00  GUDG96	BYTE >00,>00,>00,>00,>00,>00,>00,>00 ; Character 96
     656A 00  
     656B 00  
     656C 00  
     656D 00  
     656E 00  
     656F 00  
     6570 00  
0003 6571 00  GUDG97	BYTE >00,>00,>70,>43,>72,>42,>42,>72 ; Character 97
     6572 00  
     6573 70  
     6574 43  
     6575 72  
     6576 42  
     6577 42  
     6578 72  
0004 6579 00  GUDG98	BYTE >00,>28,>08,>A9,>2A,>2E,>2B,>29 ; Character 98
     657A 28  
     657B 08  
     657C A9  
     657D 2A  
     657E 2E  
     657F 2B  
     6580 29  
0005 6581 00  GUDG99	BYTE >00,>00,>0F,>09,>09,>0E,>08,>08 ; Character 99
     6582 00  
     6583 0F  
     6584 09  
     6585 09  
     6586 0E  
     6587 08  
     6588 08  
0006 6589 00  GUDG100	BYTE >00,>40,>00,>46,>49,>4F,>48,>46 ; Character 100
     658A 40  
     658B 00  
     658C 46  
     658D 49  
     658E 4F  
     658F 48  
     6590 46  
0007 6591 00  GUDG101	BYTE >00,>41,>41,>79,>49,>49,>49,>49 ; Character 101
     6592 41  
     6593 41  
     6594 79  
     6595 49  
     6596 49  
     6597 49  
     6598 49  
0008 6599 00  GUDG102	BYTE >00,>40,>40,>1C,>10,>0C,>06,>1C ; Character 102
     659A 40  
     659B 40  
     659C 1C  
     659D 10  
     659E 0C  
     659F 06  
     65A0 1C  
0009 65A1 00  GUDG103	BYTE >00,>00,>00,>00,>00,>00,>1C,>3F ; Character 103
     65A2 00  
     65A3 00  
     65A4 00  
     65A5 00  
     65A6 00  
     65A7 1C  
     65A8 3F  
0010 65A9 00  GUDG104	BYTE >00,>00,>00,>00,>00,>00,>00,>3F ; Character 104
     65AA 00  
     65AB 00  
     65AC 00  
     65AD 00  
     65AE 00  
     65AF 00  
     65B0 3F  
0011 65B1 00  GUDG105	BYTE >00,>00,>00,>00,>00,>00,>00,>9C ; Character 105
     65B2 00  
     65B3 00  
     65B4 00  
     65B5 00  
     65B6 00  
     65B7 00  
     65B8 9C  
0012 65B9 00  GUDG106	BYTE >00,>00,>00,>00,>00,>00,>07,>3F ; Character 106
     65BA 00  
     65BB 00  
     65BC 00  
     65BD 00  
     65BE 00  
     65BF 07  
     65C0 3F  
0013 65C1 00  GUDG107	BYTE >00,>00,>00,>00,>00,>00,>00,>F0 ; Character 107
     65C2 00  
     65C3 00  
     65C4 00  
     65C5 00  
     65C6 00  
     65C7 00  
     65C8 F0  
0014 65C9 00  GUDG108	BYTE >00,>00,>00,>00,>00,>00,>06,>9F ; Character 108
     65CA 00  
     65CB 00  
     65CC 00  
     65CD 00  
     65CE 00  
     65CF 06  
     65D0 9F  
0015 65D1 00  GUDG109	BYTE >00,>00,>00,>00,>00,>00,>03,>8F ; Character 109
     65D2 00  
     65D3 00  
     65D4 00  
     65D5 00  
     65D6 00  
     65D7 03  
     65D8 8F  
0016 65D9 00  GUDG110	BYTE >00,>00,>00,>00,>00,>00,>00,>C7 ; Character 110
     65DA 00  
     65DB 00  
     65DC 00  
     65DD 00  
     65DE 00  
     65DF 00  
     65E0 C7  
0017 65E1 00  GUDG111	BYTE >00,>00,>00,>00,>00,>00,>00,>F3 ; Character 111
     65E2 00  
     65E3 00  
     65E4 00  
     65E5 00  
     65E6 00  
     65E7 00  
     65E8 F3  
0018 65E9 00  GUDG112	BYTE >00,>00,>00,>00,>00,>00,>C0,>F1 ; Character 112
     65EA 00  
     65EB 00  
     65EC 00  
     65ED 00  
     65EE 00  
     65EF C0  
     65F0 F1  
0019 65F1 00  GUDG113	BYTE >00,>00,>00,>00,>00,>00,>60,>F8 ; Character 113
     65F2 00  
     65F3 00  
     65F4 00  
     65F5 00  
     65F6 00  
     65F7 60  
     65F8 F8  
0020 65F9 00  GUDG114	BYTE >00,>00,>00,>00,>00,>00,>00,>FC ; Character 114
     65FA 00  
     65FB 00  
     65FC 00  
     65FD 00  
     65FE 00  
     65FF 00  
     6600 FC  
0021 6601 00  GUDG115	BYTE >00,>03,>0F,>1F,>3F,>3F,>7F,>7E ; Character 115
     6602 03  
     6603 0F  
     6604 1F  
     6605 3F  
     6606 3F  
     6607 7F  
     6608 7E  
0022 6609 00  GUDG116	BYTE >00,>F0,>FC,>FE,>FF,>FF,>3F,>3F ; Character 116
     660A F0  
     660B FC  
     660C FE  
     660D FF  
     660E FF  
     660F 3F  
     6610 3F  
0023 6611 00  GUDG117	BYTE >00,>00,>00,>00,>00,>80,>80,>80 ; Character 117
     6612 00  
     6613 00  
     6614 00  
     6615 00  
     6616 80  
     6617 80  
     6618 80  
0024 6619 7F  GUDG118	BYTE >7F,>FF,>FF,>FE,>FE,>FE,>FE,>FE ; Character 118
     661A FF  
     661B FF  
     661C FE  
     661D FE  
     661E FE  
     661F FE  
     6620 FE  
0025 6621 FF  GUDG119	BYTE >FF,>FF,>FF,>7F,>7F,>7F,>7F,>7F ; Character 119
     6622 FF  
     6623 FF  
     6624 7F  
     6625 7F  
     6626 7F  
     6627 7F  
     6628 7F  
0026 6629 3F  GUDG120	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>3F,>3F ; Character 120
     662A 3F  
     662B 3F  
     662C 3F  
     662D 3F  
     662E 3F  
     662F 3F  
     6630 3F  
0027 6631 BC  GUDG121	BYTE >BC,>FC,>FC,>FD,>FD,>FD,>F9,>C1 ; Character 121
     6632 FC  
     6633 FC  
     6634 FD  
     6635 FD  
     6636 FD  
     6637 F9  
     6638 C1  
0028 6639 7F  GUDG122	BYTE >7F,>FF,>FF,>FC,>FC,>FC,>FC,>FC ; Character 122
     663A FF  
     663B FF  
     663C FC  
     663D FC  
     663E FC  
     663F FC  
     6640 FC  
0029 6641 F8  GUDG123	BYTE >F8,>FC,>FE,>FE,>FE,>FE,>FE,>FE ; Character 123
     6642 FC  
     6643 FE  
     6644 FE  
     6645 FE  
     6646 FE  
     6647 FE  
     6648 FE  
0030 6649 FF  GUDG124	BYTE >FF,>FF,>FF,>9F,>9F,>9F,>9F,>9F ; Character 124
     664A FF  
     664B FF  
     664C 9F  
     664D 9F  
     664E 9F  
     664F 9F  
     6650 9F  
0031 6651 DF  GUDG125	BYTE >DF,>FF,>FF,>E7,>C7,>C7,>C7,>C7 ; Character 125
     6652 FF  
     6653 FF  
     6654 E7  
     6655 C7  
     6656 C7  
     6657 C7  
     6658 C7  
0032 6659 E7  GUDG126	BYTE >E7,>E7,>E7,>F7,>F7,>F7,>F7,>F7 ; Character 126
     665A E7  
     665B E7  
     665C F7  
     665D F7  
     665E F7  
     665F F7  
     6660 F7  
0033 6661 FF  GUDG127	BYTE >FF,>FF,>FF,>F3,>F3,>F3,>F3,>F3 ; Character 127
     6662 FF  
     6663 FF  
     6664 F3  
     6665 F3  
     6666 F3  
     6667 F3  
     6668 F3  
0034 6669 FB  GUDG128	BYTE >FB,>FF,>FF,>FC,>F8,>F8,>F8,>F8 ; Character 128
     666A FF  
     666B FF  
     666C FC  
     666D F8  
     666E F8  
     666F F8  
     6670 F8  
0035 6671 FC  GUDG129	BYTE >FC,>FC,>FC,>FE,>FE,>FE,>FE,>FE ; Character 129
     6672 FC  
     6673 FC  
     6674 FE  
     6675 FE  
     6676 FE  
     6677 FE  
     6678 FE  
0036 6679 FE  GUDG130	BYTE >FE,>FE,>7E,>7E,>7E,>7E,>7E,>3F ; Character 130
     667A FE  
     667B 7E  
     667C 7E  
     667D 7E  
     667E 7E  
     667F 7E  
     6680 3F  
0037 6681 3F  GUDG131	BYTE >3F,>7F,>7F,>7F,>7E,>7E,>7E,>7E ; Character 131
     6682 7F  
     6683 7F  
     6684 7F  
     6685 7E  
     6686 7E  
     6687 7E  
     6688 7E  
0038 6689 7E  GUDG132	BYTE >7E,>7E,>7E,>00,>00,>00,>00,>01 ; Character 132
     668A 7E  
     668B 7E  
     668C 00  
     668D 00  
     668E 00  
     668F 00  
     6690 01  
0039 6691 3F  GUDG133	BYTE >3F,>3F,>3F,>7F,>7F,>FF,>FF,>FE ; Character 133
     6692 3F  
     6693 3F  
     6694 7F  
     6695 7F  
     6696 FF  
     6697 FF  
     6698 FE  
0040 6699 80  GUDG134	BYTE >80,>80,>80,>80,>00,>00,>00,>00 ; Character 134
     669A 80  
     669B 80  
     669C 80  
     669D 00  
     669E 00  
     669F 00  
     66A0 00  
0041 66A1 FE  GUDG135	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FF ; Character 135
     66A2 FE  
     66A3 FE  
     66A4 FE  
     66A5 FE  
     66A6 FE  
     66A7 FE  
     66A8 FF  
0042 66A9 7F  GUDG136	BYTE >7F,>7F,>7F,>7F,>7F,>7F,>7F,>FF ; Character 136
     66AA 7F  
     66AB 7F  
     66AC 7F  
     66AD 7F  
     66AE 7F  
     66AF 7F  
     66B0 FF  
0043 66B1 C1  GUDG137	BYTE >C1,>81,>81,>81,>81,>81,>81,>81 ; Character 137
     66B2 81  
     66B3 81  
     66B4 81  
     66B5 81  
     66B6 81  
     66B7 81  
     66B8 81  
0044 66B9 FC  GUDG138	BYTE >FC,>FC,>FC,>FC,>FC,>FC,>FC,>FC ; Character 138
     66BA FC  
     66BB FC  
     66BC FC  
     66BD FC  
     66BE FC  
     66BF FC  
     66C0 FC  
0045 66C1 FE  GUDG139	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FE ; Character 139
     66C2 FE  
     66C3 FE  
     66C4 FE  
     66C5 FE  
     66C6 FE  
     66C7 FE  
     66C8 FE  
0046 66C9 9F  GUDG140	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>9F,>9F ; Character 140
     66CA 9F  
     66CB 9F  
     66CC 9F  
     66CD 9F  
     66CE 9F  
     66CF 9F  
     66D0 9F  
0047 66D1 C7  GUDG141	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>C7,>C7 ; Character 141
     66D2 C7  
     66D3 C7  
     66D4 C7  
     66D5 C7  
     66D6 C7  
     66D7 C7  
     66D8 C7  
0048 66D9 F7  GUDG142	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>F7,>F7 ; Character 142
     66DA F7  
     66DB F7  
     66DC F7  
     66DD F7  
     66DE F7  
     66DF F7  
     66E0 F7  
0049 66E1 F3  GUDG143	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>F3,>F3 ; Character 143
     66E2 F3  
     66E3 F3  
     66E4 F3  
     66E5 F3  
     66E6 F3  
     66E7 F3  
     66E8 F3  
0050 66E9 F8  GUDG144	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>F8,>F8 ; Character 144
     66EA F8  
     66EB F8  
     66EC F8  
     66ED F8  
     66EE F8  
     66EF F8  
     66F0 F8  
0051 66F1 3F  GUDG145	BYTE >3F,>3F,>3F,>3F,>1F,>1F,>1F,>1F ; Character 145
     66F2 3F  
     66F3 3F  
     66F4 3F  
     66F5 1F  
     66F6 1F  
     66F7 1F  
     66F8 1F  
0052 66F9 7E  GUDG146	BYTE >7E,>7E,>7E,>7E,>FC,>FC,>FC,>FC ; Character 146
     66FA 7E  
     66FB 7E  
     66FC 7E  
     66FD FC  
     66FE FC  
     66FF FC  
     6700 FC  
0053 6701 01  GUDG147	BYTE >01,>03,>07,>07,>0F,>0F,>1F,>3F ; Character 147
     6702 03  
     6703 07  
     6704 07  
     6705 0F  
     6706 0F  
     6707 1F  
     6708 3F  
0054 6709 FC  GUDG148	BYTE >FC,>FC,>F8,>F8,>F0,>E0,>E0,>C0 ; Character 148
     670A FC  
     670B F8  
     670C F8  
     670D F0  
     670E E0  
     670F E0  
     6710 C0  
0055 6711 7F  GUDG149	BYTE >7F,>7F,>3F,>00,>FE,>FE,>FF,>7F ; Character 149
     6712 7F  
     6713 3F  
     6714 00  
     6715 FE  
     6716 FE  
     6717 FF  
     6718 7F  
0056 6719 FF  GUDG150	BYTE >FF,>FF,>7F,>7F,>7F,>7F,>FF,>FE ; Character 150
     671A FF  
     671B 7F  
     671C 7F  
     671D 7F  
     671E 7F  
     671F FF  
     6720 FE  
0057 6721 3F  GUDG151	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>00,>00 ; Character 151
     6722 3F  
     6723 3F  
     6724 3F  
     6725 3F  
     6726 3F  
     6727 00  
     6728 00  
0058 6729 81  GUDG152	BYTE >81,>81,>80,>80,>80,>80,>00,>00 ; Character 152
     672A 81  
     672B 80  
     672C 80  
     672D 80  
     672E 80  
     672F 00  
     6730 00  
0059 6731 FC  GUDG153	BYTE >FC,>FC,>FF,>FF,>7F,>1F,>00,>00 ; Character 153
     6732 FC  
     6733 FF  
     6734 FF  
     6735 7F  
     6736 1F  
     6737 00  
     6738 00  
0060 6739 FE  GUDG154	BYTE >FE,>FE,>FC,>FC,>F8,>E0,>00,>00 ; Character 154
     673A FE  
     673B FC  
     673C FC  
     673D F8  
     673E E0  
     673F 00  
     6740 00  
0061 6741 9F  GUDG155	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>00,>00 ; Character 155
     6742 9F  
     6743 9F  
     6744 9F  
     6745 9F  
     6746 9F  
     6747 00  
     6748 00  
0062 6749 C7  GUDG156	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>00,>00 ; Character 156
     674A C7  
     674B C7  
     674C C7  
     674D C7  
     674E C7  
     674F 00  
     6750 00  
0063 6751 F7  GUDG157	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>00,>00 ; Character 157
     6752 F7  
     6753 F7  
     6754 F7  
     6755 F7  
     6756 F7  
     6757 00  
     6758 00  
0064 6759 F3  GUDG158	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>00,>00 ; Character 158
     675A F3  
     675B F3  
     675C F3  
     675D F3  
     675E F3  
     675F 00  
     6760 00  
0065 6761 F8  GUDG159	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>00,>00 ; Character 159
     6762 F8  
     6763 F8  
     6764 F8  
     6765 F8  
     6766 F8  
     6767 00  
     6768 00  
0066 6769 FE  GUDG160	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>00,>00 ; Character 160
     676A FE  
     676B FE  
     676C FE  
     676D FE  
     676E FE  
     676F 00  
     6770 00  
0067 6771 1F  GUDG161	BYTE >1F,>0F,>0F,>0F,>0F,>1F,>3F,>3F ; Character 161
     6772 0F  
     6773 0F  
     6774 0F  
     6775 0F  
     6776 1F  
     6777 3F  
     6778 3F  
0068 6779 FC  GUDG162	BYTE >FC,>FC,>FC,>FC,>F8,>F8,>F8,>F0 ; Character 162
     677A FC  
     677B FC  
     677C FC  
     677D F8  
     677E F8  
     677F F8  
     6780 F0  
0069 6781 3F  GUDG163	BYTE >3F,>7F,>7F,>7F,>7F,>7F,>00,>00 ; Character 163
     6782 7F  
     6783 7F  
     6784 7F  
     6785 7F  
     6786 7F  
     6787 00  
     6788 00  
0070 6789 80  GUDG164	BYTE >80,>FF,>FF,>FF,>FF,>FF,>00,>00 ; Character 164
     678A FF  
     678B FF  
     678C FF  
     678D FF  
     678E FF  
     678F 00  
     6790 00  
0071 6791 00  GUDG165	BYTE >00,>00,>80,>80,>80,>80,>00,>00 ; Character 165
     6792 00  
     6793 80  
     6794 80  
     6795 80  
     6796 80  
     6797 00  
     6798 00  
0072 6799 3F  GUDG166	BYTE >3F,>0F,>00,>00,>00,>00,>00,>00 ; Character 166
     679A 0F  
     679B 00  
     679C 00  
     679D 00  
     679E 00  
     679F 00  
     67A0 00  
0073 67A1 FC  GUDG167	BYTE >FC,>F0,>00,>00,>00,>00,>00,>00 ; Character 167
     67A2 F0  
     67A3 00  
     67A4 00  
     67A5 00  
     67A6 00  
     67A7 00  
     67A8 00  
0074 67A9 3F  GUDG168	BYTE >3F,>00,>00,>00,>00,>00,>00,>00 ; Character 168
     67AA 00  
     67AB 00  
     67AC 00  
     67AD 00  
     67AE 00  
     67AF 00  
     67B0 00  
0075 67B1 E0  GUDG169	BYTE >E0,>00,>00,>00,>00,>00,>00,>00 ; Character 169
     67B2 00  
     67B3 00  
     67B4 00  
     67B5 00  
     67B6 00  
     67B7 00  
     67B8 00  
0076 67B9 3E  GUDG170	BYTE >3E,>60,>60,>60,>60,>60,>32,>1E ; Character 170
     67BA 60  
     67BB 60  
     67BC 60  
     67BD 60  
     67BE 60  
     67BF 32  
     67C0 1E  
0077 67C1 3E  GUDG171	BYTE >3E,>66,>43,>C3,>43,>62,>76,>3C ; Character 171
     67C2 66  
     67C3 43  
     67C4 C3  
     67C5 43  
     67C6 62  
     67C7 76  
     67C8 3C  
0078 67C9 63  GUDG172	BYTE >63,>73,>7B,>6F,>6F,>67,>67,>63 ; Character 172
     67CA 73  
     67CB 7B  
     67CC 6F  
     67CD 6F  
     67CE 67  
     67CF 67  
     67D0 63  
0079 67D1 7C  GUDG173	BYTE >7C,>60,>60,>7C,>60,>60,>60,>60 ; Character 173
     67D2 60  
     67D3 60  
     67D4 7C  
     67D5 60  
     67D6 60  
     67D7 60  
     67D8 60  
0080 67D9 C7  GUDG174	BYTE >C7,>CC,>CC,>CC,>CC,>CC,>CE,>C7 ; Character 174
     67DA CC  
     67DB CC  
     67DC CC  
     67DD CC  
     67DE CC  
     67DF CE  
     67E0 C7  
0081 67E1 C0  GUDG175	BYTE >C0,>00,>00,>C0,>E0,>60,>E0,>C0 ; Character 175
     67E2 00  
     67E3 00  
     67E4 C0  
     67E5 E0  
     67E6 60  
     67E7 E0  
     67E8 C0  
0082 67E9 61  GLINE0_25 BYTE >61,>62,>63,>64,>65,>66,>67,>68,>68,>69,>6A,>6B,>68,>6C,>6D,>6E,>6F,>70,>71,>72,>68,>73,>74,>75
     67EA 62  
     67EB 63  
     67EC 64  
     67ED 65  
     67EE 66  
     67EF 67  
     67F0 68  
     67F1 68  
     67F2 69  
     67F3 6A  
     67F4 6B  
     67F5 68  
     67F6 6C  
     67F7 6D  
     67F8 6E  
     67F9 6F  
     67FA 70  
     67FB 71  
     67FC 72  
     67FD 68  
     67FE 73  
     67FF 74  
     6800 75  
0083 6801 76  GLINE1_25 BYTE >76,>77,>78,>79,>7A,>7B,>78,>7C,>7D,>7E,>7F,>80,>81,>82,>83,>84,>85,>86
     6802 77  
     6803 78  
     6804 79  
     6805 7A  
     6806 7B  
     6807 78  
     6808 7C  
     6809 7D  
     680A 7E  
     680B 7F  
     680C 80  
     680D 81  
     680E 82  
     680F 83  
     6810 84  
     6811 85  
     6812 86  
0084 6813 87  GLINE2_24 BYTE >87,>88,>78,>89,>8A,>8B,>78,>8C,>8D,>8E,>8F,>90,>8B,>91,>92,>93,>94
     6814 88  
     6815 78  
     6816 89  
     6817 8A  
     6818 8B  
     6819 78  
     681A 8C  
     681B 8D  
     681C 8E  
     681D 8F  
     681E 90  
     681F 8B  
     6820 91  
     6821 92  
     6822 93  
     6823 94  
0085 6824 95  GLINE3_25 BYTE >95,>96,>97,>98,>99,>9A,>97,>9B,>9C,>9D,>9E,>9F,>A0,>A1,>A2,>A3,>A4,>A5
     6825 96  
     6826 97  
     6827 98  
     6828 99  
     6829 9A  
     682A 97  
     682B 9B  
     682C 9C  
     682D 9D  
     682E 9E  
     682F 9F  
     6830 A0  
     6831 A1  
     6832 A2  
     6833 A3  
     6834 A4  
     6835 A5  
0086 6836 A6  GLINE4_9 BYTE >A6,>A7
     6837 A7  
0087 6838 A8  GLINE4_28 BYTE >A8,>A9,>AA,>AB,>AC,>AD,>AE,>AF
     6839 A9  
     683A AA  
     683B AB  
     683C AC  
     683D AD  
     683E AE  
     683F AF  
0088          
0089          G_SCR1
0090 6840 31      MOVE >0280,G@GUDG96,V@>0B00 ; Copy our screen chars
     6841 02  
     6842 80
     6843 AB  
     6844 00
     6845 65  
     6846 69
0091          
0092 6847 31  	MOVE >0018,G@GLINE0_25,V@>0001
     6848 00  
     6849 18
     684A A0  
     684B 01
     684C 67  
     684D E9
0093 684E 31  	MOVE >0012,G@GLINE1_25,V@>0027
     684F 00  
     6850 12
     6851 A0  
     6852 27
     6853 68  
     6854 01
0094 6855 31  	MOVE >0011,G@GLINE2_24,V@>0047
     6856 00  
     6857 11
     6858 A0  
     6859 47
     685A 68  
     685B 13
0095 685C 31  	MOVE >0012,G@GLINE3_25,V@>0067
     685D 00  
     685E 12
     685F A0  
     6860 67
     6861 68  
     6862 24
0096 6863 31  	MOVE >0002,G@GLINE4_9,V@>0087
     6864 00  
     6865 02
     6866 A0  
     6867 87
     6868 68  
     6869 36
0097 686A 31  	MOVE >0008,G@GLINE4_28,V@>0094
     686B 00  
     686C 08
     686D A0  
     686E 94
     686F 68  
     6870 38
0098          
0099 6871 00      RTN
0100          
