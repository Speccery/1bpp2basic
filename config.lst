XGA99 CROSS-ASSEMBLER   VERSION 3.0.1
              > config.gpl
0001          * config.gpl
0002          * Configurator for GROMMY2
0003          * At this point this is just a demo how to render the generated screen.gpl
0004          * EP 2023-11-26
0005          *
0006          * Compile the GPL code to binary with:
0007          * xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
0008          * output file is config.bin, since the filename ends with g it is treated
0009          * by an emulator such as js99er.net as a GROM file.
0010          *
0011          * This file includes the screen.gpl file at the very end.
0012          *
0013          
0014          LALIGN    EQU >02              Left alignment of text
0015          LALIGN2   EQU >03
0016          LAYOUTVER EQU 5         Row for Version number
0017          LAYOUTBAN EQU 8        Row for selected bank display
0018          VEROFS    EQU 32*LAYOUTVER
0019          VALIDIND  EQU VEROFS-29         ; Indicator for valid command
0020          
0021          * A few variables for the grommy2 config to use.
0022          * I am not sure if these are free to use, but I will try :)
0023          XREG    EQU >832C   ; ** Program text or token pointer (in BASIC?)
0024          YREG    EQU >832E   ; ** Pointer to line number tale (in BASIC)
0025          ZREG    EQU >8330   ; ** Start of line number table pointer (in BASIC)
0026          ; >8332 .. 8337 seem to contain pointers also used by BASIC not GPL
0027          
0028          * Grommy2 command buffer in scratchpad
0029          GCMDBYTE EQU >8340
0030          GCMDP2   EQU >8342
0031          GCMDP3   EQU >8343
0032          GCMDP4   EQU >8344
0033          GCMDP5   EQU >8345
0034          GCMDP6   EQU >8346
0035          GCMDP7   EQU >8347
0036          
0037          BANK    EQU >8350           Active bank
0038          SHADOW  EQU >8351           Shadow enable / disable
0039          PAD0    EQU >835C
0040          PAD1    EQU >835D
0041          PAD2    EQU >835E
0042          PAD3    EQU >835F
0043          PAD4    EQU >8360
0044          PAD5    EQU >8361
0045          DUMPA   EQU >8362           ; GROM Dump address
0046          VRAMP   EQU >8340           ; VRAM ptr overlays GCMDBYTE
0047          
0048          SCANKEY EQU >8375
0049          VDPTIMER EQU >8379          ; Incremented by VDP interrupts
0050          * Hardware interface address
0051          HWIF     EQU >5FF0
0052          
0053          
0054 6000 AA  G6000  DATA >AA01             standard header  version 1
     6001 01
0055 6002 00         DATA >0000             # of programs 0
     6003 00
0056 6004 00         DATA >0000             no power up
     6005 00
0057 6006 60         DATA G6010             program
     6007 10
0058 6008 00         DATA >0000             DSRs
     6009 00
0059 600A 00         DATA >0000             subprograms
     600B 00
0060 600C 00         DATA >0000
     600D 00
0061 600E 00         DATA >0000
     600F 00
0062          
0063 6010 00  G6010  DATA >0000         * No next program
     6011 00
0064 6012 60         DATA GPROG
     6013 2A
0065 6014 0E         STRI 'GROMMY2 CONFIG'
     6015 47  
     6016 52  
     6017 4F  
     6018 4D  
     6019 4D  
     601A 59  
     601B 32  
     601C 20  
     601D 43  
     601E 4F  
     601F 4E  
     6020 46  
     6021 49  
     6022 47  
0066          
0067          GVREGS
0068 6023 E0      BYTE  >E0              VDP registers values: standard mode
0069 6024 00      BYTE  >00              screen image at >0000
0070 6025 0E      BYTE  >0E              color table at >0380
0071 6026 01      BYTE  >01              char patterns at >0800
0072 6027 06      BYTE  >06              sprite attributes at >0300
0073 6028 00      BYTE  >00              sprite patterns at >0000
0074 6029 F5      BYTE  >F5              text/screen colors: white / light blue
0075          
0076          GPROG
0077 602A 86      CLR   @>8374
     602B 74  
0078 602C BF      DST   >0900,@>834A     load upper case chars 32->
     602D 4A  
     602E 09  
     602F 00
0079 6030 06      CALL  G@>0018
     6031 00  
     6032 18
0080          * Setup roughly as with mini memory
0081 6033 39      MOVE >0007,G@GVREGS,#>01    Set VDP Regs
     6034 00  
     6035 07
     6036 01  
     6037 60  
     6038 23
0082 6039 86      CLR   V@>0800          clear charpats 0-31
     603A A8  
     603B 00
0083 603C 35      MOVE  >00FF,V@>0800,V@>0801
     603D 00  
     603E FF
     603F A8  
     6040 01
     6041 A8  
     6042 00
0084          
0085 6043 BE      ST    >7E,@>8373       init subroutine stack
     6044 73  
     6045 7E  
0086 6046 87      DCLR  @>8322           clear error code
     6047 22  
0087 6048 87      DCLR  @>8348           clear flags
     6049 48  
0088          
0089 604A 87      DCLR   @DUMPA
     604B 62  
0090 604C 86      CLR    @BANK           Actually init from grommy2
     604D 50  
0091 604E 86      CLR    @SHADOW         Actually init from grommy2
     604F 51  
0092          
0093 6050 BF      DST   >1234,@XREG
     6051 2C  
     6052 12  
     6053 34
0094 6054 BF      DST   >5679,@YREG
     6055 2E  
     6056 56  
     6057 79
0095 6058 BF      DST   >DEAD,@ZREG
     6059 30  
     605A DE  
     605B AD
0096          
0097 605C 06      CALL G@GVDPSETUP
     605D 66  
     605E 87
0098          
0099 605F 06      CALL G@G_SCR1       ; Setup the screen which was automatically generated
     6060 69  
     6061 72
0100          SCREEN1:
0101          * Use the FMT token to add some strings on the screen
0102 6062 08      FMT
0103 6063 FF      COL LALIGN
     6064 02  
0104 6065 FE      ROW LAYOUTVER
     6066 05  
0105 6067 1D      HTEX 'VERSION 0.0.00 BANK 0 SHADOW 0'
     6068 56  
     6069 45  
     606A 52  
     606B 53  
     606C 49  
     606D 4F  
     606E 4E  
     606F 20  
     6070 30  
     6071 2E  
     6072 30  
     6073 2E  
     6074 30  
     6075 30  
     6076 20  
     6077 42  
     6078 41  
     6079 4E  
     607A 4B  
     607B 20  
     607C 30  
     607D 20  
     607E 53  
     607F 48  
     6080 41  
     6081 44  
     6082 4F  
     6083 57  
     6084 20  
     6085 30  
0106 6086 A0      ROW+ >01
0107 6087 FF      COL LALIGN
     6088 02  
0108 6089 19      HTEX 'SELECT GROM BANK FOR READS'
     608A 53  
     608B 45  
     608C 4C  
     608D 45  
     608E 43  
     608F 54  
     6090 20  
     6091 47  
     6092 52  
     6093 4F  
     6094 4D  
     6095 20  
     6096 42  
     6097 41  
     6098 4E  
     6099 4B  
     609A 20  
     609B 46  
     609C 4F  
     609D 52  
     609E 20  
     609F 52  
     60A0 45  
     60A1 41  
     60A2 44  
     60A3 53  
0109 60A4 A0      ROW+ >01
0110 60A5 FF      COL LALIGN2
     60A6 03  
0111 60A7 0C      HTEX '0 SYSTEM BANK'
     60A8 30  
     60A9 20  
     60AA 53  
     60AB 59  
     60AC 53  
     60AD 54  
     60AE 45  
     60AF 4D  
     60B0 20  
     60B1 42  
     60B2 41  
     60B3 4E  
     60B4 4B  
0112 60B5 A0      ROW+ >01
0113 60B6 FF      COL LALIGN2
     60B7 03  
0114 60B8 0C      HTEX '1 USER BANK 1'
     60B9 31  
     60BA 20  
     60BB 55  
     60BC 53  
     60BD 45  
     60BE 52  
     60BF 20  
     60C0 42  
     60C1 41  
     60C2 4E  
     60C3 4B  
     60C4 20  
     60C5 31  
0115 60C6 A0      ROW+ >01
0116 60C7 FF      COL LALIGN2
     60C8 03  
0117 60C9 0C      HTEX '2 USER BANK 2'
     60CA 32  
     60CB 20  
     60CC 55  
     60CD 53  
     60CE 45  
     60CF 52  
     60D0 20  
     60D1 42  
     60D2 41  
     60D3 4E  
     60D4 4B  
     60D5 20  
     60D6 32  
0118 60D7 A0      ROW+ >01
0119 60D8 FF      COL LALIGN2
     60D9 03  
0120 60DA 0A      HTEX '3 GRAM BANK'
     60DB 33  
     60DC 20  
     60DD 47  
     60DE 52  
     60DF 41  
     60E0 4D  
     60E1 20  
     60E2 42  
     60E3 41  
     60E4 4E  
     60E5 4B  
0121          
0122 60E6 A1      ROW+ >02
0123 60E7 FF      COL LALIGN
     60E8 02  
0124 60E9 09      HTEX 'SHADOW RAM'
     60EA 53  
     60EB 48  
     60EC 41  
     60ED 44  
     60EE 4F  
     60EF 57  
     60F0 20  
     60F1 52  
     60F2 41  
     60F3 4D  
0125 60F4 A0      ROW+ >01
0126 60F5 FF      COL LALIGN2
     60F6 03  
0127 60F7 15      HTEX '4 ENABLE     5 DISABLE'
     60F8 34  
     60F9 20  
     60FA 45  
     60FB 4E  
     60FC 41  
     60FD 42  
     60FE 4C  
     60FF 45  
     6100 20  
     6101 20  
     6102 20  
     6103 20  
     6104 20  
     6105 35  
     6106 20  
     6107 44  
     6108 49  
     6109 53  
     610A 41  
     610B 42  
     610C 4C  
     610D 45  
0128          
0129 610E A1      ROW+ >02
0130 610F FF      COL LALIGN
     6110 02  
0131 6111 16      HTEX 'FLASH GRAM TO USER BANK'
     6112 46  
     6113 4C  
     6114 41  
     6115 53  
     6116 48  
     6117 20  
     6118 47  
     6119 52  
     611A 41  
     611B 4D  
     611C 20  
     611D 54  
     611E 4F  
     611F 20  
     6120 55  
     6121 53  
     6122 45  
     6123 52  
     6124 20  
     6125 42  
     6126 41  
     6127 4E  
     6128 4B  
0132 6129 A0      ROW+ >01
0133 612A FF      COL LALIGN2
     612B 03  
0134 612C 14      HTEX '6 BANK 1     7 BANK 2'
     612D 36  
     612E 20  
     612F 42  
     6130 41  
     6131 4E  
     6132 4B  
     6133 20  
     6134 31  
     6135 20  
     6136 20  
     6137 20  
     6138 20  
     6139 20  
     613A 37  
     613B 20  
     613C 42  
     613D 41  
     613E 4E  
     613F 4B  
     6140 20  
     6141 32  
0135          
0136 6142 A1      ROW+ >02
0137 6143 FF      COL LALIGN
     6144 02  
0138 6145 14      HTEX 'COPY ROM BANK TO GRAM'
     6146 43  
     6147 4F  
     6148 50  
     6149 59  
     614A 20  
     614B 52  
     614C 4F  
     614D 4D  
     614E 20  
     614F 42  
     6150 41  
     6151 4E  
     6152 4B  
     6153 20  
     6154 54  
     6155 4F  
     6156 20  
     6157 47  
     6158 52  
     6159 41  
     615A 4D  
0139 615B A0      ROW+ >01
0140 615C FF      COL LALIGN2
     615D 03  
0141 615E 16      HTEX 'A COPY FROM SYSTEM BANK'
     615F 41  
     6160 20  
     6161 43  
     6162 4F  
     6163 50  
     6164 59  
     6165 20  
     6166 46  
     6167 52  
     6168 4F  
     6169 4D  
     616A 20  
     616B 53  
     616C 59  
     616D 53  
     616E 54  
     616F 45  
     6170 4D  
     6171 20  
     6172 42  
     6173 41  
     6174 4E  
     6175 4B  
0142 6176 A0      ROW+ >01
0143 6177 FF      COL LALIGN2
     6178 03  
0144 6179 16      HTEX 'B COPY FROM USER BANK 1'
     617A 42  
     617B 20  
     617C 43  
     617D 4F  
     617E 50  
     617F 59  
     6180 20  
     6181 46  
     6182 52  
     6183 4F  
     6184 4D  
     6185 20  
     6186 55  
     6187 53  
     6188 45  
     6189 52  
     618A 20  
     618B 42  
     618C 41  
     618D 4E  
     618E 4B  
     618F 20  
     6190 31  
0145 6191 A0      ROW+ >01
0146 6192 FF      COL LALIGN2
     6193 03  
0147 6194 16      HTEX 'C COPY FROM USER BANK 2'
     6195 43  
     6196 20  
     6197 43  
     6198 4F  
     6199 50  
     619A 59  
     619B 20  
     619C 46  
     619D 52  
     619E 4F  
     619F 4D  
     61A0 20  
     61A1 55  
     61A2 53  
     61A3 45  
     61A4 52  
     61A5 20  
     61A6 42  
     61A7 41  
     61A8 4E  
     61A9 4B  
     61AA 20  
     61AB 32  
0148          
0149 61AC A0      ROW+ >01
0150 61AD FF      COL LALIGN
     61AE 02  
0151 61AF 08      HTEX '9 MORE...'
     61B0 39  
     61B1 20  
     61B2 4D  
     61B3 4F  
     61B4 52  
     61B5 45  
     61B6 2E  
     61B7 2E  
     61B8 2E  
0152          
0153 61B9 FB      FEND
0154          
0155          * Pattern address of character 0xFF
0156          PATADR EQU >0800+(255*8)
0157          * Test a couple of chars
0158          *    MOVE 64,G@DENSE_FONT,V@PATADR-64
0159          *    ST >F7,V@0
0160          *    ST >F8,V@1
0161          *    ST >F9,V@2
0162          *    ST >FA,V@3
0163          *    ST >FB,V@4
0164          *    ST >FC,V@5
0165          *    ST >FD,V@6
0166          *    ST >FE,V@7
0167          
0168 61BA 06      CALL  SHOW_VERSION      ; Get version, bank, shadow info
     61BB 65  
     61BC 76
0169 61BD 05      B     GUPDATE           ; update screen
     61BE 62  
     61BF 7A
0170          
0171          GWAIT
0172 61C0 03      SCAN
0173 61C1 61      BS    GOTKEY
     61C2 CF  
0174          * We did not get a key. Animate something.
0175 61C3 BE      ST    >FF,V@>001F      Write char FF to top right corner
     61C4 A0  
     61C5 1F
     61C6 FF  
0176 61C7 A2      ADD   1,V@PATADR
     61C8 AF  
     61C9 0F
     61CA F8
     61CB 01  
0177 61CC 05      B    G@GWAIT          wait for the user to press a key
     61CD 61  
     61CE C0
0178          
0179          
0180          GOTKEY:
0181 61CF BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     61D0 A0  
     61D1 82
     61D2 75  
0182 61D3 BE      ST    ' ',V@VALIDIND        ; Assume invalid CMD
     61D4 A0  
     61D5 83
     61D6 20  
0183 61D7 CE      CGT   '0'-1,@SCANKEY       greater than >= 0
     61D8 75  
     61D9 2F  
0184 61DA 42      BR    GG01              no skip forward
     61DB 74  
0185 61DC CE      CGT   '9',@SCANKEY        Key greater than '9'?
     61DD 75  
     61DE 39  
0186 61DF 61      BS    CHECK_ABC             ; Yes: skip forward
     61E0 FA  
0187 61E1 A6      SUB   '0',@SCANKEY
     61E2 75  
     61E3 30  
0188 61E4 8A      CASE  @SCANKEY
     61E5 75  
0189 61E6 42      BR    KEY0
     61E7 1E  
0190 61E8 42      BR    KEY1
     61E9 1E  
0191 61EA 42      BR    KEY2
     61EB 1E  
0192 61EC 42      BR    KEY3
     61ED 29  
0193 61EE 42      BR    KEY4
     61EF 0F  
0194 61F0 42      BR    KEY5
     61F1 1A  
0195 61F2 42      BR    KEY6
     61F3 31  
0196 61F4 42      BR    KEY7
     61F5 3C  
0197 61F6 42      BR    KEY8
     61F7 41  
0198 61F8 42      BR    KEY9
     61F9 4A  
0199          CHECK_ABC
0200          ; Commands A,B and C
0201 61FA CE      CGT   'A'-1,@SCANKEY
     61FB 75  
     61FC 40  
0202 61FD 42      BR    GG01
     61FE 74  
0203 61FF CE      CGT   'C',@SCANKEY
     6200 75  
     6201 43  
0204 6202 62      BS    GG01
     6203 74  
0205 6204 A6      SUB   'A',@SCANKEY
     6205 75  
     6206 41  
0206 6207 8A      CASE  @SCANKEY
     6208 75  
0207 6209 42      BR    KEYA
     620A 4D  
0208 620B 42      BR    KEYB
     620C 59  
0209 620D 42      BR    KEYC
     620E 5E  
0210          
0211          KEY4:
0212 620F BE      ST  1,@SHADOW
     6210 51  
     6211 01  
0213          SHADOWSET
0214 6212 BC      ST  @SHADOW,@GCMDP2    ; Set parameter 2
     6213 42  
     6214 51  
0215 6215 BE      ST  3,@GCMDBYTE         ; Command 3 shadow enable/disable
     6216 40  
     6217 03  
0216 6218 42      BR  ISSUECMD
     6219 67  
0217          KEY5:
0218 621A 86      CLR @SHADOW
     621B 51  
0219 621C 42      BR  SHADOWSET
     621D 12  
0220          KEY0
0221          KEY1
0222          KEY2
0223 621E BC      ST   @SCANKEY,@BANK
     621F 50  
     6220 75  
0224 6221 BC      ST   @SCANKEY,@GCMDP2    ; Set parameter 2
     6222 42  
     6223 75  
0225          BANKSEL
0226 6224 BE      ST   1,@GCMDBYTE         ; Command 1 select bank for reads
     6225 40  
     6226 01  
0227 6227 42      BR  ISSUECMD
     6228 67  
0228          KEY3
0229 6229 BC      ST   @SCANKEY,@BANK
     622A 50  
     622B 75  
0230 622C BE      ST   8,@GCMDP2           ; GRAM bank is 8
     622D 42  
     622E 08  
0231 622F 42      BR   BANKSEL
     6230 24  
0232          
0233          KEY6:                       ; Flash GRAM to user bank 1
0234 6231 BE      ST   >01,@GCMDP2        ; User bank 1
     6232 42  
     6233 01  
0235          GRAM2FLASH
0236 6234 BE      ST   >3F,@GCMDP3        ; Bit mask: flash entire bank
     6235 43  
     6236 3F  
0237 6237 BE      ST   4,@GCMDBYTE
     6238 40  
     6239 04  
0238 623A 42      BR  ISSUECMD
     623B 67  
0239          KEY7:                       ; Flash GRAM to user bank 2
0240 623C BE      ST   >02,@GCMDP2        ; User bank 2
     623D 42  
     623E 02  
0241 623F 42      BR   GRAM2FLASH
     6240 34  
0242          KEY8
0243 6241 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6242 A0  
     6243 83
     6244 2A  
0244 6245 06      CALL  SHOW_VERSION
     6246 65  
     6247 76
0245 6248 41      BR    GWAIT
     6249 C0  
0246          KEY9:
0247 624A 05      B   DUMPSCREEN
     624B 62  
     624C AF
0248          
0249          KEYA:                       ; Copy bank 0 to GRAM
0250 624D BE      ST    0,@GCMDP2
     624E 42  
     624F 00  
0251          COPY2GRAM:
0252 6250 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6251 A0  
     6252 83
     6253 2A  
0253 6254 BE      ST    2,@GCMDBYTE
     6255 40  
     6256 02  
0254 6257 42      BR    ISSUECMD
     6258 67  
0255          KEYB:
0256 6259 BE      ST    1,@GCMDP2
     625A 42  
     625B 01  
0257 625C 42      BR    COPY2GRAM
     625D 50  
0258          KEYC:
0259 625E BE      ST    2,@GCMDP2
     625F 42  
     6260 02  
0260 6261 42      BR    COPY2GRAM
     6262 50  
0261          
0262          ISSUECMD1:                  ; Clear last 4 parameter bytes
0263 6263 87      DCLR  @GCMDBYTE+4
     6264 44  
0264 6265 87      DCLR  @GCMDBYTE+6
     6266 46  
0265          ISSUECMD:
0266 6267 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     6268 00  
     6269 08
     626A 48  
     626B 65  
     626C F7
0267 626D BE      ST    '*',V@VALIDIND    ; Command valid indicator
     626E A0  
     626F 83
     6270 2A  
0268 6271 06      CALL  GSENDCMD          ; Send command to HW
     6272 65  
     6273 E2
0269          
0270          GG01:
0271 6274 D6      CEQ   >0F,@SCANKEY       is it Fctn-9?
     6275 75  
     6276 0F  
0272 6277 42      BR    G@GCONT2         no: GCONT2
     6278 7A  
0273 6279 0B      EXIT                   yes: reset the TI-99/4A
0274          
0275          GCONT2
0276          * Update screen to reflect current status
0277          GUPDATE
0278          * Status of Shadow RAM enable/disable
0279 627A BE      ST  '0',@PAD0
     627B 5C  
     627C 30  
0280 627D A0      ADD @SHADOW,@PAD0
     627E 5C  
     627F 51  
0281 6280 BC      ST  @PAD0,V@VEROFS+>1F        Write to VRAM
     6281 A0  
     6282 BF
     6283 5C  
0282          * Status of selected bank
0283 6284 BE      ST  '0',@PAD0
     6285 5C  
     6286 30  
0284 6287 A0      ADD @BANK,@PAD0
     6288 5C  
     6289 50  
0285 628A BC      ST  @PAD0,V@VEROFS+>16  ; Write to VRAM
     628B A0  
     628C B6
     628D 5C  
0286          
0287          
0288          * Start update GROM read bank. First erase bank markings.
0289          BANKOFS EQU (32*LAYOUTBAN)+4
0290 628E BE      ST ' ',V@BANKOFS
     628F A1  
     6290 04
     6291 20  
0291 6292 BE      ST ' ',V@BANKOFS+>20
     6293 A1  
     6294 24
     6295 20  
0292 6296 BE      ST ' ',V@BANKOFS+>40
     6297 A1  
     6298 44
     6299 20  
0293 629A BE      ST ' ',V@BANKOFS+>60
     629B A1  
     629C 64
     629D 20  
0294 629E 87      DCLR @PAD0
     629F 5C  
0295 62A0 BC      ST   @BANK,@PAD3        Copy to low byte the bank #
     62A1 5F  
     62A2 50  
0296 62A3 E3      DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
     62A4 5E  
     62A5 00  
     62A6 05
0297 62A7 BE      ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
     62A8 E1  
     62A9 04
     62AA 5E
     62AB 2A  
0298          * End update GROM read bank.
0299 62AC 05      B   G@GWAIT
     62AD 61  
     62AE C0
0300          
0301          *----------------------------------------
0302          * Second screen with a few features.
0303          *----------------------------------------
0304          DUMPSCREEN:
0305 62AF BE      ST   ' ',V@VEROFS
     62B0 A0  
     62B1 A0
     62B2 20  
0306 62B3 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     62B4 02  
     62B5 5F
     62B6 A0  
     62B7 A1
     62B8 A0  
     62B9 A0
0307 62BA 08      FMT
0308 62BB FF      COL LALIGN
     62BC 02  
0309 62BD FE      ROW LAYOUTVER
     62BE 05  
0310 62BF 1A      HTEX '1 DEC 2 INC DUMP ADDR 3 RET'
     62C0 31  
     62C1 20  
     62C2 44  
     62C3 45  
     62C4 43  
     62C5 20  
     62C6 32  
     62C7 20  
     62C8 49  
     62C9 4E  
     62CA 43  
     62CB 20  
     62CC 44  
     62CD 55  
     62CE 4D  
     62CF 50  
     62D0 20  
     62D1 41  
     62D2 44  
     62D3 44  
     62D4 52  
     62D5 20  
     62D6 33  
     62D7 20  
     62D8 52  
     62D9 45  
     62DA 54  
0311 62DB A0      ROW+ >01
0312 62DC FF      COL LALIGN
     62DD 02  
0313 62DE 12      HTEX '4 FILL GRAM WITH FF'
     62DF 34  
     62E0 20  
     62E1 46  
     62E2 49  
     62E3 4C  
     62E4 4C  
     62E5 20  
     62E6 47  
     62E7 52  
     62E8 41  
     62E9 4D  
     62EA 20  
     62EB 57  
     62EC 49  
     62ED 54  
     62EE 48  
     62EF 20  
     62F0 46  
     62F1 46  
0314 62F2 A0      ROW+ >01
0315 62F3 FF      COL LALIGN
     62F4 02  
0316 62F5 1B      HTEX '5 COPY 24K GROM 8000 TO GRAM'
     62F6 35  
     62F7 20  
     62F8 43  
     62F9 4F  
     62FA 50  
     62FB 59  
     62FC 20  
     62FD 32  
     62FE 34  
     62FF 4B  
     6300 20  
     6301 47  
     6302 52  
     6303 4F  
     6304 4D  
     6305 20  
     6306 38  
     6307 30  
     6308 30  
     6309 30  
     630A 20  
     630B 54  
     630C 4F  
     630D 20  
     630E 47  
     630F 52  
     6310 41  
     6311 4D  
0317 6312 A0      ROW+ >01
0318 6313 FF      COL LALIGN
     6314 02  
0319 6315 11      HTEX '6 ARM EXECUTE 0000'
     6316 36  
     6317 20  
     6318 41  
     6319 52  
     631A 4D  
     631B 20  
     631C 45  
     631D 58  
     631E 45  
     631F 43  
     6320 55  
     6321 54  
     6322 45  
     6323 20  
     6324 30  
     6325 30  
     6326 30  
     6327 30  
0320 6328 A0      ROW+ >01
0321 6329 FF      COL LALIGN
     632A 02  
0322 632B 11      HTEX '7 ARM EXECUTE 4000'
     632C 37  
     632D 20  
     632E 41  
     632F 52  
     6330 4D  
     6331 20  
     6332 45  
     6333 58  
     6334 45  
     6335 43  
     6336 55  
     6337 54  
     6338 45  
     6339 20  
     633A 34  
     633B 30  
     633C 30  
     633D 30  
0323 633E A0      ROW+ >01
0324 633F FF      COL LALIGN
     6340 02  
0325 6341 18      HTEX '0 BURN FIRMWARE FROM GRAM'
     6342 30  
     6343 20  
     6344 42  
     6345 55  
     6346 52  
     6347 4E  
     6348 20  
     6349 46  
     634A 49  
     634B 52  
     634C 4D  
     634D 57  
     634E 41  
     634F 52  
     6350 45  
     6351 20  
     6352 46  
     6353 52  
     6354 4F  
     6355 4D  
     6356 20  
     6357 47  
     6358 52  
     6359 41  
     635A 4D  
0326 635B A1      ROW+ >02
0327 635C FF      COL LALIGN
     635D 02  
0328 635E 0A      HTEX 'GROM DUMPER'
     635F 47  
     6360 52  
     6361 4F  
     6362 4D  
     6363 20  
     6364 44  
     6365 55  
     6366 4D  
     6367 50  
     6368 45  
     6369 52  
0329 636A FB      FEND
0330          
0331 636B 31      MOVE >002C,G@BIN2HEX,@>8300 ; Move assembly code in place
     636C 00  
     636D 2C
     636E 00  
     636F 66  
     6370 5B
0332          
0333          ; First test in units of frame count (VDPTIMER)
0334          ; Test runs for 4 frames.
0335          ;   GPL with original HEXOUT: 119 ticks
0336          ;   GPL call to GPL HEXOUT routine issuing XML >F0:  55 ticks
0341          
0342          **    B  SKIPBENCH
0343          ; Run benchmark
0344 6371 BE      ST    4,@XREG               ; Loop counter
     6372 2C  
     6373 04  
0345 6374 BC      ST    @VDPTIMER,@XREG+1     ; Read timer
     6375 2D  
     6376 79  
0346 6377 06  !   CALL  G@DODUMP
     6378 63  
     6379 C5
0347 637A A3      DADD  8,@DUMPA
     637B 62  
     637C 00  
     637D 08
0348 637E 92      DEC   @XREG
     637F 2C  
0349 6380 8E      CZ    @XREG
     6381 2C  
0350 6382 43      BR   -!
     6383 77  
0351 6384 BC      ST    @VDPTIMER,@XREG       ; Read timer
     6385 2C  
     6386 79  
0352 6387 A7      DSUB  4*10,@DUMPA
     6388 62  
     6389 00  
     638A 28
0353          ** SKIPBENCH:
0354          
0355          MAKEDUMP:
0356 638B 06      CALL G@DODUMP
     638C 63  
     638D C5
0357 638E BE      ST    ' ',V@VALIDIND
     638F A0  
     6390 83
     6391 20  
0358          ; Wait for keypress
0359          KW1:
0360 6392 03      SCAN
0361 6393 63      BS    DGOTKEY
     6394 9D  
0362 6395 A2      ADD   1,V@PATADR
     6396 AF  
     6397 0F
     6398 F8
     6399 01  
0363 639A 05      B     KW1
     639B 63  
     639C 92
0364          DGOTKEY:
0365 639D BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     639E A0  
     639F 82
     63A0 75  
0366 63A1 CE      CGT   'X'-1,@SCANKEY    ; Key >= 'X'
     63A2 75  
     63A3 57  
0367 63A4 64      BS    XYZ               ; Yes: go to XYZ
     63A5 1D  
0368 63A6 CE      CGT   '0'-1,@SCANKEY
     63A7 75  
     63A8 2F  
0369 63A9 43      BR    KW1               ; Key less than zero -> loop
     63AA 92  
0370 63AB CE      CGT   '7',@SCANKEY      ; Key over '7' -> loop
     63AC 75  
     63AD 37  
0371 63AE 63      BS    KW1
     63AF 92  
0372 63B0 A6      SUB   '0',@SCANKEY
     63B1 75  
     63B2 30  
0373 63B3 8A      CASE  @SCANKEY          ; BUGBUG make range check
     63B4 75  
0374 63B5 44      BR    DKEY0
     63B6 94  
0375 63B7 44      BR    DKEY1
     63B8 78  
0376 63B9 44      BR    DKEY2
     63BA 7F  
0377 63BB 44      BR    DKEY3
     63BC 86  
0378 63BD 44      BR    DKEY4
     63BE B3  
0379 63BF 44      BR    DKEY5
     63C0 CF  
0380 63C1 44      BR    DKEY6
     63C2 EF  
0381 63C3 45      BR    DKEY7
     63C4 0B  
0382          
0383          DODUMP:
0384 63C5 BF      DST   VEROFS+224,@VRAMP
     63C6 40  
     63C7 01  
     63C8 80
0385 63C9 86      CLR   @PAD2             ; Row counter
     63CA 5E  
0386 63CB BE      ST    '*',V@VALIDIND
     63CC A0  
     63CD 83
     63CE 2A  
0387          DUMP2:
0388 63CF BE      ST    ' ',V@>FFFF(VRAMP)    ; setup VRAM address in case assembly used
     63D0 EF  
     63D1 FF
     63D2 FF
     63D3 40
     63D4 20  
0389 63D5 BC      ST    @DUMPA,@PAD0      ; Hi byte off address
     63D6 5C  
     63D7 62  
0001 63D8 0F      XML >F0
     63D9 F0  
0002              ;;; CALL  HEXOUT
0391 63DA A3      DADD  2,@VRAMP
     63DB 40  
     63DC 00  
     63DD 02
0392 63DE BC      ST    @DUMPA+1,@PAD0    ; Lo byte off address
     63DF 5C  
     63E0 63  
0001 63E1 0F      XML >F0
     63E2 F0  
0002              ;;; CALL  HEXOUT
0394 63E3 BE      ST    ':',V@2(@VRAMP)
     63E4 E0  
     63E5 02
     63E6 40
     63E7 3A  
0395 63E8 A3      DADD  3,@VRAMP
     63E9 40  
     63EA 00  
     63EB 03
0396 63EC 86      CLR   @PAD1             ; column counter
     63ED 5D  
0397          ; Dump 8 bytes from from 16 bit ptr  DUMPA
0398          DUMP1:
0399 63EE 33      MOVE  1,G@0(@DUMPA),@PAD0    ; Read from GROM pointed to by DUMPA
     63EF 00  
     63F0 01
     63F1 5C  
     63F2 00  
     63F3 00
     63F4 62
0001 63F5 0F      XML >F0
     63F6 F0  
0002              ;;; CALL  HEXOUT
0401 63F7 BE      ST    ' ',V@2(@VRAMP)
     63F8 E0  
     63F9 02
     63FA 40
     63FB 20  
0402 63FC A3      DADD  3,@VRAMP
     63FD 40  
     63FE 00  
     63FF 03
0403 6400 91      DINC  @DUMPA
     6401 62  
0404 6402 90      INC   @PAD1
     6403 5D  
0405 6404 D6      CEQ   8,@PAD1           ; 8 columns - are we done?
     6405 5D  
     6406 08  
0406 6407 43      BR    DUMP1             ; No: jump to dump1
     6408 EE  
0407          ; Advance VRAM pointer, we add and mask to bring pointer to beginning
0408          ; of next line.
0409 6409 A3      DADD  >1F,@VRAMP
     640A 40  
     640B 00  
     640C 1F
0410 640D B3      DAND  >0FE0,@VRAMP
     640E 40  
     640F 0F  
     6410 E0
0411 6411 90      INC   @PAD2             ; inc Row
     6412 5E  
0412 6413 D6      CEQ   8,@PAD2           ; Done with 8 rows?
     6414 5E  
     6415 08  
0413 6416 43      BR    DUMP2             ; No: jump to dump2
     6417 CF  
0414 6418 A7      DSUB  8*8,@DUMPA           ; Undo the incs in the loop above
     6419 62  
     641A 00  
     641B 40
0415 641C 00      RTN
0416          
0417          ; Check if we have button X Y Z pressed
0418          XYZ:
0419 641D CE      CGT   'Z',@SCANKEY    ; Above Z?
     641E 75  
     641F 5A  
0420 6420 63      BS    KW1             ; Yes: KW1
     6421 92  
0421          ; Ok now we need to ask the user for a value and store it to X, Y or Z register.
0422          ; Show the current value of the variable after character code
0423 6422 BF      DST   VEROFS-29,@VRAMP ; Location in VRAM
     6423 40  
     6424 00  
     6425 83
0424 6426 BC      ST    @SCANKEY,@PAD3
     6427 5F  
     6428 75  
0425 6429 A6      SUB   'X',@PAD3       ; Now pad is 0,1,2 for X,Y,Z
     642A 5F  
     642B 58  
0426 642C E2      SLL   1,@PAD3         ; Multiply by 2
     642D 5F  
     642E 01  
0427 642F 86      CLR   @PAD2           ; clear high byte
     6430 5E  
0428 6431 A3      DADD  XREG,@PAD2       ; Add address of XREG, now PAD1:PAD2 is a pointer to value
     6432 5E  
     6433 83  
     6434 2C
0429          
0430 6435 BC      ST    @0(@PAD2),@PAD0  ; Hi byte of reg
     6436 5C  
     6437 CF  
     6438 7D
     6439 00
     643A 5E
0001 643B 0F      XML >F0
     643C F0  
0002              ;;; CALL  HEXOUT
0432 643D A3      DADD  2,@VRAMP
     643E 40  
     643F 00  
     6440 02
0433 6441 BC      ST    @1(@PAD2),@PAD0  ; Lo byte of reg
     6442 5C  
     6443 CF  
     6444 7D
     6445 01
     6446 5E
0001 6447 0F      XML >F0
     6448 F0  
0002              ;;; CALL  HEXOUT
0435 6449 05      B     G@KW1
     644A 63  
     644B 92
0436          
0437          
0438          
0439          ASKCONFIRM:
0440          ; Ask for confirmation. Clear a few rows to clarify
0441 644C BE      ST   ' ',V@VEROFS
     644D A0  
     644E A0
     644F 20  
0442 6450 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     6451 02  
     6452 5F
     6453 A0  
     6454 A1
     6455 A0  
     6456 A0
0443 6457 08      FMT
0444 6458 FF      COL LALIGN
     6459 02  
0445 645A FE      ROW LAYOUTVER
     645B 05  
0446 645C 15      HTEX '!!PRESS 1 TO CONFIRM!!'
     645D 21  
     645E 21  
     645F 50  
     6460 52  
     6461 45  
     6462 53  
     6463 53  
     6464 20  
     6465 31  
     6466 20  
     6467 54  
     6468 4F  
     6469 20  
     646A 43  
     646B 4F  
     646C 4E  
     646D 46  
     646E 49  
     646F 52  
     6470 4D  
     6471 21  
     6472 21  
0447 6473 FB      FEND
0448          WAIT0:
0449 6474 03      SCAN
0450 6475 44      BR    WAIT0
     6476 74  
0451 6477 00      RTN
0452          
0453          DKEY1:
0454 6478 A7      DSUB  64,@DUMPA
     6479 62  
     647A 00  
     647B 40
0455 647C 05      B     MAKEDUMP
     647D 63  
     647E 8B
0456          DKEY2:
0457 647F A3      DADD  64,@DUMPA
     6480 62  
     6481 00  
     6482 40
0458 6483 05      B     MAKEDUMP
     6484 63  
     6485 8B
0459          DKEY3:
0460 6486 BE      ST   ' ',V@VEROFS
     6487 A0  
     6488 A0
     6489 20  
0461 648A 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     648B 02  
     648C 5F
     648D A0  
     648E A1
     648F A0  
     6490 A0
0462 6491 05      B     SCREEN1
     6492 60  
     6493 62
0463          DKEY0:      ; Burn to Flash
0464 6494 06      CALL  G@ASKCONFIRM
     6495 64  
     6496 4C
0465 6497 D6      CEQ   '1',@SCANKEY       is the key one?
     6498 75  
     6499 31  
0466 649A 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     649B AF  
0467          ; Yes, continue to Flash the MCU
0468 649C 04      BACK  >F3              screen colors: white on some other color
     649D F3  
0469 649E BE      ST    'F',V@VALIDIND    ; Command valid indicator
     649F A0  
     64A0 83
     64A1 46  
0470 64A2 BE      ST    6,@GCMDBYTE
     64A3 40  
     64A4 06  
0471 64A5 BF      DST   >1234,@GCMDBYTE+2
     64A6 42  
     64A7 12  
     64A8 34
0472 64A9 87      DCLR  @GCMDBYTE+4
     64AA 44  
0473 64AB 87      DCLR  @GCMDBYTE+6
     64AC 46  
0474 64AD 06      CALL  ISSUECMD
     64AE 62  
     64AF 67
0475          ; We probably do not return from this call... GROMMY might be in a funny state
0476 64B0 05      B     G@MAKEDUMP
     64B1 63  
     64B2 8B
0477          
0478          DKEY4:      ; Command to fill GRAM with >FF, all 24K
0479 64B3 BF      DST   >FFFF,@PAD2   ; Fill value, 2 bytes
     64B4 5E  
     64B5 FF  
     64B6 FF
0480 64B7 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     64B8 A0  
     64B9 83
     64BA 2A  
0481 64BB 25      MOVE  >1,@PAD2,G@>0
     64BC 00  
     64BD 01
     64BE 00  
     64BF 00
     64C0 5E  
0482 64C1 21      MOVE  >5FFF,G@>0,G@>1
     64C2 5F  
     64C3 FF
     64C4 00  
     64C5 01
     64C6 00  
     64C7 00
0483 64C8 BE      ST    ' ',V@VALIDIND    ; Command valid indicator
     64C9 A0  
     64CA 83
     64CB 20  
0484 64CC 05      B     MAKEDUMP
     64CD 63  
     64CE 8B
0485          
0486          DKEY5:
0487 64CF BE      ST    '*',V@VALIDIND    ; Command valid indicator
     64D0 A0  
     64D1 83
     64D2 2A  
0488 64D3 21      MOVE >2000,G@>8000,G@>0000
     64D4 20  
     64D5 00
     64D6 00  
     64D7 00
     64D8 80  
     64D9 00
0489 64DA 21      MOVE >2000,G@>A000,G@>2000
     64DB 20  
     64DC 00
     64DD 20  
     64DE 00
     64DF A0  
     64E0 00
0490 64E1 21      MOVE >2000,G@>C000,G@>4000
     64E2 20  
     64E3 00
     64E4 40  
     64E5 00
     64E6 C0  
     64E7 00
0491 64E8 BE      ST    ' ',V@VALIDIND    ; Command valid indicator
     64E9 A0  
     64EA 83
     64EB 20  
0492 64EC 05      B     MAKEDUMP
     64ED 63  
     64EE 8B
0493          
0494          DKEY6:      ; ARM execute 0000
0495 64EF BF      DST   >0100,@GCMDBYTE+2   ; thumb bit high
     64F0 42  
     64F1 01  
     64F2 00
0496          DKEY6ASK:
0497 64F3 06      CALL  G@ASKCONFIRM
     64F4 64  
     64F5 4C
0498 64F6 D6      CEQ   '1',@SCANKEY       is the key one?
     64F7 75  
     64F8 31  
0499 64F9 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     64FA AF  
0500 64FB BE      ST    'F',V@VALIDIND    ; Command valid indicator
     64FC A0  
     64FD 83
     64FE 46  
0501 64FF BE      ST    7,@GCMDBYTE
     6500 40  
     6501 07  
0502 6502 87      DCLR  @GCMDBYTE+4
     6503 44  
0503 6504 87      DCLR  @GCMDBYTE+6
     6505 46  
0504 6506 06      CALL  ISSUECMD
     6507 62  
     6508 67
0505          ; We probably do not return from this call... GROMMY might be in a funny state
0506 6509 43      BR    MAKEDUMP
     650A 8B  
0507          
0508          DKEY7:
0509 650B BF      DST   >0140,@GCMDBYTE+2  ; ARM has different byte order
     650C 42  
     650D 01  
     650E 40
0510 650F 44      BR    DKEY6ASK
     6510 F3  
0511          
0512          
0513          *----------------------------------------
0514          * Display in HEX the byte in PAD0
0515          *----------------------------------------
0516          HEXOUT:
0517 6511 0F    XML >F0       ; Jump via >8300
     6512 F0  
0518 6513 00    RTN
0519          
0520          HEXOUT1:
0521 6514 BC      ST   @PAD0,@PAD4
     6515 60  
     6516 5C  
0522 6517 E6      SRL   >04,@PAD4       isolate first nibble
     6518 60  
     6519 04  
0523 651A CE      CGT   >09,@PAD4       greater than 9?
     651B 60  
     651C 09  
0524 651D 65      BS    HEX1            yes
     651E 24  
0525 651F A2      ADD   >30,@PAD4       no: make it char 0-9
     6520 60  
     6521 30  
0526 6522 45      BR    HEX2
     6523 27  
0527 6524 A2  HEX1: ADD   >37,@PAD4      yes: make it char A-F
     6525 60  
     6526 37  
0528          HEX2:
0529          ; Output first hex digit (most significant digit)
0530 6527 BC      ST    @PAD4,V@0(@VRAMP)
     6528 E0  
     6529 00
     652A 40
     652B 60  
0531          ; Work on 2nd digit
0532 652C BC      ST    @PAD0,@PAD4     copy number
     652D 60  
     652E 5C  
0533 652F B2      AND   >0F,@PAD4       isolate second nibble
     6530 60  
     6531 0F  
0534 6532 CE      CGT   >09,@PAD4       greater than 9?
     6533 60  
     6534 09  
0535 6535 65      BS    HEX3          yes
     6536 3C  
0536 6537 A2      ADD   >30,@PAD4       no: make it char 0-9
     6538 60  
     6539 30  
0537 653A 45      BR    HEX4
     653B 3F  
0538 653C A2  HEX3  ADD   >37,@PAD4       yes: make it char A-F
     653D 60  
     653E 37  
0539          HEX4:
0540          ; Output 2nd hex digit (least significant digit)
0541 653F BC      ST    @PAD4,V@1(@VRAMP)
     6540 E0  
     6541 01
     6542 40
     6543 60  
0542 6544 00      RTN
0543          
0544          HEXOUT2:
0545 6545 86      CLR   @PAD4
     6546 60  
0546 6547 BC      ST    @PAD0,@PAD5
     6548 61  
     6549 5C  
0547 654A E6      SRL   >04,@PAD5       isolate first nibble
     654B 61  
     654C 04  
0548 654D 33      MOVE  1,G@HEXES(@PAD4),V@0(@VRAMP)
     654E 00  
     654F 01
     6550 E0  
     6551 00
     6552 40
     6553 65  
     6554 66
     6555 60
0549 6556 BC      ST    @PAD0,@PAD5
     6557 61  
     6558 5C  
0550 6559 B2      AND   >0F,@PAD5
     655A 61  
     655B 0F  
0551 655C 33      MOVE  1,G@HEXES(@PAD4),V@1(@VRAMP)
     655D 00  
     655E 01
     655F E0  
     6560 01
     6561 40
     6562 65  
     6563 66
     6564 60
0552 6565 00      RTN
0553          
0554          
0555 6566 30  HEXES: BYTE '0','1','Z','3','4','5','6','7'
     6567 31  
     6568 5A  
     6569 33  
     656A 34  
     656B 35  
     656C 36  
     656D 37  
0556 656E 38    BYTE '8','9','A','B','C','D','E','F'
     656F 39  
     6570 41  
     6571 42  
     6572 43  
     6573 44  
     6574 45  
     6575 46  
0557          
0558          *----------------------------------------
0559          * Read grommy2 version, update on screen.
0560          * Also read and set bank & shadow values.
0561          *----------------------------------------
0562          SHOW_VERSION
0563 6576 06      CALL G@GINITCMD
     6577 65  
     6578 DB
0564 6579 06      CALL G@GSENDCMD
     657A 65  
     657B E2
0565          * Check result of command - did we get OK?
0566 657C 31      MOVE 2,G@HWIF,@PAD0
     657D 00  
     657E 02
     657F 5C  
     6580 5F  
     6581 F0
0567 6582 D7      DCEQ >4F4B,@PAD0        ; did we get OK?
     6583 5C  
     6584 4F  
     6585 4B
0568 6586 65      BS   VER_OK             ; Yes: go to VER_OK
     6587 93  
0569          ** No grommy2 detected. Put in dummy data.
0570 6588 87      DCLR @PAD2              ; Major and minor zero
     6589 5E  
0571 658A BE      ST   99,@PAD4           ; Build 99
     658B 60  
     658C 63  
0572 658D 86      CLR  @SHADOW
     658E 51  
0573 658F 86      CLR  @BANK
     6590 50  
0574 6591 45      BR   VER1
     6592 B0  
0575          VER_OK:     ; grommy responded, read data
0576          * Copy values from GROM IF to pad
0577 6593 31      MOVE 3,G@HWIF+8,@PAD2
     6594 00  
     6595 03
     6596 5E  
     6597 5F  
     6598 F8
0578          * Get active bank from grommy2
0579 6599 31      MOVE 1,G@HWIF+3,@BANK
     659A 00  
     659B 01
     659C 50  
     659D 5F  
     659E F3
0580 659F B2      AND  >0F,@BANK
     65A0 50  
     65A1 0F  
0581 65A2 D6      CEQ  8,@BANK            ; Is GRAM bank 8 selected?
     65A3 50  
     65A4 08  
0582 65A5 45      BR   NOGRAM1            ; No, we're good
     65A6 AA  
0583 65A7 BE      ST   3,@BANK            ; yes, convert to 3 here
     65A8 50  
     65A9 03  
0584          NOGRAM1:
0585          * Get RAM shadow from grommy2
0586 65AA 31      MOVE 1,G@HWIF+4,@SHADOW
     65AB 00  
     65AC 01
     65AD 51  
     65AE 5F  
     65AF F4
0587          VER1:
0588          * Show major version in p2
0589 65B0 BE      ST  '0',@PAD0
     65B1 5C  
     65B2 30  
0590 65B3 A0      ADD @PAD2,@PAD0
     65B4 5C  
     65B5 5E  
0591 65B6 BC      ST  @PAD0,V@VEROFS+>A        Write to VRAM
     65B7 A0  
     65B8 AA
     65B9 5C  
0592          * Show minor version in p3
0593 65BA BE      ST  '0',@PAD0
     65BB 5C  
     65BC 30  
0594 65BD A0      ADD @PAD3,@PAD0
     65BE 5C  
     65BF 5F  
0595 65C0 BC      ST  @PAD0,V@VEROFS+>C        Write to VRAM
     65C1 A0  
     65C2 AC
     65C3 5C  
0596          * Show build version in p4. The build is two digits from 0 to 99
0597 65C4 86      CLR  @PAD0              Zero fill as the value to divide is 16 bits§
     65C5 5C  
0598 65C6 BC      ST   @PAD4,@PAD1
     65C7 5D  
     65C8 60  
0599 65C9 AE      DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
     65CA 5C  
     65CB 0A  
0600 65CC A2      ADD  '0',@PAD0
     65CD 5C  
     65CE 30  
0601 65CF BC      ST   @PAD0,V@VEROFS+>E      Write to VRAM
     65D0 A0  
     65D1 AE
     65D2 5C  
0602 65D3 A2      ADD  '0',@PAD1          Remainder
     65D4 5D  
     65D5 30  
0603 65D6 BC      ST   @PAD1,V@VEROFS+>F      Write to VRAM
     65D7 A0  
     65D8 AF
     65D9 5D  
0604 65DA 00      RTN
0605          
0606          
0607          *----------------------------------------
0608          * Init command buffer in pad
0609          *----------------------------------------
0610          GINITCMD
0611 65DB 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
     65DC 00  
     65DD 10
     65DE 40  
     65DF 65  
     65E0 EF
0612 65E1 00         RTN
0613          
0614          *----------------------------------------
0615          * Send command to grommy2
0616          *----------------------------------------
0617          GSENDCMD
0618 65E2 BC         ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
     65E3 41  
     65E4 40  
0619 65E5 BA         XOR   >FF,@GCMDBYTE+1
     65E6 41  
     65E7 FF  
0620 65E8 25         MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
     65E9 00  
     65EA 10
     65EB 5F  
     65EC F0
     65ED 40  
0621 65EE 00         RTN
0622          
0623          
0624          GROMMY_DAT
0625 65EF 00         DATA   >00FF,>003F,>0000,>0000
     65F0 FF
     65F1 00  
     65F2 3F
     65F3 00  
     65F4 00
     65F5 00  
     65F6 00
0626 65F7 45         TEXT 'EPGROMMY'
     65F8 50  
     65F9 47  
     65FA 52  
     65FB 4F  
     65FC 4D  
     65FD 4D  
     65FE 59  
0627          
0628          
0629          DENSE_FONT ; Define character cells wihtin 4x8 cell
0630          ; Numnbers 0 and 1
0631 65FF 22          BYTE >22
0632 6600 56          BYTE >56
0633 6601 52          BYTE >52
0634 6602 52          BYTE >52
0635 6603 52          BYTE >52
0636 6604 52          BYTE >52
0637 6605 27          BYTE >27
0638 6606 00          BYTE >00
0639          ; Define a cell with 2 and 3
0640 6607 26          BYTE >26
0641 6608 51          BYTE >51
0642 6609 11          BYTE >11
0643 660A 26          BYTE >26
0644 660B 41          BYTE >41
0645 660C 41          BYTE >41
0646 660D 76          BYTE >76
0647 660E 00          BYTE >00
0648          ; Define a cell with 4 and 5
0649 660F 17          BYTE >17
0650 6610 34          BYTE >34
0651 6611 54          BYTE >54
0652 6612 76          BYTE >76
0653 6613 11          BYTE >11
0654 6614 11          BYTE >11
0655 6615 16          BYTE >16
0656 6616 00          BYTE >00
0657          ; Define a cell with 6 and 7
0658 6617 37          BYTE >37
0659 6618 41          BYTE >41
0660 6619 62          BYTE >62
0661 661A 52          BYTE >52
0662 661B 52          BYTE >52
0663 661C 52          BYTE >52
0664 661D 22          BYTE >22
0665 661E 00          BYTE >00
0666          ; Define a cell with 8 and 9
0667 661F 22          BYTE >22
0668 6620 55          BYTE >55
0669 6621 55          BYTE >55
0670 6622 23          BYTE >23
0671 6623 51          BYTE >51
0672 6624 51          BYTE >51
0673 6625 26          BYTE >26
0674 6626 00          BYTE >00
0675          ; Define a cell with A and B
0676 6627 26          BYTE >26
0677 6628 55          BYTE >55
0678 6629 55          BYTE >55
0679 662A 76          BYTE >76
0680 662B 55          BYTE >55
0681 662C 55          BYTE >55
0682 662D 56          BYTE >56
0683 662E 00          BYTE >00
0684          ; Define a cell with C and D
0685 662F 36          BYTE >36
0686 6630 45          BYTE >45
0687 6631 45          BYTE >45
0688 6632 45          BYTE >45
0689 6633 45          BYTE >45
0690 6634 45          BYTE >45
0691 6635 36          BYTE >36
0692 6636 00          BYTE >00
0693          ; Define a cell with E and F
0694 6637 77          BYTE >77
0695 6638 44          BYTE >44
0696 6639 44          BYTE >44
0697 663A 66          BYTE >66
0698 663B 44          BYTE >44
0699 663C 44          BYTE >44
0700 663D 74          BYTE >74
0701 663E 00          BYTE >00
0702          
0703          * Test code copied from Mini Memory
0704 663F 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
     6640 00  
     6641 10
     6642 40  
     6643 65  
     6644 EF
0705 6645 BC         ST    @>839A,@>8340                Copy command byte
     6646 40  
     6647 80  
     6648 9A
0706 6649 BC         ST    @>839A,@>8341                The second byte is its complement
     664A 41  
     664B 80  
     664C 9A
0707 664D BA         XOR   >FF,@>8341
     664E 41  
     664F FF  
0708 6650 BC         ST    @>839B,@>8342                Copy p2.
     6651 42  
     6652 80  
     6653 9B
0709 6654 25         MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
     6655 00  
     6656 10
     6657 5F  
     6658 F0
     6659 40  
0710 665A 00         RTN
0711          
0712          * BIN2HEX assembly routine. Compiled to run from 8302.
0713          * First item is a vector, so this is good for XML >F0.
0714          BIN2HEX:
0715 665B 83    DATA >8302    * Vector to 8302
     665C 02
0716 665D C0    DATA >C08B, >D060, >835C, >0941, >06A0
     665E 8B
     665F D0  
     6660 60
     6661 83  
     6662 5C
     6663 09  
     6664 41
     6665 06  
     6666 A0
0717 6667 83    DATA >8318   * BL destination address
     6668 18
0718 6669 D0    DATA >D060, >835C, >0241, >0F00, >C2C2
     666A 60
     666B 83  
     666C 5C
     666D 02  
     666E 41
     666F 0F  
     6670 00
     6671 C2  
     6672 C2
0719 6673 02    DATA >0221, >3000, >0281, >3A00, >1A02
     6674 21
     6675 30  
     6676 00
     6677 02  
     6678 81
     6679 3A  
     667A 00
     667B 1A  
     667C 02
0720 667D 02    DATA >0221, >0700, >DBC1, >FFFE, >045B
     667E 21
     667F 07  
     6680 00
     6681 DB  
     6682 C1
     6683 FF  
     6684 FE
     6685 04  
     6686 5B
0721          
0722          * 0005 0000 C08B  18   MOV R11,R2
0723          * 0006 0002 D060  34   MOVB @PAD0,R1
0724          *      0004 835C
0725          * 0007 0006 0941  56   SRL  R1,4
0726          * 0008 0008 06A0  32   BL   @!
0727          *      000A 8318
0728          * 0009 000C D060  34   MOVB @PAD0,R1
0729          *      000E 835C
0730          * 0010 0010 0241  22   ANDI R1,>0F00
0731          *      0012 0F00
0732          * 0011 0014 C2C2  18   MOV R2,R11
0733          * 0012               !:
0734          * 0013 0016 0221  22   AI   R1,'0'*256
0735          *      0018 3000
0736          * 0014 001A 0281  22   CI   R1,('9'+1)*>100
0737          *      001C 3A00
0738          * 0015 001E 1A02  14   JL   !
0739          * 0016 0020 0221  22   AI   R1,>700
0740          *      0022 0700
0741          * 0017               !
0742          * 0018 0024 DBC1  38   MOVB  R1,@>FFFE(R15)  write byte to VDP
0743          *      0026 FFFE
0744          * 0019 0028 045B  20   RT
0745          
0746          
0747          *----------------------------------------
0748          * VDP setup for module
0749          *----------------------------------------
0750          GVDPSETUP
0751 6687 BE      ST    >D0,V@>0300      no sprites
     6688 A3  
     6689 00
     668A D0  
0752 668B BE      ST    >F5,V@>0380      init color table as white on blue for all chars
     668C A3  
     668D 80
     668E F5  
0753 668F 35      MOVE  >001F,V@>0380,V@>0381
     6690 00  
     6691 1F
     6692 A3  
     6693 81
     6694 A3  
     6695 80
0754 6696 07      ALL   >20              erase screen
     6697 20  
0755 6698 04      BACK  >F5              screen colors: white on light blue
     6699 F5  
0756 669A 00      RTN
0757          
0758              COPY 'screen.gpl'
              > screen.gpl
0001          * Character definitions
0002 669B 00  GUDG96	BYTE >00,>00,>00,>00,>00,>00,>00,>00 ; Character 96
     669C 00  
     669D 00  
     669E 00  
     669F 00  
     66A0 00  
     66A1 00  
     66A2 00  
0003 66A3 00  GUDG97	BYTE >00,>00,>70,>43,>72,>42,>42,>72 ; Character 97
     66A4 00  
     66A5 70  
     66A6 43  
     66A7 72  
     66A8 42  
     66A9 42  
     66AA 72  
0004 66AB 00  GUDG98	BYTE >00,>28,>08,>A9,>2A,>2E,>2B,>29 ; Character 98
     66AC 28  
     66AD 08  
     66AE A9  
     66AF 2A  
     66B0 2E  
     66B1 2B  
     66B2 29  
0005 66B3 00  GUDG99	BYTE >00,>00,>0F,>09,>09,>0E,>08,>08 ; Character 99
     66B4 00  
     66B5 0F  
     66B6 09  
     66B7 09  
     66B8 0E  
     66B9 08  
     66BA 08  
0006 66BB 00  GUDG100	BYTE >00,>40,>00,>46,>49,>4F,>48,>46 ; Character 100
     66BC 40  
     66BD 00  
     66BE 46  
     66BF 49  
     66C0 4F  
     66C1 48  
     66C2 46  
0007 66C3 00  GUDG101	BYTE >00,>41,>41,>79,>49,>49,>49,>49 ; Character 101
     66C4 41  
     66C5 41  
     66C6 79  
     66C7 49  
     66C8 49  
     66C9 49  
     66CA 49  
0008 66CB 00  GUDG102	BYTE >00,>40,>40,>1C,>10,>0C,>06,>1C ; Character 102
     66CC 40  
     66CD 40  
     66CE 1C  
     66CF 10  
     66D0 0C  
     66D1 06  
     66D2 1C  
0009 66D3 00  GUDG103	BYTE >00,>00,>00,>00,>00,>00,>1C,>3F ; Character 103
     66D4 00  
     66D5 00  
     66D6 00  
     66D7 00  
     66D8 00  
     66D9 1C  
     66DA 3F  
0010 66DB 00  GUDG104	BYTE >00,>00,>00,>00,>00,>00,>00,>3F ; Character 104
     66DC 00  
     66DD 00  
     66DE 00  
     66DF 00  
     66E0 00  
     66E1 00  
     66E2 3F  
0011 66E3 00  GUDG105	BYTE >00,>00,>00,>00,>00,>00,>00,>9C ; Character 105
     66E4 00  
     66E5 00  
     66E6 00  
     66E7 00  
     66E8 00  
     66E9 00  
     66EA 9C  
0012 66EB 00  GUDG106	BYTE >00,>00,>00,>00,>00,>00,>07,>3F ; Character 106
     66EC 00  
     66ED 00  
     66EE 00  
     66EF 00  
     66F0 00  
     66F1 07  
     66F2 3F  
0013 66F3 00  GUDG107	BYTE >00,>00,>00,>00,>00,>00,>00,>F0 ; Character 107
     66F4 00  
     66F5 00  
     66F6 00  
     66F7 00  
     66F8 00  
     66F9 00  
     66FA F0  
0014 66FB 00  GUDG108	BYTE >00,>00,>00,>00,>00,>00,>06,>9F ; Character 108
     66FC 00  
     66FD 00  
     66FE 00  
     66FF 00  
     6700 00  
     6701 06  
     6702 9F  
0015 6703 00  GUDG109	BYTE >00,>00,>00,>00,>00,>00,>03,>8F ; Character 109
     6704 00  
     6705 00  
     6706 00  
     6707 00  
     6708 00  
     6709 03  
     670A 8F  
0016 670B 00  GUDG110	BYTE >00,>00,>00,>00,>00,>00,>00,>C7 ; Character 110
     670C 00  
     670D 00  
     670E 00  
     670F 00  
     6710 00  
     6711 00  
     6712 C7  
0017 6713 00  GUDG111	BYTE >00,>00,>00,>00,>00,>00,>00,>F3 ; Character 111
     6714 00  
     6715 00  
     6716 00  
     6717 00  
     6718 00  
     6719 00  
     671A F3  
0018 671B 00  GUDG112	BYTE >00,>00,>00,>00,>00,>00,>C0,>F1 ; Character 112
     671C 00  
     671D 00  
     671E 00  
     671F 00  
     6720 00  
     6721 C0  
     6722 F1  
0019 6723 00  GUDG113	BYTE >00,>00,>00,>00,>00,>00,>60,>F8 ; Character 113
     6724 00  
     6725 00  
     6726 00  
     6727 00  
     6728 00  
     6729 60  
     672A F8  
0020 672B 00  GUDG114	BYTE >00,>00,>00,>00,>00,>00,>00,>FC ; Character 114
     672C 00  
     672D 00  
     672E 00  
     672F 00  
     6730 00  
     6731 00  
     6732 FC  
0021 6733 00  GUDG115	BYTE >00,>03,>0F,>1F,>3F,>3F,>7F,>7E ; Character 115
     6734 03  
     6735 0F  
     6736 1F  
     6737 3F  
     6738 3F  
     6739 7F  
     673A 7E  
0022 673B 00  GUDG116	BYTE >00,>F0,>FC,>FE,>FF,>FF,>3F,>3F ; Character 116
     673C F0  
     673D FC  
     673E FE  
     673F FF  
     6740 FF  
     6741 3F  
     6742 3F  
0023 6743 00  GUDG117	BYTE >00,>00,>00,>00,>00,>80,>80,>80 ; Character 117
     6744 00  
     6745 00  
     6746 00  
     6747 00  
     6748 80  
     6749 80  
     674A 80  
0024 674B 7F  GUDG118	BYTE >7F,>FF,>FF,>FE,>FE,>FE,>FE,>FE ; Character 118
     674C FF  
     674D FF  
     674E FE  
     674F FE  
     6750 FE  
     6751 FE  
     6752 FE  
0025 6753 FF  GUDG119	BYTE >FF,>FF,>FF,>7F,>7F,>7F,>7F,>7F ; Character 119
     6754 FF  
     6755 FF  
     6756 7F  
     6757 7F  
     6758 7F  
     6759 7F  
     675A 7F  
0026 675B 3F  GUDG120	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>3F,>3F ; Character 120
     675C 3F  
     675D 3F  
     675E 3F  
     675F 3F  
     6760 3F  
     6761 3F  
     6762 3F  
0027 6763 BC  GUDG121	BYTE >BC,>FC,>FC,>FD,>FD,>FD,>F9,>C1 ; Character 121
     6764 FC  
     6765 FC  
     6766 FD  
     6767 FD  
     6768 FD  
     6769 F9  
     676A C1  
0028 676B 7F  GUDG122	BYTE >7F,>FF,>FF,>FC,>FC,>FC,>FC,>FC ; Character 122
     676C FF  
     676D FF  
     676E FC  
     676F FC  
     6770 FC  
     6771 FC  
     6772 FC  
0029 6773 F8  GUDG123	BYTE >F8,>FC,>FE,>FE,>FE,>FE,>FE,>FE ; Character 123
     6774 FC  
     6775 FE  
     6776 FE  
     6777 FE  
     6778 FE  
     6779 FE  
     677A FE  
0030 677B FF  GUDG124	BYTE >FF,>FF,>FF,>9F,>9F,>9F,>9F,>9F ; Character 124
     677C FF  
     677D FF  
     677E 9F  
     677F 9F  
     6780 9F  
     6781 9F  
     6782 9F  
0031 6783 DF  GUDG125	BYTE >DF,>FF,>FF,>E7,>C7,>C7,>C7,>C7 ; Character 125
     6784 FF  
     6785 FF  
     6786 E7  
     6787 C7  
     6788 C7  
     6789 C7  
     678A C7  
0032 678B E7  GUDG126	BYTE >E7,>E7,>E7,>F7,>F7,>F7,>F7,>F7 ; Character 126
     678C E7  
     678D E7  
     678E F7  
     678F F7  
     6790 F7  
     6791 F7  
     6792 F7  
0033 6793 FF  GUDG127	BYTE >FF,>FF,>FF,>F3,>F3,>F3,>F3,>F3 ; Character 127
     6794 FF  
     6795 FF  
     6796 F3  
     6797 F3  
     6798 F3  
     6799 F3  
     679A F3  
0034 679B FB  GUDG128	BYTE >FB,>FF,>FF,>FC,>F8,>F8,>F8,>F8 ; Character 128
     679C FF  
     679D FF  
     679E FC  
     679F F8  
     67A0 F8  
     67A1 F8  
     67A2 F8  
0035 67A3 FC  GUDG129	BYTE >FC,>FC,>FC,>FE,>FE,>FE,>FE,>FE ; Character 129
     67A4 FC  
     67A5 FC  
     67A6 FE  
     67A7 FE  
     67A8 FE  
     67A9 FE  
     67AA FE  
0036 67AB FE  GUDG130	BYTE >FE,>FE,>7E,>7E,>7E,>7E,>7E,>3F ; Character 130
     67AC FE  
     67AD 7E  
     67AE 7E  
     67AF 7E  
     67B0 7E  
     67B1 7E  
     67B2 3F  
0037 67B3 3F  GUDG131	BYTE >3F,>7F,>7F,>7F,>7E,>7E,>7E,>7E ; Character 131
     67B4 7F  
     67B5 7F  
     67B6 7F  
     67B7 7E  
     67B8 7E  
     67B9 7E  
     67BA 7E  
0038 67BB 7E  GUDG132	BYTE >7E,>7E,>7E,>00,>00,>00,>00,>01 ; Character 132
     67BC 7E  
     67BD 7E  
     67BE 00  
     67BF 00  
     67C0 00  
     67C1 00  
     67C2 01  
0039 67C3 3F  GUDG133	BYTE >3F,>3F,>3F,>7F,>7F,>FF,>FF,>FE ; Character 133
     67C4 3F  
     67C5 3F  
     67C6 7F  
     67C7 7F  
     67C8 FF  
     67C9 FF  
     67CA FE  
0040 67CB 80  GUDG134	BYTE >80,>80,>80,>80,>00,>00,>00,>00 ; Character 134
     67CC 80  
     67CD 80  
     67CE 80  
     67CF 00  
     67D0 00  
     67D1 00  
     67D2 00  
0041 67D3 FE  GUDG135	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FF ; Character 135
     67D4 FE  
     67D5 FE  
     67D6 FE  
     67D7 FE  
     67D8 FE  
     67D9 FE  
     67DA FF  
0042 67DB 7F  GUDG136	BYTE >7F,>7F,>7F,>7F,>7F,>7F,>7F,>FF ; Character 136
     67DC 7F  
     67DD 7F  
     67DE 7F  
     67DF 7F  
     67E0 7F  
     67E1 7F  
     67E2 FF  
0043 67E3 C1  GUDG137	BYTE >C1,>81,>81,>81,>81,>81,>81,>81 ; Character 137
     67E4 81  
     67E5 81  
     67E6 81  
     67E7 81  
     67E8 81  
     67E9 81  
     67EA 81  
0044 67EB FC  GUDG138	BYTE >FC,>FC,>FC,>FC,>FC,>FC,>FC,>FC ; Character 138
     67EC FC  
     67ED FC  
     67EE FC  
     67EF FC  
     67F0 FC  
     67F1 FC  
     67F2 FC  
0045 67F3 FE  GUDG139	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FE ; Character 139
     67F4 FE  
     67F5 FE  
     67F6 FE  
     67F7 FE  
     67F8 FE  
     67F9 FE  
     67FA FE  
0046 67FB 9F  GUDG140	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>9F,>9F ; Character 140
     67FC 9F  
     67FD 9F  
     67FE 9F  
     67FF 9F  
     6800 9F  
     6801 9F  
     6802 9F  
0047 6803 C7  GUDG141	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>C7,>C7 ; Character 141
     6804 C7  
     6805 C7  
     6806 C7  
     6807 C7  
     6808 C7  
     6809 C7  
     680A C7  
0048 680B F7  GUDG142	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>F7,>F7 ; Character 142
     680C F7  
     680D F7  
     680E F7  
     680F F7  
     6810 F7  
     6811 F7  
     6812 F7  
0049 6813 F3  GUDG143	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>F3,>F3 ; Character 143
     6814 F3  
     6815 F3  
     6816 F3  
     6817 F3  
     6818 F3  
     6819 F3  
     681A F3  
0050 681B F8  GUDG144	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>F8,>F8 ; Character 144
     681C F8  
     681D F8  
     681E F8  
     681F F8  
     6820 F8  
     6821 F8  
     6822 F8  
0051 6823 3F  GUDG145	BYTE >3F,>3F,>3F,>3F,>1F,>1F,>1F,>1F ; Character 145
     6824 3F  
     6825 3F  
     6826 3F  
     6827 1F  
     6828 1F  
     6829 1F  
     682A 1F  
0052 682B 7E  GUDG146	BYTE >7E,>7E,>7E,>7E,>FC,>FC,>FC,>FC ; Character 146
     682C 7E  
     682D 7E  
     682E 7E  
     682F FC  
     6830 FC  
     6831 FC  
     6832 FC  
0053 6833 01  GUDG147	BYTE >01,>03,>07,>07,>0F,>0F,>1F,>3F ; Character 147
     6834 03  
     6835 07  
     6836 07  
     6837 0F  
     6838 0F  
     6839 1F  
     683A 3F  
0054 683B FC  GUDG148	BYTE >FC,>FC,>F8,>F8,>F0,>E0,>E0,>C0 ; Character 148
     683C FC  
     683D F8  
     683E F8  
     683F F0  
     6840 E0  
     6841 E0  
     6842 C0  
0055 6843 7F  GUDG149	BYTE >7F,>7F,>3F,>00,>FE,>FE,>FF,>7F ; Character 149
     6844 7F  
     6845 3F  
     6846 00  
     6847 FE  
     6848 FE  
     6849 FF  
     684A 7F  
0056 684B FF  GUDG150	BYTE >FF,>FF,>7F,>7F,>7F,>7F,>FF,>FE ; Character 150
     684C FF  
     684D 7F  
     684E 7F  
     684F 7F  
     6850 7F  
     6851 FF  
     6852 FE  
0057 6853 3F  GUDG151	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>00,>00 ; Character 151
     6854 3F  
     6855 3F  
     6856 3F  
     6857 3F  
     6858 3F  
     6859 00  
     685A 00  
0058 685B 81  GUDG152	BYTE >81,>81,>80,>80,>80,>80,>00,>00 ; Character 152
     685C 81  
     685D 80  
     685E 80  
     685F 80  
     6860 80  
     6861 00  
     6862 00  
0059 6863 FC  GUDG153	BYTE >FC,>FC,>FF,>FF,>7F,>1F,>00,>00 ; Character 153
     6864 FC  
     6865 FF  
     6866 FF  
     6867 7F  
     6868 1F  
     6869 00  
     686A 00  
0060 686B FE  GUDG154	BYTE >FE,>FE,>FC,>FC,>F8,>E0,>00,>00 ; Character 154
     686C FE  
     686D FC  
     686E FC  
     686F F8  
     6870 E0  
     6871 00  
     6872 00  
0061 6873 9F  GUDG155	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>00,>00 ; Character 155
     6874 9F  
     6875 9F  
     6876 9F  
     6877 9F  
     6878 9F  
     6879 00  
     687A 00  
0062 687B C7  GUDG156	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>00,>00 ; Character 156
     687C C7  
     687D C7  
     687E C7  
     687F C7  
     6880 C7  
     6881 00  
     6882 00  
0063 6883 F7  GUDG157	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>00,>00 ; Character 157
     6884 F7  
     6885 F7  
     6886 F7  
     6887 F7  
     6888 F7  
     6889 00  
     688A 00  
0064 688B F3  GUDG158	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>00,>00 ; Character 158
     688C F3  
     688D F3  
     688E F3  
     688F F3  
     6890 F3  
     6891 00  
     6892 00  
0065 6893 F8  GUDG159	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>00,>00 ; Character 159
     6894 F8  
     6895 F8  
     6896 F8  
     6897 F8  
     6898 F8  
     6899 00  
     689A 00  
0066 689B FE  GUDG160	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>00,>00 ; Character 160
     689C FE  
     689D FE  
     689E FE  
     689F FE  
     68A0 FE  
     68A1 00  
     68A2 00  
0067 68A3 1F  GUDG161	BYTE >1F,>0F,>0F,>0F,>0F,>1F,>3F,>3F ; Character 161
     68A4 0F  
     68A5 0F  
     68A6 0F  
     68A7 0F  
     68A8 1F  
     68A9 3F  
     68AA 3F  
0068 68AB FC  GUDG162	BYTE >FC,>FC,>FC,>FC,>F8,>F8,>F8,>F0 ; Character 162
     68AC FC  
     68AD FC  
     68AE FC  
     68AF F8  
     68B0 F8  
     68B1 F8  
     68B2 F0  
0069 68B3 3F  GUDG163	BYTE >3F,>7F,>7F,>7F,>7F,>7F,>00,>00 ; Character 163
     68B4 7F  
     68B5 7F  
     68B6 7F  
     68B7 7F  
     68B8 7F  
     68B9 00  
     68BA 00  
0070 68BB 80  GUDG164	BYTE >80,>FF,>FF,>FF,>FF,>FF,>00,>00 ; Character 164
     68BC FF  
     68BD FF  
     68BE FF  
     68BF FF  
     68C0 FF  
     68C1 00  
     68C2 00  
0071 68C3 00  GUDG165	BYTE >00,>00,>80,>80,>80,>80,>00,>00 ; Character 165
     68C4 00  
     68C5 80  
     68C6 80  
     68C7 80  
     68C8 80  
     68C9 00  
     68CA 00  
0072 68CB 3F  GUDG166	BYTE >3F,>0F,>00,>00,>00,>00,>00,>00 ; Character 166
     68CC 0F  
     68CD 00  
     68CE 00  
     68CF 00  
     68D0 00  
     68D1 00  
     68D2 00  
0073 68D3 FC  GUDG167	BYTE >FC,>F0,>00,>00,>00,>00,>00,>00 ; Character 167
     68D4 F0  
     68D5 00  
     68D6 00  
     68D7 00  
     68D8 00  
     68D9 00  
     68DA 00  
0074 68DB 3F  GUDG168	BYTE >3F,>00,>00,>00,>00,>00,>00,>00 ; Character 168
     68DC 00  
     68DD 00  
     68DE 00  
     68DF 00  
     68E0 00  
     68E1 00  
     68E2 00  
0075 68E3 E0  GUDG169	BYTE >E0,>00,>00,>00,>00,>00,>00,>00 ; Character 169
     68E4 00  
     68E5 00  
     68E6 00  
     68E7 00  
     68E8 00  
     68E9 00  
     68EA 00  
0076 68EB 3E  GUDG170	BYTE >3E,>60,>60,>60,>60,>60,>32,>1E ; Character 170
     68EC 60  
     68ED 60  
     68EE 60  
     68EF 60  
     68F0 60  
     68F1 32  
     68F2 1E  
0077 68F3 3E  GUDG171	BYTE >3E,>66,>43,>C3,>43,>62,>76,>3C ; Character 171
     68F4 66  
     68F5 43  
     68F6 C3  
     68F7 43  
     68F8 62  
     68F9 76  
     68FA 3C  
0078 68FB 63  GUDG172	BYTE >63,>73,>7B,>6F,>6F,>67,>67,>63 ; Character 172
     68FC 73  
     68FD 7B  
     68FE 6F  
     68FF 6F  
     6900 67  
     6901 67  
     6902 63  
0079 6903 7C  GUDG173	BYTE >7C,>60,>60,>7C,>60,>60,>60,>60 ; Character 173
     6904 60  
     6905 60  
     6906 7C  
     6907 60  
     6908 60  
     6909 60  
     690A 60  
0080 690B C7  GUDG174	BYTE >C7,>CC,>CC,>CC,>CC,>CC,>CE,>C7 ; Character 174
     690C CC  
     690D CC  
     690E CC  
     690F CC  
     6910 CC  
     6911 CE  
     6912 C7  
0081 6913 C0  GUDG175	BYTE >C0,>00,>00,>C0,>E0,>60,>E0,>C0 ; Character 175
     6914 00  
     6915 00  
     6916 C0  
     6917 E0  
     6918 60  
     6919 E0  
     691A C0  
0082 691B 61  GLINE0_25 BYTE >61,>62,>63,>64,>65,>66,>67,>68,>68,>69,>6A,>6B,>68,>6C,>6D,>6E,>6F,>70,>71,>72,>68,>73,>74,>75
     691C 62  
     691D 63  
     691E 64  
     691F 65  
     6920 66  
     6921 67  
     6922 68  
     6923 68  
     6924 69  
     6925 6A  
     6926 6B  
     6927 68  
     6928 6C  
     6929 6D  
     692A 6E  
     692B 6F  
     692C 70  
     692D 71  
     692E 72  
     692F 68  
     6930 73  
     6931 74  
     6932 75  
0083 6933 76  GLINE1_25 BYTE >76,>77,>78,>79,>7A,>7B,>78,>7C,>7D,>7E,>7F,>80,>81,>82,>83,>84,>85,>86
     6934 77  
     6935 78  
     6936 79  
     6937 7A  
     6938 7B  
     6939 78  
     693A 7C  
     693B 7D  
     693C 7E  
     693D 7F  
     693E 80  
     693F 81  
     6940 82  
     6941 83  
     6942 84  
     6943 85  
     6944 86  
0084 6945 87  GLINE2_24 BYTE >87,>88,>78,>89,>8A,>8B,>78,>8C,>8D,>8E,>8F,>90,>8B,>91,>92,>93,>94
     6946 88  
     6947 78  
     6948 89  
     6949 8A  
     694A 8B  
     694B 78  
     694C 8C  
     694D 8D  
     694E 8E  
     694F 8F  
     6950 90  
     6951 8B  
     6952 91  
     6953 92  
     6954 93  
     6955 94  
0085 6956 95  GLINE3_25 BYTE >95,>96,>97,>98,>99,>9A,>97,>9B,>9C,>9D,>9E,>9F,>A0,>A1,>A2,>A3,>A4,>A5
     6957 96  
     6958 97  
     6959 98  
     695A 99  
     695B 9A  
     695C 97  
     695D 9B  
     695E 9C  
     695F 9D  
     6960 9E  
     6961 9F  
     6962 A0  
     6963 A1  
     6964 A2  
     6965 A3  
     6966 A4  
     6967 A5  
0086 6968 A6  GLINE4_9 BYTE >A6,>A7
     6969 A7  
0087 696A A8  GLINE4_28 BYTE >A8,>A9,>AA,>AB,>AC,>AD,>AE,>AF
     696B A9  
     696C AA  
     696D AB  
     696E AC  
     696F AD  
     6970 AE  
     6971 AF  
0088          
0089          G_SCR1
0090 6972 31      MOVE >0280,G@GUDG96,V@>0B00 ; Copy our screen chars
     6973 02  
     6974 80
     6975 AB  
     6976 00
     6977 66  
     6978 9B
0091          
0092 6979 31  	MOVE >0018,G@GLINE0_25,V@>0001
     697A 00  
     697B 18
     697C A0  
     697D 01
     697E 69  
     697F 1B
0093 6980 31  	MOVE >0012,G@GLINE1_25,V@>0027
     6981 00  
     6982 12
     6983 A0  
     6984 27
     6985 69  
     6986 33
0094 6987 31  	MOVE >0011,G@GLINE2_24,V@>0047
     6988 00  
     6989 11
     698A A0  
     698B 47
     698C 69  
     698D 45
0095 698E 31  	MOVE >0012,G@GLINE3_25,V@>0067
     698F 00  
     6990 12
     6991 A0  
     6992 67
     6993 69  
     6994 56
0096 6995 31  	MOVE >0002,G@GLINE4_9,V@>0087
     6996 00  
     6997 02
     6998 A0  
     6999 87
     699A 69  
     699B 68
0097 699C 31  	MOVE >0008,G@GLINE4_28,V@>0094
     699D 00  
     699E 08
     699F A0  
     69A0 94
     69A1 69  
     69A2 6A
0098          
0099 69A3 00      RTN
0100          
