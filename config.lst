XGA99 CROSS-ASSEMBLER   VERSION 3.0.1
              > config.gpl
0001          * config.gpl
0002          * Configurator for GROMMY2
0003          * At this point this is just a demo how to render the generated screen.gpl
0004          * EP 2023-11-26
0005          *
0006          * Compile the GPL code to binary with:
0007          * xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
0008          * output file is config.bin, since the filename ends with g it is treated
0009          * by an emulator such as js99er.net as a GROM file.
0010          *
0011          * This file includes the screen.gpl file at the very end.
0012          *
0013          
0014          LALIGN    EQU >02              Left alignment of text
0015          LALIGN2   EQU >03
0016          LAYOUTVER EQU 5         Row for Version number
0017          LAYOUTBAN EQU 8        Row for selected bank display
0018          VEROFS    EQU 32*LAYOUTVER
0019          VALIDIND  EQU VEROFS-29         ; Indicator for valid command
0020          * Grommy2 command buffer in scratchpad
0021          GCMDBYTE EQU >8340
0022          GCMDP2   EQU >8342
0023          GCMDP3   EQU >8343
0024          GCMDP4   EQU >8344
0025          GCMDP5   EQU >8345
0026          GCMDP6   EQU >8346
0027          GCMDP7   EQU >8347
0028          
0029          BANK    EQU >8350           Active bank
0030          SHADOW  EQU >8351           Shadow enable / disable
0031          PAD0    EQU >835C
0032          PAD1    EQU >835D
0033          PAD2    EQU >835E
0034          PAD3    EQU >835F
0035          PAD4    EQU >8360
0036          DUMPA   EQU >8362           ; GROM Dump address
0037          VRAMP   EQU >8340           ; VRAM ptr overlays GCMDBYTE
0038          
0039          SCANKEY EQU >8375
0040          * Hardware interface address
0041          HWIF     EQU >5FF0
0042          
0043          
0044 6000 AA  G6000  DATA >AA01             standard header  version 1
     6001 01
0045 6002 00         DATA >0000             # of programs 0
     6003 00
0046 6004 00         DATA >0000             no power up
     6005 00
0047 6006 60         DATA G6010             program
     6007 10
0048 6008 00         DATA >0000             DSRs
     6009 00
0049 600A 00         DATA >0000             subprograms
     600B 00
0050 600C 00         DATA >0000
     600D 00
0051 600E 00         DATA >0000
     600F 00
0052          
0053 6010 00  G6010  DATA >0000         * No next program
     6011 00
0054 6012 60         DATA GPROG
     6013 2A
0055 6014 0E         STRI 'GROMMY2 CONFIG'
     6015 47  
     6016 52  
     6017 4F  
     6018 4D  
     6019 4D  
     601A 59  
     601B 32  
     601C 20  
     601D 43  
     601E 4F  
     601F 4E  
     6020 46  
     6021 49  
     6022 47  
0056          
0057          GVREGS
0058 6023 E0      BYTE  >E0              VDP registers values: standard mode
0059 6024 00      BYTE  >00              screen image at >0000
0060 6025 0E      BYTE  >0E              color table at >0380
0061 6026 01      BYTE  >01              char patterns at >0800
0062 6027 06      BYTE  >06              sprite attributes at >0300
0063 6028 00      BYTE  >00              sprite patterns at >0000
0064 6029 F5      BYTE  >F5              text/screen colors: white / light blue
0065          
0066          GPROG
0067 602A 86      CLR   @>8374
     602B 74  
0068 602C BF      DST   >0900,@>834A     load upper case chars 32->
     602D 4A  
     602E 09  
     602F 00
0069 6030 06      CALL  G@>0018
     6031 00  
     6032 18
0070          * Setup roughly as with mini memory
0071 6033 39      MOVE >0007,G@GVREGS,#>01    Set VDP Regs
     6034 00  
     6035 07
     6036 01  
     6037 60  
     6038 23
0072 6039 86      CLR   V@>0800          clear charpats 0-31
     603A A8  
     603B 00
0073 603C 35      MOVE  >00FF,V@>0800,V@>0801
     603D 00  
     603E FF
     603F A8  
     6040 01
     6041 A8  
     6042 00
0074          
0075 6043 BE      ST    >7E,@>8373       init subroutine stack
     6044 73  
     6045 7E  
0076 6046 87      DCLR  @>8322           clear error code
     6047 22  
0077 6048 87      DCLR  @>8348           clear flags
     6049 48  
0078          
0079 604A 87      DCLR   @DUMPA
     604B 62  
0080 604C 86      CLR    @BANK           Actually init from grommy2
     604D 50  
0081 604E 86      CLR    @SHADOW         Actually init from grommy2
     604F 51  
0082          
0083 6050 06      CALL G@GVDPSETUP
     6051 64  
     6052 AF
0084          
0085 6053 06      CALL G@G_SCR1       ; Setup the screen which was automatically generated
     6054 67  
     6055 9A
0086          SCREEN1:
0087          * Use the FMT token to add some strings on the screen
0088 6056 08      FMT
0089 6057 FF      COL LALIGN
     6058 02  
0090 6059 FE      ROW LAYOUTVER
     605A 05  
0091 605B 1D      HTEX 'VERSION 0.0.00 BANK 0 SHADOW 0'
     605C 56  
     605D 45  
     605E 52  
     605F 53  
     6060 49  
     6061 4F  
     6062 4E  
     6063 20  
     6064 30  
     6065 2E  
     6066 30  
     6067 2E  
     6068 30  
     6069 30  
     606A 20  
     606B 42  
     606C 41  
     606D 4E  
     606E 4B  
     606F 20  
     6070 30  
     6071 20  
     6072 53  
     6073 48  
     6074 41  
     6075 44  
     6076 4F  
     6077 57  
     6078 20  
     6079 30  
0092 607A A0      ROW+ >01
0093 607B FF      COL LALIGN
     607C 02  
0094 607D 19      HTEX 'SELECT GROM BANK FOR READS'
     607E 53  
     607F 45  
     6080 4C  
     6081 45  
     6082 43  
     6083 54  
     6084 20  
     6085 47  
     6086 52  
     6087 4F  
     6088 4D  
     6089 20  
     608A 42  
     608B 41  
     608C 4E  
     608D 4B  
     608E 20  
     608F 46  
     6090 4F  
     6091 52  
     6092 20  
     6093 52  
     6094 45  
     6095 41  
     6096 44  
     6097 53  
0095 6098 A0      ROW+ >01
0096 6099 FF      COL LALIGN2
     609A 03  
0097 609B 0C      HTEX '0 SYSTEM BANK'
     609C 30  
     609D 20  
     609E 53  
     609F 59  
     60A0 53  
     60A1 54  
     60A2 45  
     60A3 4D  
     60A4 20  
     60A5 42  
     60A6 41  
     60A7 4E  
     60A8 4B  
0098 60A9 A0      ROW+ >01
0099 60AA FF      COL LALIGN2
     60AB 03  
0100 60AC 0C      HTEX '1 USER BANK 1'
     60AD 31  
     60AE 20  
     60AF 55  
     60B0 53  
     60B1 45  
     60B2 52  
     60B3 20  
     60B4 42  
     60B5 41  
     60B6 4E  
     60B7 4B  
     60B8 20  
     60B9 31  
0101 60BA A0      ROW+ >01
0102 60BB FF      COL LALIGN2
     60BC 03  
0103 60BD 0C      HTEX '2 USER BANK 2'
     60BE 32  
     60BF 20  
     60C0 55  
     60C1 53  
     60C2 45  
     60C3 52  
     60C4 20  
     60C5 42  
     60C6 41  
     60C7 4E  
     60C8 4B  
     60C9 20  
     60CA 32  
0104 60CB A0      ROW+ >01
0105 60CC FF      COL LALIGN2
     60CD 03  
0106 60CE 0A      HTEX '3 GRAM BANK'
     60CF 33  
     60D0 20  
     60D1 47  
     60D2 52  
     60D3 41  
     60D4 4D  
     60D5 20  
     60D6 42  
     60D7 41  
     60D8 4E  
     60D9 4B  
0107          
0108 60DA A1      ROW+ >02
0109 60DB FF      COL LALIGN
     60DC 02  
0110 60DD 09      HTEX 'SHADOW RAM'
     60DE 53  
     60DF 48  
     60E0 41  
     60E1 44  
     60E2 4F  
     60E3 57  
     60E4 20  
     60E5 52  
     60E6 41  
     60E7 4D  
0111 60E8 A0      ROW+ >01
0112 60E9 FF      COL LALIGN2
     60EA 03  
0113 60EB 15      HTEX '4 ENABLE     5 DISABLE'
     60EC 34  
     60ED 20  
     60EE 45  
     60EF 4E  
     60F0 41  
     60F1 42  
     60F2 4C  
     60F3 45  
     60F4 20  
     60F5 20  
     60F6 20  
     60F7 20  
     60F8 20  
     60F9 35  
     60FA 20  
     60FB 44  
     60FC 49  
     60FD 53  
     60FE 41  
     60FF 42  
     6100 4C  
     6101 45  
0114          
0115 6102 A1      ROW+ >02
0116 6103 FF      COL LALIGN
     6104 02  
0117 6105 16      HTEX 'FLASH GRAM TO USER BANK'
     6106 46  
     6107 4C  
     6108 41  
     6109 53  
     610A 48  
     610B 20  
     610C 47  
     610D 52  
     610E 41  
     610F 4D  
     6110 20  
     6111 54  
     6112 4F  
     6113 20  
     6114 55  
     6115 53  
     6116 45  
     6117 52  
     6118 20  
     6119 42  
     611A 41  
     611B 4E  
     611C 4B  
0118 611D A0      ROW+ >01
0119 611E FF      COL LALIGN2
     611F 03  
0120 6120 14      HTEX '6 BANK 1     7 BANK 2'
     6121 36  
     6122 20  
     6123 42  
     6124 41  
     6125 4E  
     6126 4B  
     6127 20  
     6128 31  
     6129 20  
     612A 20  
     612B 20  
     612C 20  
     612D 20  
     612E 37  
     612F 20  
     6130 42  
     6131 41  
     6132 4E  
     6133 4B  
     6134 20  
     6135 32  
0121          
0122 6136 A1      ROW+ >02
0123 6137 FF      COL LALIGN
     6138 02  
0124 6139 14      HTEX 'COPY ROM BANK TO GRAM'
     613A 43  
     613B 4F  
     613C 50  
     613D 59  
     613E 20  
     613F 52  
     6140 4F  
     6141 4D  
     6142 20  
     6143 42  
     6144 41  
     6145 4E  
     6146 4B  
     6147 20  
     6148 54  
     6149 4F  
     614A 20  
     614B 47  
     614C 52  
     614D 41  
     614E 4D  
0125 614F A0      ROW+ >01
0126 6150 FF      COL LALIGN2
     6151 03  
0127 6152 16      HTEX 'A COPY FROM SYSTEM BANK'
     6153 41  
     6154 20  
     6155 43  
     6156 4F  
     6157 50  
     6158 59  
     6159 20  
     615A 46  
     615B 52  
     615C 4F  
     615D 4D  
     615E 20  
     615F 53  
     6160 59  
     6161 53  
     6162 54  
     6163 45  
     6164 4D  
     6165 20  
     6166 42  
     6167 41  
     6168 4E  
     6169 4B  
0128 616A A0      ROW+ >01
0129 616B FF      COL LALIGN2
     616C 03  
0130 616D 16      HTEX 'B COPY FROM USER BANK 1'
     616E 42  
     616F 20  
     6170 43  
     6171 4F  
     6172 50  
     6173 59  
     6174 20  
     6175 46  
     6176 52  
     6177 4F  
     6178 4D  
     6179 20  
     617A 55  
     617B 53  
     617C 45  
     617D 52  
     617E 20  
     617F 42  
     6180 41  
     6181 4E  
     6182 4B  
     6183 20  
     6184 31  
0131 6185 A0      ROW+ >01
0132 6186 FF      COL LALIGN2
     6187 03  
0133 6188 16      HTEX 'C COPY FROM USER BANK 2'
     6189 43  
     618A 20  
     618B 43  
     618C 4F  
     618D 50  
     618E 59  
     618F 20  
     6190 46  
     6191 52  
     6192 4F  
     6193 4D  
     6194 20  
     6195 55  
     6196 53  
     6197 45  
     6198 52  
     6199 20  
     619A 42  
     619B 41  
     619C 4E  
     619D 4B  
     619E 20  
     619F 32  
0134          
0135 61A0 A0      ROW+ >01
0136 61A1 FF      COL LALIGN
     61A2 02  
0137 61A3 08      HTEX '9 MORE...'
     61A4 39  
     61A5 20  
     61A6 4D  
     61A7 4F  
     61A8 52  
     61A9 45  
     61AA 2E  
     61AB 2E  
     61AC 2E  
0138          
0139 61AD FB      FEND
0140          
0141          * Pattern address of character 0xFF
0142          PATADR EQU >0800+(255*8)
0143          * Test a couple of chars
0144          *    MOVE 64,G@DENSE_FONT,V@PATADR-64
0145          *    ST >F7,V@0
0146          *    ST >F8,V@1
0147          *    ST >F9,V@2
0148          *    ST >FA,V@3
0149          *    ST >FB,V@4
0150          *    ST >FC,V@5
0151          *    ST >FD,V@6
0152          *    ST >FE,V@7
0153          
0154 61AE 06      CALL  SHOW_VERSION      ; Get version, bank, shadow info
     61AF 63  
     61B0 CA
0155 61B1 05      B     GUPDATE           ; update screen
     61B2 62  
     61B3 6E
0156          
0157          GWAIT
0158 61B4 03      SCAN
0159 61B5 61      BS    GOTKEY
     61B6 C3  
0160          * We did not get a key. Animate something.
0161 61B7 BE      ST    >FF,V@>001F      Write char FF to top left corner
     61B8 A0  
     61B9 1F
     61BA FF  
0162 61BB A2      ADD   1,V@PATADR
     61BC AF  
     61BD 0F
     61BE F8
     61BF 01  
0163 61C0 05      B    G@GWAIT          wait for the user to press a key
     61C1 61  
     61C2 B4
0164          
0165          
0166          GOTKEY:
0167 61C3 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     61C4 A0  
     61C5 82
     61C6 75  
0168 61C7 BE      ST    ' ',V@VALIDIND        ; Assume invalid CMD
     61C8 A0  
     61C9 83
     61CA 20  
0169 61CB CE      CGT   '0'-1,@SCANKEY       greater than >= 0
     61CC 75  
     61CD 2F  
0170 61CE 42      BR    GG01              no skip forward
     61CF 68  
0171 61D0 CE      CGT   '9',@SCANKEY        Key greater than '9'?
     61D1 75  
     61D2 39  
0172 61D3 61      BS    CHECK_ABC             ; Yes: skip forward
     61D4 EE  
0173 61D5 A6      SUB   '0',@SCANKEY
     61D6 75  
     61D7 30  
0174 61D8 8A      CASE  @SCANKEY
     61D9 75  
0175 61DA 42      BR    KEY0
     61DB 12  
0176 61DC 42      BR    KEY1
     61DD 12  
0177 61DE 42      BR    KEY2
     61DF 12  
0178 61E0 42      BR    KEY3
     61E1 1D  
0179 61E2 42      BR    KEY4
     61E3 03  
0180 61E4 42      BR    KEY5
     61E5 0E  
0181 61E6 42      BR    KEY6
     61E7 25  
0182 61E8 42      BR    KEY7
     61E9 30  
0183 61EA 42      BR    KEY8
     61EB 35  
0184 61EC 42      BR    KEY9
     61ED 3E  
0185          CHECK_ABC
0186          ; Commands A,B and C
0187 61EE CE      CGT   'A'-1,@SCANKEY
     61EF 75  
     61F0 40  
0188 61F1 42      BR    GG01
     61F2 68  
0189 61F3 CE      CGT   'C',@SCANKEY
     61F4 75  
     61F5 43  
0190 61F6 62      BS    GG01
     61F7 68  
0191 61F8 A6      SUB   'A',@SCANKEY
     61F9 75  
     61FA 41  
0192 61FB 8A      CASE  @SCANKEY
     61FC 75  
0193 61FD 42      BR    KEYA
     61FE 41  
0194 61FF 42      BR    KEYB
     6200 4D  
0195 6201 42      BR    KEYC
     6202 52  
0196          
0197          KEY4:
0198 6203 BE      ST  1,@SHADOW
     6204 51  
     6205 01  
0199          SHADOWSET
0200 6206 BC      ST  @SHADOW,@GCMDP2    ; Set parameter 2
     6207 42  
     6208 51  
0201 6209 BE      ST  3,@GCMDBYTE         ; Command 3 shadow enable/disable
     620A 40  
     620B 03  
0202 620C 42      BR  ISSUECMD
     620D 5B  
0203          KEY5:
0204 620E 86      CLR @SHADOW
     620F 51  
0205 6210 42      BR  SHADOWSET
     6211 06  
0206          KEY0
0207          KEY1
0208          KEY2
0209 6212 BC      ST   @SCANKEY,@BANK
     6213 50  
     6214 75  
0210 6215 BC      ST   @SCANKEY,@GCMDP2    ; Set parameter 2
     6216 42  
     6217 75  
0211          BANKSEL
0212 6218 BE      ST   1,@GCMDBYTE         ; Command 1 select bank for reads
     6219 40  
     621A 01  
0213 621B 42      BR  ISSUECMD
     621C 5B  
0214          KEY3
0215 621D BC      ST   @SCANKEY,@BANK
     621E 50  
     621F 75  
0216 6220 BE      ST   8,@GCMDP2           ; GRAM bank is 8
     6221 42  
     6222 08  
0217 6223 42      BR   BANKSEL
     6224 18  
0218          
0219          KEY6:                       ; Flash GRAM to user bank 1
0220 6225 BE      ST   >01,@GCMDP2        ; User bank 1
     6226 42  
     6227 01  
0221          GRAM2FLASH
0222 6228 BE      ST   >3F,@GCMDP3        ; Bit mask: flash entire bank
     6229 43  
     622A 3F  
0223 622B BE      ST   4,@GCMDBYTE
     622C 40  
     622D 04  
0224 622E 42      BR  ISSUECMD
     622F 5B  
0225          KEY7:                       ; Flash GRAM to user bank 2
0226 6230 BE      ST   >02,@GCMDP2        ; User bank 2
     6231 42  
     6232 02  
0227 6233 42      BR   GRAM2FLASH
     6234 28  
0228          KEY8
0229 6235 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6236 A0  
     6237 83
     6238 2A  
0230 6239 06      CALL  SHOW_VERSION
     623A 63  
     623B CA
0231 623C 41      BR    GWAIT
     623D B4  
0232          KEY9:
0233 623E 05      B   DUMPSCREEN
     623F 62  
     6240 A3
0234          
0235          KEYA:                       ; Copy bank 0 to GRAM
0236 6241 BE      ST    0,@GCMDP2
     6242 42  
     6243 00  
0237          COPY2GRAM:
0238 6244 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6245 A0  
     6246 83
     6247 2A  
0239 6248 BE      ST    2,@GCMDBYTE
     6249 40  
     624A 02  
0240 624B 42      BR    ISSUECMD
     624C 5B  
0241          KEYB:
0242 624D BE      ST    1,@GCMDP2
     624E 42  
     624F 01  
0243 6250 42      BR    COPY2GRAM
     6251 44  
0244          KEYC:
0245 6252 BE      ST    2,@GCMDP2
     6253 42  
     6254 02  
0246 6255 42      BR    COPY2GRAM
     6256 44  
0247          
0248          ISSUECMD1:                  ; Clear last 4 parameter bytes
0249 6257 87      DCLR  @GCMDBYTE+4
     6258 44  
0250 6259 87      DCLR  @GCMDBYTE+6
     625A 46  
0251          ISSUECMD:
0252 625B 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     625C 00  
     625D 08
     625E 48  
     625F 64  
     6260 4B
0253 6261 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6262 A0  
     6263 83
     6264 2A  
0254 6265 06      CALL  GSENDCMD          ; Send command to HW
     6266 64  
     6267 36
0255          
0256          GG01:
0257 6268 D6      CEQ   >0F,@SCANKEY       is it Fctn-9?
     6269 75  
     626A 0F  
0258 626B 42      BR    G@GCONT2         no: GCONT2
     626C 6E  
0259 626D 0B      EXIT                   yes: reset the TI-99/4A
0260          
0261          GCONT2
0262          * Update screen to reflect current status
0263          GUPDATE
0264          * Status of Shadow RAM enable/disable
0265 626E BE      ST  '0',@PAD0
     626F 5C  
     6270 30  
0266 6271 A0      ADD @SHADOW,@PAD0
     6272 5C  
     6273 51  
0267 6274 BC      ST  @PAD0,V@VEROFS+>1F        Write to VRAM
     6275 A0  
     6276 BF
     6277 5C  
0268          * Status of selected bank
0269 6278 BE      ST  '0',@PAD0
     6279 5C  
     627A 30  
0270 627B A0      ADD @BANK,@PAD0
     627C 5C  
     627D 50  
0271 627E BC      ST  @PAD0,V@VEROFS+>16  ; Write to VRAM
     627F A0  
     6280 B6
     6281 5C  
0272          
0273          
0274          * Start update GROM read bank. First erase bank markings.
0275          BANKOFS EQU (32*LAYOUTBAN)+4
0276 6282 BE      ST ' ',V@BANKOFS
     6283 A1  
     6284 04
     6285 20  
0277 6286 BE      ST ' ',V@BANKOFS+>20
     6287 A1  
     6288 24
     6289 20  
0278 628A BE      ST ' ',V@BANKOFS+>40
     628B A1  
     628C 44
     628D 20  
0279 628E BE      ST ' ',V@BANKOFS+>60
     628F A1  
     6290 64
     6291 20  
0280 6292 87      DCLR @PAD0
     6293 5C  
0281 6294 BC      ST   @BANK,@PAD3        Copy to low byte the bank #
     6295 5F  
     6296 50  
0282 6297 E3      DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
     6298 5E  
     6299 00  
     629A 05
0283 629B BE      ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
     629C E1  
     629D 04
     629E 5E
     629F 2A  
0284          * End update GROM read bank.
0285 62A0 05      B   G@GWAIT
     62A1 61  
     62A2 B4
0286          
0287          *----------------------------------------
0288          * Second screen with a few features.
0289          *----------------------------------------
0290          DUMPSCREEN:
0291 62A3 BE      ST   ' ',V@VEROFS
     62A4 A0  
     62A5 A0
     62A6 20  
0292 62A7 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     62A8 02  
     62A9 5F
     62AA A0  
     62AB A1
     62AC A0  
     62AD A0
0293 62AE 08      FMT
0294 62AF FF      COL LALIGN
     62B0 02  
0295 62B1 FE      ROW LAYOUTVER
     62B2 05  
0296 62B3 1A      HTEX '1 DEC 2 INC DUMP ADDR 3 RET'
     62B4 31  
     62B5 20  
     62B6 44  
     62B7 45  
     62B8 43  
     62B9 20  
     62BA 32  
     62BB 20  
     62BC 49  
     62BD 4E  
     62BE 43  
     62BF 20  
     62C0 44  
     62C1 55  
     62C2 4D  
     62C3 50  
     62C4 20  
     62C5 41  
     62C6 44  
     62C7 44  
     62C8 52  
     62C9 20  
     62CA 33  
     62CB 20  
     62CC 52  
     62CD 45  
     62CE 54  
0297 62CF A0      ROW+ >01
0298 62D0 FF      COL LALIGN
     62D1 02  
0299 62D2 18      HTEX '0 BURN FIRMWARE FROM GRAM'
     62D3 30  
     62D4 20  
     62D5 42  
     62D6 55  
     62D7 52  
     62D8 4E  
     62D9 20  
     62DA 46  
     62DB 49  
     62DC 52  
     62DD 4D  
     62DE 57  
     62DF 41  
     62E0 52  
     62E1 45  
     62E2 20  
     62E3 46  
     62E4 52  
     62E5 4F  
     62E6 4D  
     62E7 20  
     62E8 47  
     62E9 52  
     62EA 41  
     62EB 4D  
0300 62EC A1      ROW+ >02
0301 62ED FF      COL LALIGN
     62EE 02  
0302 62EF 0A      HTEX 'GROM DUMPER'
     62F0 47  
     62F1 52  
     62F2 4F  
     62F3 4D  
     62F4 20  
     62F5 44  
     62F6 55  
     62F7 4D  
     62F8 50  
     62F9 45  
     62FA 52  
0303 62FB FB      FEND
0304          
0305          MAKEDUMP:
0306 62FC BF      DST   VEROFS+128,@VRAMP
     62FD 40  
     62FE 01  
     62FF 20
0307 6300 86      CLR   @PAD2             ; Row counter
     6301 5E  
0308          DUMP2:
0309 6302 BC      ST    @DUMPA,@PAD0      ; Hi byte off address
     6303 5C  
     6304 62  
0310 6305 06      CALL  HEXOUT
     6306 63  
     6307 99
0311 6308 A3      DADD  2,@VRAMP
     6309 40  
     630A 00  
     630B 02
0312 630C BC      ST    @DUMPA+1,@PAD0    ; Lo byte off address
     630D 5C  
     630E 63  
0313 630F 06      CALL  HEXOUT
     6310 63  
     6311 99
0314 6312 BE      ST    ':',V@2(@VRAMP)
     6313 E0  
     6314 02
     6315 40
     6316 3A  
0315 6317 A3      DADD  3,@VRAMP
     6318 40  
     6319 00  
     631A 03
0316 631B 86      CLR   @PAD1             ; column counter
     631C 5D  
0317          ; Dump 8 bytes from from 16 bit ptr  DUMPA
0318          DUMP1:
0319 631D 33      MOVE  1,G@0(@DUMPA),@PAD0    ; Read from GROM pointed to by DUMPA
     631E 00  
     631F 01
     6320 5C  
     6321 00  
     6322 00
     6323 62
0320 6324 06      CALL  HEXOUT
     6325 63  
     6326 99
0321 6327 BE      ST    ' ',V@2(@VRAMP)
     6328 E0  
     6329 02
     632A 40
     632B 20  
0322 632C A3      DADD  3,@VRAMP
     632D 40  
     632E 00  
     632F 03
0323 6330 91      DINC  @DUMPA
     6331 62  
0324 6332 90      INC   @PAD1
     6333 5D  
0325 6334 D6      CEQ   8,@PAD1           ; 8 columns - are we done?
     6335 5D  
     6336 08  
0326 6337 43      BR    DUMP1             ; No: jump to dump1
     6338 1D  
0327          ; Advance VRAM pointer, we add and mask to bring pointer to beginning
0328          ; of next line.
0329 6339 A3      DADD  >1F,@VRAMP
     633A 40  
     633B 00  
     633C 1F
0330 633D B3      DAND  >0FE0,@VRAMP
     633E 40  
     633F 0F  
     6340 E0
0331 6341 90      INC   @PAD2             ; inc Row
     6342 5E  
0332 6343 D6      CEQ   8,@PAD2           ; Done with 8 rows?
     6344 5E  
     6345 08  
0333 6346 43      BR    DUMP2             ; No: jump to dump2
     6347 02  
0334 6348 A7      DSUB  8*8,@DUMPA           ; Undo the incs in the loop above
     6349 62  
     634A 00  
     634B 40
0335          ; Wait for keypress
0336          KW1:
0337 634C 03      SCAN
0338 634D 43      BR    KW1
     634E 4C  
0339 634F CE      CGT   '0'-1,@SCANKEY
     6350 75  
     6351 2F  
0340 6352 43      BR    KW1               ; Key less than zero -> loop
     6353 4C  
0341 6354 CE      CGT   '4',@SCANKEY      ; Key over '4' -> loop
     6355 75  
     6356 34  
0342 6357 63      BS    KW1
     6358 4C  
0343 6359 A6      SUB   '0',@SCANKEY
     635A 75  
     635B 30  
0344 635C 8A      CASE  @SCANKEY          ; BUGBUG make range check
     635D 75  
0345 635E 43      BR    DKEY0
     635F 84  
0346 6360 43      BR    DKEY1
     6361 68  
0347 6362 43      BR    DKEY2
     6363 6F  
0348 6364 43      BR    DKEY3
     6365 76  
0349 6366 43      BR    DKEY4
     6367 86  
0350          
0351          DKEY1:
0352 6368 A7      DSUB  64,@DUMPA
     6369 62  
     636A 00  
     636B 40
0353 636C 05      B     MAKEDUMP
     636D 62  
     636E FC
0354          DKEY2:
0355 636F A3      DADD  64,@DUMPA
     6370 62  
     6371 00  
     6372 40
0356 6373 05      B     MAKEDUMP
     6374 62  
     6375 FC
0357          DKEY3:
0358 6376 BE      ST   ' ',V@VEROFS
     6377 A0  
     6378 A0
     6379 20  
0359 637A 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     637B 02  
     637C 5F
     637D A0  
     637E A1
     637F A0  
     6380 A0
0360 6381 05      B     SCREEN1
     6382 60  
     6383 56
0361          DKEY0:      ; Burn to flash - to be implemented.
0362 6384 42      BR    MAKEDUMP
     6385 FC  
0363          
0364          DKEY4:      ; Command to fill GRAM with >FF, all 24K
0365 6386 87      DCLR  @PAD0         ; Our address in GROM area
     6387 5C  
0366 6388 BF      DST   >FFFF,@PAD2   ; Fill value, 2 bytes
     6389 5E  
     638A FF  
     638B FF
0367          FILL1:
0368          *    MOVE  2,@PAD2,G@0(@PAD0)   ; Hmm no indexed instruction to write GRAM...
0369 638C A3      DADD  2,@PAD0
     638D 5C  
     638E 00  
     638F 02
0370 6390 D7      DCEQ  >6000,@PAD0
     6391 5C  
     6392 60  
     6393 00
0371 6394 43      BR    FILL1
     6395 8C  
0372 6396 05      B     MAKEDUMP
     6397 62  
     6398 FC
0373          
0374          *----------------------------------------
0375          * Display in HEX the byte in PAD0
0376          *----------------------------------------
0377          HEXOUT:
0378 6399 BC      ST   @PAD0,@PAD4
     639A 60  
     639B 5C  
0379 639C E6      SRL   >04,@PAD4       isolate first nibble
     639D 60  
     639E 04  
0380 639F CE      CGT   >09,@PAD4       greater than 9?
     63A0 60  
     63A1 09  
0381 63A2 63      BS    HEX1            yes
     63A3 A9  
0382 63A4 A2      ADD   >30,@PAD4       no: make it char 0-9
     63A5 60  
     63A6 30  
0383 63A7 43      BR    HEX2
     63A8 AC  
0384 63A9 A2  HEX1: ADD   >37,@PAD4      yes: make it char A-F
     63AA 60  
     63AB 37  
0385          HEX2:
0386          ; Output first hex digit (most significant digit)
0387 63AC BC      ST    @PAD4,V@0(@VRAMP)
     63AD E0  
     63AE 00
     63AF 40
     63B0 60  
0388          ; Work on 2nd digit
0389 63B1 BC      ST    @PAD0,@PAD4     copy number
     63B2 60  
     63B3 5C  
0390 63B4 B2      AND   >0F,@PAD4       isolate second nibble
     63B5 60  
     63B6 0F  
0391 63B7 CE      CGT   >09,@PAD4       greater than 9?
     63B8 60  
     63B9 09  
0392 63BA 63      BS    HEX3          yes
     63BB C1  
0393 63BC A2      ADD   >30,@PAD4       no: make it char 0-9
     63BD 60  
     63BE 30  
0394 63BF 43      BR    HEX4
     63C0 C4  
0395 63C1 A2  HEX3  ADD   >37,@PAD4       yes: make it char A-F
     63C2 60  
     63C3 37  
0396          HEX4:
0397          ; Output 2nd hex digit (least significant digit)
0398 63C4 BC      ST    @PAD4,V@1(@VRAMP)
     63C5 E0  
     63C6 01
     63C7 40
     63C8 60  
0399 63C9 00      RTN
0400          
0401          
0402          *----------------------------------------
0403          * Read grommy2 version, update on screen.
0404          * Also read and set bank & shadow values.
0405          *----------------------------------------
0406          SHOW_VERSION
0407 63CA 06      CALL G@GINITCMD
     63CB 64  
     63CC 2F
0408 63CD 06      CALL G@GSENDCMD
     63CE 64  
     63CF 36
0409          * Check result of command - did we get OK?
0410 63D0 31      MOVE 2,G@HWIF,@PAD0
     63D1 00  
     63D2 02
     63D3 5C  
     63D4 5F  
     63D5 F0
0411 63D6 D7      DCEQ >4F4B,@PAD0        ; did we get OK?
     63D7 5C  
     63D8 4F  
     63D9 4B
0412 63DA 63      BS   VER_OK             ; Yes: go to VER_OK
     63DB E7  
0413          ** No grommy2 detected. Put in dummy data.
0414 63DC 87      DCLR @PAD2              ; Major and minor zero
     63DD 5E  
0415 63DE BE      ST   99,@PAD4           ; Build 99
     63DF 60  
     63E0 63  
0416 63E1 86      CLR  @SHADOW
     63E2 51  
0417 63E3 86      CLR  @BANK
     63E4 50  
0418 63E5 44      BR   VER1
     63E6 04  
0419          VER_OK:     ; grommy responded, read data
0420          * Copy values from GROM IF to pad
0421 63E7 31      MOVE 3,G@HWIF+8,@PAD2
     63E8 00  
     63E9 03
     63EA 5E  
     63EB 5F  
     63EC F8
0422          * Get active bank from grommy2
0423 63ED 31      MOVE 1,G@HWIF+3,@BANK
     63EE 00  
     63EF 01
     63F0 50  
     63F1 5F  
     63F2 F3
0424 63F3 B2      AND  >0F,@BANK
     63F4 50  
     63F5 0F  
0425 63F6 D6      CEQ  8,@BANK            ; Is GRAM bank 8 selected?
     63F7 50  
     63F8 08  
0426 63F9 43      BR   NOGRAM1            ; No, we're good
     63FA FE  
0427 63FB BE      ST   3,@BANK            ; yes, convert to 3 here
     63FC 50  
     63FD 03  
0428          NOGRAM1:
0429          * Get RAM shadow from grommy2
0430 63FE 31      MOVE 1,G@HWIF+4,@SHADOW
     63FF 00  
     6400 01
     6401 51  
     6402 5F  
     6403 F4
0431          VER1:
0432          * Show major version in p2
0433 6404 BE      ST  '0',@PAD0
     6405 5C  
     6406 30  
0434 6407 A0      ADD @PAD2,@PAD0
     6408 5C  
     6409 5E  
0435 640A BC      ST  @PAD0,V@VEROFS+>A        Write to VRAM
     640B A0  
     640C AA
     640D 5C  
0436          * Show minor version in p3
0437 640E BE      ST  '0',@PAD0
     640F 5C  
     6410 30  
0438 6411 A0      ADD @PAD3,@PAD0
     6412 5C  
     6413 5F  
0439 6414 BC      ST  @PAD0,V@VEROFS+>C        Write to VRAM
     6415 A0  
     6416 AC
     6417 5C  
0440          * Show build version in p4. The build is two digits from 0 to 99
0441 6418 86      CLR  @PAD0              Zero fill as the value to divide is 16 bits§
     6419 5C  
0442 641A BC      ST   @PAD4,@PAD1
     641B 5D  
     641C 60  
0443 641D AE      DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
     641E 5C  
     641F 0A  
0444 6420 A2      ADD  '0',@PAD0
     6421 5C  
     6422 30  
0445 6423 BC      ST   @PAD0,V@VEROFS+>E      Write to VRAM
     6424 A0  
     6425 AE
     6426 5C  
0446 6427 A2      ADD  '0',@PAD1          Remainder
     6428 5D  
     6429 30  
0447 642A BC      ST   @PAD1,V@VEROFS+>F      Write to VRAM
     642B A0  
     642C AF
     642D 5D  
0448 642E 00      RTN
0449          
0450          
0451          *----------------------------------------
0452          * Init command buffer in pad
0453          *----------------------------------------
0454          GINITCMD
0455 642F 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
     6430 00  
     6431 10
     6432 40  
     6433 64  
     6434 43
0456 6435 00         RTN
0457          
0458          *----------------------------------------
0459          * Send command to grommy2
0460          *----------------------------------------
0461          GSENDCMD
0462 6436 BC         ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
     6437 41  
     6438 40  
0463 6439 BA         XOR   >FF,@GCMDBYTE+1
     643A 41  
     643B FF  
0464 643C 25         MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
     643D 00  
     643E 10
     643F 5F  
     6440 F0
     6441 40  
0465 6442 00         RTN
0466          
0467          
0468          GROMMY_DAT
0469 6443 00         DATA   >00FF,>003F,>0000,>0000
     6444 FF
     6445 00  
     6446 3F
     6447 00  
     6448 00
     6449 00  
     644A 00
0470 644B 45         TEXT 'EPGROMMY'
     644C 50  
     644D 47  
     644E 52  
     644F 4F  
     6450 4D  
     6451 4D  
     6452 59  
0471          
0472          
0473          DENSE_FONT ; Define character cells wihtin 4x8 cell
0474          ; Numnbers 0 and 1
0475 6453 22          BYTE >22
0476 6454 56          BYTE >56
0477 6455 52          BYTE >52
0478 6456 52          BYTE >52
0479 6457 52          BYTE >52
0480 6458 52          BYTE >52
0481 6459 27          BYTE >27
0482 645A 00          BYTE >00
0483          ; Define a cell with 2 and 3
0484 645B 26          BYTE >26
0485 645C 51          BYTE >51
0486 645D 11          BYTE >11
0487 645E 26          BYTE >26
0488 645F 41          BYTE >41
0489 6460 41          BYTE >41
0490 6461 76          BYTE >76
0491 6462 00          BYTE >00
0492          ; Define a cell with 4 and 5
0493 6463 17          BYTE >17
0494 6464 34          BYTE >34
0495 6465 54          BYTE >54
0496 6466 76          BYTE >76
0497 6467 11          BYTE >11
0498 6468 11          BYTE >11
0499 6469 16          BYTE >16
0500 646A 00          BYTE >00
0501          ; Define a cell with 6 and 7
0502 646B 37          BYTE >37
0503 646C 41          BYTE >41
0504 646D 62          BYTE >62
0505 646E 52          BYTE >52
0506 646F 52          BYTE >52
0507 6470 52          BYTE >52
0508 6471 22          BYTE >22
0509 6472 00          BYTE >00
0510          ; Define a cell with 8 and 9
0511 6473 22          BYTE >22
0512 6474 55          BYTE >55
0513 6475 55          BYTE >55
0514 6476 23          BYTE >23
0515 6477 51          BYTE >51
0516 6478 51          BYTE >51
0517 6479 26          BYTE >26
0518 647A 00          BYTE >00
0519          ; Define a cell with A and B
0520 647B 26          BYTE >26
0521 647C 55          BYTE >55
0522 647D 55          BYTE >55
0523 647E 76          BYTE >76
0524 647F 55          BYTE >55
0525 6480 55          BYTE >55
0526 6481 56          BYTE >56
0527 6482 00          BYTE >00
0528          ; Define a cell with C and D
0529 6483 36          BYTE >36
0530 6484 45          BYTE >45
0531 6485 45          BYTE >45
0532 6486 45          BYTE >45
0533 6487 45          BYTE >45
0534 6488 45          BYTE >45
0535 6489 36          BYTE >36
0536 648A 00          BYTE >00
0537          ; Define a cell with E and F
0538 648B 77          BYTE >77
0539 648C 44          BYTE >44
0540 648D 44          BYTE >44
0541 648E 66          BYTE >66
0542 648F 44          BYTE >44
0543 6490 44          BYTE >44
0544 6491 74          BYTE >74
0545 6492 00          BYTE >00
0546          
0547          * Test code copied from Mini Memory
0548 6493 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
     6494 00  
     6495 10
     6496 40  
     6497 64  
     6498 43
0549 6499 BC         ST    @>839A,@>8340                Copy command byte
     649A 40  
     649B 80  
     649C 9A
0550 649D BC         ST    @>839A,@>8341                The second byte is its complement
     649E 41  
     649F 80  
     64A0 9A
0551 64A1 BA         XOR   >FF,@>8341
     64A2 41  
     64A3 FF  
0552 64A4 BC         ST    @>839B,@>8342                Copy p2.
     64A5 42  
     64A6 80  
     64A7 9B
0553 64A8 25         MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
     64A9 00  
     64AA 10
     64AB 5F  
     64AC F0
     64AD 40  
0554 64AE 00         RTN
0555          
0556          
0557          *----------------------------------------
0558          * VDP setup for module
0559          *----------------------------------------
0560          GVDPSETUP
0561 64AF BE      ST    >D0,V@>0300      no sprites
     64B0 A3  
     64B1 00
     64B2 D0  
0562 64B3 BE      ST    >F5,V@>0380      init color table as white on blue for all chars
     64B4 A3  
     64B5 80
     64B6 F5  
0563 64B7 35      MOVE  >001F,V@>0380,V@>0381
     64B8 00  
     64B9 1F
     64BA A3  
     64BB 81
     64BC A3  
     64BD 80
0564 64BE 07      ALL   >20              erase screen
     64BF 20  
0565 64C0 04      BACK  >F5              screen colors: white on light blue
     64C1 F5  
0566 64C2 00      RTN
0567          
0568              COPY 'screen.gpl'
              > screen.gpl
0001          * Character definitions
0002 64C3 00  GUDG96	BYTE >00,>00,>00,>00,>00,>00,>00,>00 ; Character 96
     64C4 00  
     64C5 00  
     64C6 00  
     64C7 00  
     64C8 00  
     64C9 00  
     64CA 00  
0003 64CB 00  GUDG97	BYTE >00,>00,>70,>43,>72,>42,>42,>72 ; Character 97
     64CC 00  
     64CD 70  
     64CE 43  
     64CF 72  
     64D0 42  
     64D1 42  
     64D2 72  
0004 64D3 00  GUDG98	BYTE >00,>28,>08,>A9,>2A,>2E,>2B,>29 ; Character 98
     64D4 28  
     64D5 08  
     64D6 A9  
     64D7 2A  
     64D8 2E  
     64D9 2B  
     64DA 29  
0005 64DB 00  GUDG99	BYTE >00,>00,>0F,>09,>09,>0E,>08,>08 ; Character 99
     64DC 00  
     64DD 0F  
     64DE 09  
     64DF 09  
     64E0 0E  
     64E1 08  
     64E2 08  
0006 64E3 00  GUDG100	BYTE >00,>40,>00,>46,>49,>4F,>48,>46 ; Character 100
     64E4 40  
     64E5 00  
     64E6 46  
     64E7 49  
     64E8 4F  
     64E9 48  
     64EA 46  
0007 64EB 00  GUDG101	BYTE >00,>41,>41,>79,>49,>49,>49,>49 ; Character 101
     64EC 41  
     64ED 41  
     64EE 79  
     64EF 49  
     64F0 49  
     64F1 49  
     64F2 49  
0008 64F3 00  GUDG102	BYTE >00,>40,>40,>1C,>10,>0C,>06,>1C ; Character 102
     64F4 40  
     64F5 40  
     64F6 1C  
     64F7 10  
     64F8 0C  
     64F9 06  
     64FA 1C  
0009 64FB 00  GUDG103	BYTE >00,>00,>00,>00,>00,>00,>1C,>3F ; Character 103
     64FC 00  
     64FD 00  
     64FE 00  
     64FF 00  
     6500 00  
     6501 1C  
     6502 3F  
0010 6503 00  GUDG104	BYTE >00,>00,>00,>00,>00,>00,>00,>3F ; Character 104
     6504 00  
     6505 00  
     6506 00  
     6507 00  
     6508 00  
     6509 00  
     650A 3F  
0011 650B 00  GUDG105	BYTE >00,>00,>00,>00,>00,>00,>00,>9C ; Character 105
     650C 00  
     650D 00  
     650E 00  
     650F 00  
     6510 00  
     6511 00  
     6512 9C  
0012 6513 00  GUDG106	BYTE >00,>00,>00,>00,>00,>00,>07,>3F ; Character 106
     6514 00  
     6515 00  
     6516 00  
     6517 00  
     6518 00  
     6519 07  
     651A 3F  
0013 651B 00  GUDG107	BYTE >00,>00,>00,>00,>00,>00,>00,>F0 ; Character 107
     651C 00  
     651D 00  
     651E 00  
     651F 00  
     6520 00  
     6521 00  
     6522 F0  
0014 6523 00  GUDG108	BYTE >00,>00,>00,>00,>00,>00,>06,>9F ; Character 108
     6524 00  
     6525 00  
     6526 00  
     6527 00  
     6528 00  
     6529 06  
     652A 9F  
0015 652B 00  GUDG109	BYTE >00,>00,>00,>00,>00,>00,>03,>8F ; Character 109
     652C 00  
     652D 00  
     652E 00  
     652F 00  
     6530 00  
     6531 03  
     6532 8F  
0016 6533 00  GUDG110	BYTE >00,>00,>00,>00,>00,>00,>00,>C7 ; Character 110
     6534 00  
     6535 00  
     6536 00  
     6537 00  
     6538 00  
     6539 00  
     653A C7  
0017 653B 00  GUDG111	BYTE >00,>00,>00,>00,>00,>00,>00,>F3 ; Character 111
     653C 00  
     653D 00  
     653E 00  
     653F 00  
     6540 00  
     6541 00  
     6542 F3  
0018 6543 00  GUDG112	BYTE >00,>00,>00,>00,>00,>00,>C0,>F1 ; Character 112
     6544 00  
     6545 00  
     6546 00  
     6547 00  
     6548 00  
     6549 C0  
     654A F1  
0019 654B 00  GUDG113	BYTE >00,>00,>00,>00,>00,>00,>60,>F8 ; Character 113
     654C 00  
     654D 00  
     654E 00  
     654F 00  
     6550 00  
     6551 60  
     6552 F8  
0020 6553 00  GUDG114	BYTE >00,>00,>00,>00,>00,>00,>00,>FC ; Character 114
     6554 00  
     6555 00  
     6556 00  
     6557 00  
     6558 00  
     6559 00  
     655A FC  
0021 655B 00  GUDG115	BYTE >00,>03,>0F,>1F,>3F,>3F,>7F,>7E ; Character 115
     655C 03  
     655D 0F  
     655E 1F  
     655F 3F  
     6560 3F  
     6561 7F  
     6562 7E  
0022 6563 00  GUDG116	BYTE >00,>F0,>FC,>FE,>FF,>FF,>3F,>3F ; Character 116
     6564 F0  
     6565 FC  
     6566 FE  
     6567 FF  
     6568 FF  
     6569 3F  
     656A 3F  
0023 656B 00  GUDG117	BYTE >00,>00,>00,>00,>00,>80,>80,>80 ; Character 117
     656C 00  
     656D 00  
     656E 00  
     656F 00  
     6570 80  
     6571 80  
     6572 80  
0024 6573 7F  GUDG118	BYTE >7F,>FF,>FF,>FE,>FE,>FE,>FE,>FE ; Character 118
     6574 FF  
     6575 FF  
     6576 FE  
     6577 FE  
     6578 FE  
     6579 FE  
     657A FE  
0025 657B FF  GUDG119	BYTE >FF,>FF,>FF,>7F,>7F,>7F,>7F,>7F ; Character 119
     657C FF  
     657D FF  
     657E 7F  
     657F 7F  
     6580 7F  
     6581 7F  
     6582 7F  
0026 6583 3F  GUDG120	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>3F,>3F ; Character 120
     6584 3F  
     6585 3F  
     6586 3F  
     6587 3F  
     6588 3F  
     6589 3F  
     658A 3F  
0027 658B BC  GUDG121	BYTE >BC,>FC,>FC,>FD,>FD,>FD,>F9,>C1 ; Character 121
     658C FC  
     658D FC  
     658E FD  
     658F FD  
     6590 FD  
     6591 F9  
     6592 C1  
0028 6593 7F  GUDG122	BYTE >7F,>FF,>FF,>FC,>FC,>FC,>FC,>FC ; Character 122
     6594 FF  
     6595 FF  
     6596 FC  
     6597 FC  
     6598 FC  
     6599 FC  
     659A FC  
0029 659B F8  GUDG123	BYTE >F8,>FC,>FE,>FE,>FE,>FE,>FE,>FE ; Character 123
     659C FC  
     659D FE  
     659E FE  
     659F FE  
     65A0 FE  
     65A1 FE  
     65A2 FE  
0030 65A3 FF  GUDG124	BYTE >FF,>FF,>FF,>9F,>9F,>9F,>9F,>9F ; Character 124
     65A4 FF  
     65A5 FF  
     65A6 9F  
     65A7 9F  
     65A8 9F  
     65A9 9F  
     65AA 9F  
0031 65AB DF  GUDG125	BYTE >DF,>FF,>FF,>E7,>C7,>C7,>C7,>C7 ; Character 125
     65AC FF  
     65AD FF  
     65AE E7  
     65AF C7  
     65B0 C7  
     65B1 C7  
     65B2 C7  
0032 65B3 E7  GUDG126	BYTE >E7,>E7,>E7,>F7,>F7,>F7,>F7,>F7 ; Character 126
     65B4 E7  
     65B5 E7  
     65B6 F7  
     65B7 F7  
     65B8 F7  
     65B9 F7  
     65BA F7  
0033 65BB FF  GUDG127	BYTE >FF,>FF,>FF,>F3,>F3,>F3,>F3,>F3 ; Character 127
     65BC FF  
     65BD FF  
     65BE F3  
     65BF F3  
     65C0 F3  
     65C1 F3  
     65C2 F3  
0034 65C3 FB  GUDG128	BYTE >FB,>FF,>FF,>FC,>F8,>F8,>F8,>F8 ; Character 128
     65C4 FF  
     65C5 FF  
     65C6 FC  
     65C7 F8  
     65C8 F8  
     65C9 F8  
     65CA F8  
0035 65CB FC  GUDG129	BYTE >FC,>FC,>FC,>FE,>FE,>FE,>FE,>FE ; Character 129
     65CC FC  
     65CD FC  
     65CE FE  
     65CF FE  
     65D0 FE  
     65D1 FE  
     65D2 FE  
0036 65D3 FE  GUDG130	BYTE >FE,>FE,>7E,>7E,>7E,>7E,>7E,>3F ; Character 130
     65D4 FE  
     65D5 7E  
     65D6 7E  
     65D7 7E  
     65D8 7E  
     65D9 7E  
     65DA 3F  
0037 65DB 3F  GUDG131	BYTE >3F,>7F,>7F,>7F,>7E,>7E,>7E,>7E ; Character 131
     65DC 7F  
     65DD 7F  
     65DE 7F  
     65DF 7E  
     65E0 7E  
     65E1 7E  
     65E2 7E  
0038 65E3 7E  GUDG132	BYTE >7E,>7E,>7E,>00,>00,>00,>00,>01 ; Character 132
     65E4 7E  
     65E5 7E  
     65E6 00  
     65E7 00  
     65E8 00  
     65E9 00  
     65EA 01  
0039 65EB 3F  GUDG133	BYTE >3F,>3F,>3F,>7F,>7F,>FF,>FF,>FE ; Character 133
     65EC 3F  
     65ED 3F  
     65EE 7F  
     65EF 7F  
     65F0 FF  
     65F1 FF  
     65F2 FE  
0040 65F3 80  GUDG134	BYTE >80,>80,>80,>80,>00,>00,>00,>00 ; Character 134
     65F4 80  
     65F5 80  
     65F6 80  
     65F7 00  
     65F8 00  
     65F9 00  
     65FA 00  
0041 65FB FE  GUDG135	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FF ; Character 135
     65FC FE  
     65FD FE  
     65FE FE  
     65FF FE  
     6600 FE  
     6601 FE  
     6602 FF  
0042 6603 7F  GUDG136	BYTE >7F,>7F,>7F,>7F,>7F,>7F,>7F,>FF ; Character 136
     6604 7F  
     6605 7F  
     6606 7F  
     6607 7F  
     6608 7F  
     6609 7F  
     660A FF  
0043 660B C1  GUDG137	BYTE >C1,>81,>81,>81,>81,>81,>81,>81 ; Character 137
     660C 81  
     660D 81  
     660E 81  
     660F 81  
     6610 81  
     6611 81  
     6612 81  
0044 6613 FC  GUDG138	BYTE >FC,>FC,>FC,>FC,>FC,>FC,>FC,>FC ; Character 138
     6614 FC  
     6615 FC  
     6616 FC  
     6617 FC  
     6618 FC  
     6619 FC  
     661A FC  
0045 661B FE  GUDG139	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FE ; Character 139
     661C FE  
     661D FE  
     661E FE  
     661F FE  
     6620 FE  
     6621 FE  
     6622 FE  
0046 6623 9F  GUDG140	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>9F,>9F ; Character 140
     6624 9F  
     6625 9F  
     6626 9F  
     6627 9F  
     6628 9F  
     6629 9F  
     662A 9F  
0047 662B C7  GUDG141	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>C7,>C7 ; Character 141
     662C C7  
     662D C7  
     662E C7  
     662F C7  
     6630 C7  
     6631 C7  
     6632 C7  
0048 6633 F7  GUDG142	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>F7,>F7 ; Character 142
     6634 F7  
     6635 F7  
     6636 F7  
     6637 F7  
     6638 F7  
     6639 F7  
     663A F7  
0049 663B F3  GUDG143	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>F3,>F3 ; Character 143
     663C F3  
     663D F3  
     663E F3  
     663F F3  
     6640 F3  
     6641 F3  
     6642 F3  
0050 6643 F8  GUDG144	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>F8,>F8 ; Character 144
     6644 F8  
     6645 F8  
     6646 F8  
     6647 F8  
     6648 F8  
     6649 F8  
     664A F8  
0051 664B 3F  GUDG145	BYTE >3F,>3F,>3F,>3F,>1F,>1F,>1F,>1F ; Character 145
     664C 3F  
     664D 3F  
     664E 3F  
     664F 1F  
     6650 1F  
     6651 1F  
     6652 1F  
0052 6653 7E  GUDG146	BYTE >7E,>7E,>7E,>7E,>FC,>FC,>FC,>FC ; Character 146
     6654 7E  
     6655 7E  
     6656 7E  
     6657 FC  
     6658 FC  
     6659 FC  
     665A FC  
0053 665B 01  GUDG147	BYTE >01,>03,>07,>07,>0F,>0F,>1F,>3F ; Character 147
     665C 03  
     665D 07  
     665E 07  
     665F 0F  
     6660 0F  
     6661 1F  
     6662 3F  
0054 6663 FC  GUDG148	BYTE >FC,>FC,>F8,>F8,>F0,>E0,>E0,>C0 ; Character 148
     6664 FC  
     6665 F8  
     6666 F8  
     6667 F0  
     6668 E0  
     6669 E0  
     666A C0  
0055 666B 7F  GUDG149	BYTE >7F,>7F,>3F,>00,>FE,>FE,>FF,>7F ; Character 149
     666C 7F  
     666D 3F  
     666E 00  
     666F FE  
     6670 FE  
     6671 FF  
     6672 7F  
0056 6673 FF  GUDG150	BYTE >FF,>FF,>7F,>7F,>7F,>7F,>FF,>FE ; Character 150
     6674 FF  
     6675 7F  
     6676 7F  
     6677 7F  
     6678 7F  
     6679 FF  
     667A FE  
0057 667B 3F  GUDG151	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>00,>00 ; Character 151
     667C 3F  
     667D 3F  
     667E 3F  
     667F 3F  
     6680 3F  
     6681 00  
     6682 00  
0058 6683 81  GUDG152	BYTE >81,>81,>80,>80,>80,>80,>00,>00 ; Character 152
     6684 81  
     6685 80  
     6686 80  
     6687 80  
     6688 80  
     6689 00  
     668A 00  
0059 668B FC  GUDG153	BYTE >FC,>FC,>FF,>FF,>7F,>1F,>00,>00 ; Character 153
     668C FC  
     668D FF  
     668E FF  
     668F 7F  
     6690 1F  
     6691 00  
     6692 00  
0060 6693 FE  GUDG154	BYTE >FE,>FE,>FC,>FC,>F8,>E0,>00,>00 ; Character 154
     6694 FE  
     6695 FC  
     6696 FC  
     6697 F8  
     6698 E0  
     6699 00  
     669A 00  
0061 669B 9F  GUDG155	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>00,>00 ; Character 155
     669C 9F  
     669D 9F  
     669E 9F  
     669F 9F  
     66A0 9F  
     66A1 00  
     66A2 00  
0062 66A3 C7  GUDG156	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>00,>00 ; Character 156
     66A4 C7  
     66A5 C7  
     66A6 C7  
     66A7 C7  
     66A8 C7  
     66A9 00  
     66AA 00  
0063 66AB F7  GUDG157	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>00,>00 ; Character 157
     66AC F7  
     66AD F7  
     66AE F7  
     66AF F7  
     66B0 F7  
     66B1 00  
     66B2 00  
0064 66B3 F3  GUDG158	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>00,>00 ; Character 158
     66B4 F3  
     66B5 F3  
     66B6 F3  
     66B7 F3  
     66B8 F3  
     66B9 00  
     66BA 00  
0065 66BB F8  GUDG159	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>00,>00 ; Character 159
     66BC F8  
     66BD F8  
     66BE F8  
     66BF F8  
     66C0 F8  
     66C1 00  
     66C2 00  
0066 66C3 FE  GUDG160	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>00,>00 ; Character 160
     66C4 FE  
     66C5 FE  
     66C6 FE  
     66C7 FE  
     66C8 FE  
     66C9 00  
     66CA 00  
0067 66CB 1F  GUDG161	BYTE >1F,>0F,>0F,>0F,>0F,>1F,>3F,>3F ; Character 161
     66CC 0F  
     66CD 0F  
     66CE 0F  
     66CF 0F  
     66D0 1F  
     66D1 3F  
     66D2 3F  
0068 66D3 FC  GUDG162	BYTE >FC,>FC,>FC,>FC,>F8,>F8,>F8,>F0 ; Character 162
     66D4 FC  
     66D5 FC  
     66D6 FC  
     66D7 F8  
     66D8 F8  
     66D9 F8  
     66DA F0  
0069 66DB 3F  GUDG163	BYTE >3F,>7F,>7F,>7F,>7F,>7F,>00,>00 ; Character 163
     66DC 7F  
     66DD 7F  
     66DE 7F  
     66DF 7F  
     66E0 7F  
     66E1 00  
     66E2 00  
0070 66E3 80  GUDG164	BYTE >80,>FF,>FF,>FF,>FF,>FF,>00,>00 ; Character 164
     66E4 FF  
     66E5 FF  
     66E6 FF  
     66E7 FF  
     66E8 FF  
     66E9 00  
     66EA 00  
0071 66EB 00  GUDG165	BYTE >00,>00,>80,>80,>80,>80,>00,>00 ; Character 165
     66EC 00  
     66ED 80  
     66EE 80  
     66EF 80  
     66F0 80  
     66F1 00  
     66F2 00  
0072 66F3 3F  GUDG166	BYTE >3F,>0F,>00,>00,>00,>00,>00,>00 ; Character 166
     66F4 0F  
     66F5 00  
     66F6 00  
     66F7 00  
     66F8 00  
     66F9 00  
     66FA 00  
0073 66FB FC  GUDG167	BYTE >FC,>F0,>00,>00,>00,>00,>00,>00 ; Character 167
     66FC F0  
     66FD 00  
     66FE 00  
     66FF 00  
     6700 00  
     6701 00  
     6702 00  
0074 6703 3F  GUDG168	BYTE >3F,>00,>00,>00,>00,>00,>00,>00 ; Character 168
     6704 00  
     6705 00  
     6706 00  
     6707 00  
     6708 00  
     6709 00  
     670A 00  
0075 670B E0  GUDG169	BYTE >E0,>00,>00,>00,>00,>00,>00,>00 ; Character 169
     670C 00  
     670D 00  
     670E 00  
     670F 00  
     6710 00  
     6711 00  
     6712 00  
0076 6713 3E  GUDG170	BYTE >3E,>60,>60,>60,>60,>60,>32,>1E ; Character 170
     6714 60  
     6715 60  
     6716 60  
     6717 60  
     6718 60  
     6719 32  
     671A 1E  
0077 671B 3E  GUDG171	BYTE >3E,>66,>43,>C3,>43,>62,>76,>3C ; Character 171
     671C 66  
     671D 43  
     671E C3  
     671F 43  
     6720 62  
     6721 76  
     6722 3C  
0078 6723 63  GUDG172	BYTE >63,>73,>7B,>6F,>6F,>67,>67,>63 ; Character 172
     6724 73  
     6725 7B  
     6726 6F  
     6727 6F  
     6728 67  
     6729 67  
     672A 63  
0079 672B 7C  GUDG173	BYTE >7C,>60,>60,>7C,>60,>60,>60,>60 ; Character 173
     672C 60  
     672D 60  
     672E 7C  
     672F 60  
     6730 60  
     6731 60  
     6732 60  
0080 6733 C7  GUDG174	BYTE >C7,>CC,>CC,>CC,>CC,>CC,>CE,>C7 ; Character 174
     6734 CC  
     6735 CC  
     6736 CC  
     6737 CC  
     6738 CC  
     6739 CE  
     673A C7  
0081 673B C0  GUDG175	BYTE >C0,>00,>00,>C0,>E0,>60,>E0,>C0 ; Character 175
     673C 00  
     673D 00  
     673E C0  
     673F E0  
     6740 60  
     6741 E0  
     6742 C0  
0082 6743 61  GLINE0_25 BYTE >61,>62,>63,>64,>65,>66,>67,>68,>68,>69,>6A,>6B,>68,>6C,>6D,>6E,>6F,>70,>71,>72,>68,>73,>74,>75
     6744 62  
     6745 63  
     6746 64  
     6747 65  
     6748 66  
     6749 67  
     674A 68  
     674B 68  
     674C 69  
     674D 6A  
     674E 6B  
     674F 68  
     6750 6C  
     6751 6D  
     6752 6E  
     6753 6F  
     6754 70  
     6755 71  
     6756 72  
     6757 68  
     6758 73  
     6759 74  
     675A 75  
0083 675B 76  GLINE1_25 BYTE >76,>77,>78,>79,>7A,>7B,>78,>7C,>7D,>7E,>7F,>80,>81,>82,>83,>84,>85,>86
     675C 77  
     675D 78  
     675E 79  
     675F 7A  
     6760 7B  
     6761 78  
     6762 7C  
     6763 7D  
     6764 7E  
     6765 7F  
     6766 80  
     6767 81  
     6768 82  
     6769 83  
     676A 84  
     676B 85  
     676C 86  
0084 676D 87  GLINE2_24 BYTE >87,>88,>78,>89,>8A,>8B,>78,>8C,>8D,>8E,>8F,>90,>8B,>91,>92,>93,>94
     676E 88  
     676F 78  
     6770 89  
     6771 8A  
     6772 8B  
     6773 78  
     6774 8C  
     6775 8D  
     6776 8E  
     6777 8F  
     6778 90  
     6779 8B  
     677A 91  
     677B 92  
     677C 93  
     677D 94  
0085 677E 95  GLINE3_25 BYTE >95,>96,>97,>98,>99,>9A,>97,>9B,>9C,>9D,>9E,>9F,>A0,>A1,>A2,>A3,>A4,>A5
     677F 96  
     6780 97  
     6781 98  
     6782 99  
     6783 9A  
     6784 97  
     6785 9B  
     6786 9C  
     6787 9D  
     6788 9E  
     6789 9F  
     678A A0  
     678B A1  
     678C A2  
     678D A3  
     678E A4  
     678F A5  
0086 6790 A6  GLINE4_9 BYTE >A6,>A7
     6791 A7  
0087 6792 A8  GLINE4_28 BYTE >A8,>A9,>AA,>AB,>AC,>AD,>AE,>AF
     6793 A9  
     6794 AA  
     6795 AB  
     6796 AC  
     6797 AD  
     6798 AE  
     6799 AF  
0088          
0089          G_SCR1
0090 679A 31      MOVE >0280,G@GUDG96,V@>0B00 ; Copy our screen chars
     679B 02  
     679C 80
     679D AB  
     679E 00
     679F 64  
     67A0 C3
0091          
0092 67A1 31  	MOVE >0018,G@GLINE0_25,V@>0001
     67A2 00  
     67A3 18
     67A4 A0  
     67A5 01
     67A6 67  
     67A7 43
0093 67A8 31  	MOVE >0012,G@GLINE1_25,V@>0027
     67A9 00  
     67AA 12
     67AB A0  
     67AC 27
     67AD 67  
     67AE 5B
0094 67AF 31  	MOVE >0011,G@GLINE2_24,V@>0047
     67B0 00  
     67B1 11
     67B2 A0  
     67B3 47
     67B4 67  
     67B5 6D
0095 67B6 31  	MOVE >0012,G@GLINE3_25,V@>0067
     67B7 00  
     67B8 12
     67B9 A0  
     67BA 67
     67BB 67  
     67BC 7E
0096 67BD 31  	MOVE >0002,G@GLINE4_9,V@>0087
     67BE 00  
     67BF 02
     67C0 A0  
     67C1 87
     67C2 67  
     67C3 90
0097 67C4 31  	MOVE >0008,G@GLINE4_28,V@>0094
     67C5 00  
     67C6 08
     67C7 A0  
     67C8 94
     67C9 67  
     67CA 92
0098          
0099 67CB 00      RTN
0100          
