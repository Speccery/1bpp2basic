XGA99 CROSS-ASSEMBLER   VERSION 3.0.1
              > config.gpl
0001          * config.gpl
0002          * Configurator for GROMMY2
0003          * At this point this is just a demo how to render the generated screen.gpl
0004          * EP 2023-11-26
0005          *
0006          * Compile the GPL code to binary with:
0007          * xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
0008          * output file is config.bin, since the filename ends with g it is treated
0009          * by an emulator such as js99er.net as a GROM file.
0010          *
0011          * This file includes the screen.gpl file at the very end.
0012          *
0013          
0014          LALIGN    EQU >02              Left alignment of text
0015          LALIGN2   EQU >03
0016          LAYOUTVER EQU 5         Row for Version number
0017          LAYOUTBAN EQU 8        Row for selected bank display
0018          VEROFS    EQU 32*LAYOUTVER
0019          VALIDIND  EQU VEROFS-29         ; Indicator for valid command
0020          
0021          * A few variables for the grommy2 config to use.
0022          * I am not sure if these are free to use, but I will try :)
0023          XREG    EQU >832C   ; ** Program text or token pointer (in BASIC?)
0024          YREG    EQU >832E   ; ** Pointer to line number tale (in BASIC)
0025          ZREG    EQU >8330   ; ** Start of line number table pointer (in BASIC)
0026          ; >8332 .. 8337 seem to contain pointers also used by BASIC not GPL
0027          
0028          * Grommy2 command buffer in scratchpad
0029          GCMDBYTE EQU >8340
0030          GCMDP2   EQU >8342
0031          GCMDP3   EQU >8343
0032          GCMDP4   EQU >8344
0033          GCMDP5   EQU >8345
0034          GCMDP6   EQU >8346
0035          GCMDP7   EQU >8347
0036          
0037          BANK    EQU >8350           Active bank
0038          SHADOW  EQU >8351           Shadow enable / disable
0039          PAD0    EQU >835C
0040          PAD1    EQU >835D
0041          PAD2    EQU >835E
0042          PAD3    EQU >835F
0043          PAD4    EQU >8360
0044          PAD5    EQU >8361
0045          DUMPA   EQU >8362           ; GROM Dump address
0046          VRAMP   EQU >8340           ; VRAM ptr overlays GCMDBYTE
0047          
0048          SCANKEY EQU >8375
0049          * Hardware interface address
0050          HWIF     EQU >5FF0
0051          
0052          
0053 6000 AA  G6000  DATA >AA01             standard header  version 1
     6001 01
0054 6002 00         DATA >0000             # of programs 0
     6003 00
0055 6004 00         DATA >0000             no power up
     6005 00
0056 6006 60         DATA G6010             program
     6007 10
0057 6008 00         DATA >0000             DSRs
     6009 00
0058 600A 00         DATA >0000             subprograms
     600B 00
0059 600C 00         DATA >0000
     600D 00
0060 600E 00         DATA >0000
     600F 00
0061          
0062 6010 00  G6010  DATA >0000         * No next program
     6011 00
0063 6012 60         DATA GPROG
     6013 2A
0064 6014 0E         STRI 'GROMMY2 CONFIG'
     6015 47  
     6016 52  
     6017 4F  
     6018 4D  
     6019 4D  
     601A 59  
     601B 32  
     601C 20  
     601D 43  
     601E 4F  
     601F 4E  
     6020 46  
     6021 49  
     6022 47  
0065          
0066          GVREGS
0067 6023 E0      BYTE  >E0              VDP registers values: standard mode
0068 6024 00      BYTE  >00              screen image at >0000
0069 6025 0E      BYTE  >0E              color table at >0380
0070 6026 01      BYTE  >01              char patterns at >0800
0071 6027 06      BYTE  >06              sprite attributes at >0300
0072 6028 00      BYTE  >00              sprite patterns at >0000
0073 6029 F5      BYTE  >F5              text/screen colors: white / light blue
0074          
0075          GPROG
0076 602A 86      CLR   @>8374
     602B 74  
0077 602C BF      DST   >0900,@>834A     load upper case chars 32->
     602D 4A  
     602E 09  
     602F 00
0078 6030 06      CALL  G@>0018
     6031 00  
     6032 18
0079          * Setup roughly as with mini memory
0080 6033 39      MOVE >0007,G@GVREGS,#>01    Set VDP Regs
     6034 00  
     6035 07
     6036 01  
     6037 60  
     6038 23
0081 6039 86      CLR   V@>0800          clear charpats 0-31
     603A A8  
     603B 00
0082 603C 35      MOVE  >00FF,V@>0800,V@>0801
     603D 00  
     603E FF
     603F A8  
     6040 01
     6041 A8  
     6042 00
0083          
0084 6043 BE      ST    >7E,@>8373       init subroutine stack
     6044 73  
     6045 7E  
0085 6046 87      DCLR  @>8322           clear error code
     6047 22  
0086 6048 87      DCLR  @>8348           clear flags
     6049 48  
0087          
0088 604A 87      DCLR   @DUMPA
     604B 62  
0089 604C 86      CLR    @BANK           Actually init from grommy2
     604D 50  
0090 604E 86      CLR    @SHADOW         Actually init from grommy2
     604F 51  
0091          
0092 6050 BF      DST   >1234,@XREG
     6051 2C  
     6052 12  
     6053 34
0093 6054 BF      DST   >5679,@YREG
     6055 2E  
     6056 56  
     6057 79
0094 6058 BF      DST   >DEAD,@ZREG
     6059 30  
     605A DE  
     605B AD
0095          
0096 605C 06      CALL G@GVDPSETUP
     605D 66  
     605E 6E
0097          
0098 605F 06      CALL G@G_SCR1       ; Setup the screen which was automatically generated
     6060 69  
     6061 59
0099          SCREEN1:
0100          * Use the FMT token to add some strings on the screen
0101 6062 08      FMT
0102 6063 FF      COL LALIGN
     6064 02  
0103 6065 FE      ROW LAYOUTVER
     6066 05  
0104 6067 1D      HTEX 'VERSION 0.0.00 BANK 0 SHADOW 0'
     6068 56  
     6069 45  
     606A 52  
     606B 53  
     606C 49  
     606D 4F  
     606E 4E  
     606F 20  
     6070 30  
     6071 2E  
     6072 30  
     6073 2E  
     6074 30  
     6075 30  
     6076 20  
     6077 42  
     6078 41  
     6079 4E  
     607A 4B  
     607B 20  
     607C 30  
     607D 20  
     607E 53  
     607F 48  
     6080 41  
     6081 44  
     6082 4F  
     6083 57  
     6084 20  
     6085 30  
0105 6086 A0      ROW+ >01
0106 6087 FF      COL LALIGN
     6088 02  
0107 6089 19      HTEX 'SELECT GROM BANK FOR READS'
     608A 53  
     608B 45  
     608C 4C  
     608D 45  
     608E 43  
     608F 54  
     6090 20  
     6091 47  
     6092 52  
     6093 4F  
     6094 4D  
     6095 20  
     6096 42  
     6097 41  
     6098 4E  
     6099 4B  
     609A 20  
     609B 46  
     609C 4F  
     609D 52  
     609E 20  
     609F 52  
     60A0 45  
     60A1 41  
     60A2 44  
     60A3 53  
0108 60A4 A0      ROW+ >01
0109 60A5 FF      COL LALIGN2
     60A6 03  
0110 60A7 0C      HTEX '0 SYSTEM BANK'
     60A8 30  
     60A9 20  
     60AA 53  
     60AB 59  
     60AC 53  
     60AD 54  
     60AE 45  
     60AF 4D  
     60B0 20  
     60B1 42  
     60B2 41  
     60B3 4E  
     60B4 4B  
0111 60B5 A0      ROW+ >01
0112 60B6 FF      COL LALIGN2
     60B7 03  
0113 60B8 0C      HTEX '1 USER BANK 1'
     60B9 31  
     60BA 20  
     60BB 55  
     60BC 53  
     60BD 45  
     60BE 52  
     60BF 20  
     60C0 42  
     60C1 41  
     60C2 4E  
     60C3 4B  
     60C4 20  
     60C5 31  
0114 60C6 A0      ROW+ >01
0115 60C7 FF      COL LALIGN2
     60C8 03  
0116 60C9 0C      HTEX '2 USER BANK 2'
     60CA 32  
     60CB 20  
     60CC 55  
     60CD 53  
     60CE 45  
     60CF 52  
     60D0 20  
     60D1 42  
     60D2 41  
     60D3 4E  
     60D4 4B  
     60D5 20  
     60D6 32  
0117 60D7 A0      ROW+ >01
0118 60D8 FF      COL LALIGN2
     60D9 03  
0119 60DA 0A      HTEX '3 GRAM BANK'
     60DB 33  
     60DC 20  
     60DD 47  
     60DE 52  
     60DF 41  
     60E0 4D  
     60E1 20  
     60E2 42  
     60E3 41  
     60E4 4E  
     60E5 4B  
0120          
0121 60E6 A1      ROW+ >02
0122 60E7 FF      COL LALIGN
     60E8 02  
0123 60E9 09      HTEX 'SHADOW RAM'
     60EA 53  
     60EB 48  
     60EC 41  
     60ED 44  
     60EE 4F  
     60EF 57  
     60F0 20  
     60F1 52  
     60F2 41  
     60F3 4D  
0124 60F4 A0      ROW+ >01
0125 60F5 FF      COL LALIGN2
     60F6 03  
0126 60F7 15      HTEX '4 ENABLE     5 DISABLE'
     60F8 34  
     60F9 20  
     60FA 45  
     60FB 4E  
     60FC 41  
     60FD 42  
     60FE 4C  
     60FF 45  
     6100 20  
     6101 20  
     6102 20  
     6103 20  
     6104 20  
     6105 35  
     6106 20  
     6107 44  
     6108 49  
     6109 53  
     610A 41  
     610B 42  
     610C 4C  
     610D 45  
0127          
0128 610E A1      ROW+ >02
0129 610F FF      COL LALIGN
     6110 02  
0130 6111 16      HTEX 'FLASH GRAM TO USER BANK'
     6112 46  
     6113 4C  
     6114 41  
     6115 53  
     6116 48  
     6117 20  
     6118 47  
     6119 52  
     611A 41  
     611B 4D  
     611C 20  
     611D 54  
     611E 4F  
     611F 20  
     6120 55  
     6121 53  
     6122 45  
     6123 52  
     6124 20  
     6125 42  
     6126 41  
     6127 4E  
     6128 4B  
0131 6129 A0      ROW+ >01
0132 612A FF      COL LALIGN2
     612B 03  
0133 612C 14      HTEX '6 BANK 1     7 BANK 2'
     612D 36  
     612E 20  
     612F 42  
     6130 41  
     6131 4E  
     6132 4B  
     6133 20  
     6134 31  
     6135 20  
     6136 20  
     6137 20  
     6138 20  
     6139 20  
     613A 37  
     613B 20  
     613C 42  
     613D 41  
     613E 4E  
     613F 4B  
     6140 20  
     6141 32  
0134          
0135 6142 A1      ROW+ >02
0136 6143 FF      COL LALIGN
     6144 02  
0137 6145 14      HTEX 'COPY ROM BANK TO GRAM'
     6146 43  
     6147 4F  
     6148 50  
     6149 59  
     614A 20  
     614B 52  
     614C 4F  
     614D 4D  
     614E 20  
     614F 42  
     6150 41  
     6151 4E  
     6152 4B  
     6153 20  
     6154 54  
     6155 4F  
     6156 20  
     6157 47  
     6158 52  
     6159 41  
     615A 4D  
0138 615B A0      ROW+ >01
0139 615C FF      COL LALIGN2
     615D 03  
0140 615E 16      HTEX 'A COPY FROM SYSTEM BANK'
     615F 41  
     6160 20  
     6161 43  
     6162 4F  
     6163 50  
     6164 59  
     6165 20  
     6166 46  
     6167 52  
     6168 4F  
     6169 4D  
     616A 20  
     616B 53  
     616C 59  
     616D 53  
     616E 54  
     616F 45  
     6170 4D  
     6171 20  
     6172 42  
     6173 41  
     6174 4E  
     6175 4B  
0141 6176 A0      ROW+ >01
0142 6177 FF      COL LALIGN2
     6178 03  
0143 6179 16      HTEX 'B COPY FROM USER BANK 1'
     617A 42  
     617B 20  
     617C 43  
     617D 4F  
     617E 50  
     617F 59  
     6180 20  
     6181 46  
     6182 52  
     6183 4F  
     6184 4D  
     6185 20  
     6186 55  
     6187 53  
     6188 45  
     6189 52  
     618A 20  
     618B 42  
     618C 41  
     618D 4E  
     618E 4B  
     618F 20  
     6190 31  
0144 6191 A0      ROW+ >01
0145 6192 FF      COL LALIGN2
     6193 03  
0146 6194 16      HTEX 'C COPY FROM USER BANK 2'
     6195 43  
     6196 20  
     6197 43  
     6198 4F  
     6199 50  
     619A 59  
     619B 20  
     619C 46  
     619D 52  
     619E 4F  
     619F 4D  
     61A0 20  
     61A1 55  
     61A2 53  
     61A3 45  
     61A4 52  
     61A5 20  
     61A6 42  
     61A7 41  
     61A8 4E  
     61A9 4B  
     61AA 20  
     61AB 32  
0147          
0148 61AC A0      ROW+ >01
0149 61AD FF      COL LALIGN
     61AE 02  
0150 61AF 08      HTEX '9 MORE...'
     61B0 39  
     61B1 20  
     61B2 4D  
     61B3 4F  
     61B4 52  
     61B5 45  
     61B6 2E  
     61B7 2E  
     61B8 2E  
0151          
0152 61B9 FB      FEND
0153          
0154          * Pattern address of character 0xFF
0155          PATADR EQU >0800+(255*8)
0156          * Test a couple of chars
0157          *    MOVE 64,G@DENSE_FONT,V@PATADR-64
0158          *    ST >F7,V@0
0159          *    ST >F8,V@1
0160          *    ST >F9,V@2
0161          *    ST >FA,V@3
0162          *    ST >FB,V@4
0163          *    ST >FC,V@5
0164          *    ST >FD,V@6
0165          *    ST >FE,V@7
0166          
0167 61BA 06      CALL  SHOW_VERSION      ; Get version, bank, shadow info
     61BB 65  
     61BC 5D
0168 61BD 05      B     GUPDATE           ; update screen
     61BE 62  
     61BF 7A
0169          
0170          GWAIT
0171 61C0 03      SCAN
0172 61C1 61      BS    GOTKEY
     61C2 CF  
0173          * We did not get a key. Animate something.
0174 61C3 BE      ST    >FF,V@>001F      Write char FF to top right corner
     61C4 A0  
     61C5 1F
     61C6 FF  
0175 61C7 A2      ADD   1,V@PATADR
     61C8 AF  
     61C9 0F
     61CA F8
     61CB 01  
0176 61CC 05      B    G@GWAIT          wait for the user to press a key
     61CD 61  
     61CE C0
0177          
0178          
0179          GOTKEY:
0180 61CF BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     61D0 A0  
     61D1 82
     61D2 75  
0181 61D3 BE      ST    ' ',V@VALIDIND        ; Assume invalid CMD
     61D4 A0  
     61D5 83
     61D6 20  
0182 61D7 CE      CGT   '0'-1,@SCANKEY       greater than >= 0
     61D8 75  
     61D9 2F  
0183 61DA 42      BR    GG01              no skip forward
     61DB 74  
0184 61DC CE      CGT   '9',@SCANKEY        Key greater than '9'?
     61DD 75  
     61DE 39  
0185 61DF 61      BS    CHECK_ABC             ; Yes: skip forward
     61E0 FA  
0186 61E1 A6      SUB   '0',@SCANKEY
     61E2 75  
     61E3 30  
0187 61E4 8A      CASE  @SCANKEY
     61E5 75  
0188 61E6 42      BR    KEY0
     61E7 1E  
0189 61E8 42      BR    KEY1
     61E9 1E  
0190 61EA 42      BR    KEY2
     61EB 1E  
0191 61EC 42      BR    KEY3
     61ED 29  
0192 61EE 42      BR    KEY4
     61EF 0F  
0193 61F0 42      BR    KEY5
     61F1 1A  
0194 61F2 42      BR    KEY6
     61F3 31  
0195 61F4 42      BR    KEY7
     61F5 3C  
0196 61F6 42      BR    KEY8
     61F7 41  
0197 61F8 42      BR    KEY9
     61F9 4A  
0198          CHECK_ABC
0199          ; Commands A,B and C
0200 61FA CE      CGT   'A'-1,@SCANKEY
     61FB 75  
     61FC 40  
0201 61FD 42      BR    GG01
     61FE 74  
0202 61FF CE      CGT   'C',@SCANKEY
     6200 75  
     6201 43  
0203 6202 62      BS    GG01
     6203 74  
0204 6204 A6      SUB   'A',@SCANKEY
     6205 75  
     6206 41  
0205 6207 8A      CASE  @SCANKEY
     6208 75  
0206 6209 42      BR    KEYA
     620A 4D  
0207 620B 42      BR    KEYB
     620C 59  
0208 620D 42      BR    KEYC
     620E 5E  
0209          
0210          KEY4:
0211 620F BE      ST  1,@SHADOW
     6210 51  
     6211 01  
0212          SHADOWSET
0213 6212 BC      ST  @SHADOW,@GCMDP2    ; Set parameter 2
     6213 42  
     6214 51  
0214 6215 BE      ST  3,@GCMDBYTE         ; Command 3 shadow enable/disable
     6216 40  
     6217 03  
0215 6218 42      BR  ISSUECMD
     6219 67  
0216          KEY5:
0217 621A 86      CLR @SHADOW
     621B 51  
0218 621C 42      BR  SHADOWSET
     621D 12  
0219          KEY0
0220          KEY1
0221          KEY2
0222 621E BC      ST   @SCANKEY,@BANK
     621F 50  
     6220 75  
0223 6221 BC      ST   @SCANKEY,@GCMDP2    ; Set parameter 2
     6222 42  
     6223 75  
0224          BANKSEL
0225 6224 BE      ST   1,@GCMDBYTE         ; Command 1 select bank for reads
     6225 40  
     6226 01  
0226 6227 42      BR  ISSUECMD
     6228 67  
0227          KEY3
0228 6229 BC      ST   @SCANKEY,@BANK
     622A 50  
     622B 75  
0229 622C BE      ST   8,@GCMDP2           ; GRAM bank is 8
     622D 42  
     622E 08  
0230 622F 42      BR   BANKSEL
     6230 24  
0231          
0232          KEY6:                       ; Flash GRAM to user bank 1
0233 6231 BE      ST   >01,@GCMDP2        ; User bank 1
     6232 42  
     6233 01  
0234          GRAM2FLASH
0235 6234 BE      ST   >3F,@GCMDP3        ; Bit mask: flash entire bank
     6235 43  
     6236 3F  
0236 6237 BE      ST   4,@GCMDBYTE
     6238 40  
     6239 04  
0237 623A 42      BR  ISSUECMD
     623B 67  
0238          KEY7:                       ; Flash GRAM to user bank 2
0239 623C BE      ST   >02,@GCMDP2        ; User bank 2
     623D 42  
     623E 02  
0240 623F 42      BR   GRAM2FLASH
     6240 34  
0241          KEY8
0242 6241 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6242 A0  
     6243 83
     6244 2A  
0243 6245 06      CALL  SHOW_VERSION
     6246 65  
     6247 5D
0244 6248 41      BR    GWAIT
     6249 C0  
0245          KEY9:
0246 624A 05      B   DUMPSCREEN
     624B 62  
     624C AF
0247          
0248          KEYA:                       ; Copy bank 0 to GRAM
0249 624D BE      ST    0,@GCMDP2
     624E 42  
     624F 00  
0250          COPY2GRAM:
0251 6250 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6251 A0  
     6252 83
     6253 2A  
0252 6254 BE      ST    2,@GCMDBYTE
     6255 40  
     6256 02  
0253 6257 42      BR    ISSUECMD
     6258 67  
0254          KEYB:
0255 6259 BE      ST    1,@GCMDP2
     625A 42  
     625B 01  
0256 625C 42      BR    COPY2GRAM
     625D 50  
0257          KEYC:
0258 625E BE      ST    2,@GCMDP2
     625F 42  
     6260 02  
0259 6261 42      BR    COPY2GRAM
     6262 50  
0260          
0261          ISSUECMD1:                  ; Clear last 4 parameter bytes
0262 6263 87      DCLR  @GCMDBYTE+4
     6264 44  
0263 6265 87      DCLR  @GCMDBYTE+6
     6266 46  
0264          ISSUECMD:
0265 6267 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     6268 00  
     6269 08
     626A 48  
     626B 65  
     626C DE
0266 626D BE      ST    '*',V@VALIDIND    ; Command valid indicator
     626E A0  
     626F 83
     6270 2A  
0267 6271 06      CALL  GSENDCMD          ; Send command to HW
     6272 65  
     6273 C9
0268          
0269          GG01:
0270 6274 D6      CEQ   >0F,@SCANKEY       is it Fctn-9?
     6275 75  
     6276 0F  
0271 6277 42      BR    G@GCONT2         no: GCONT2
     6278 7A  
0272 6279 0B      EXIT                   yes: reset the TI-99/4A
0273          
0274          GCONT2
0275          * Update screen to reflect current status
0276          GUPDATE
0277          * Status of Shadow RAM enable/disable
0278 627A BE      ST  '0',@PAD0
     627B 5C  
     627C 30  
0279 627D A0      ADD @SHADOW,@PAD0
     627E 5C  
     627F 51  
0280 6280 BC      ST  @PAD0,V@VEROFS+>1F        Write to VRAM
     6281 A0  
     6282 BF
     6283 5C  
0281          * Status of selected bank
0282 6284 BE      ST  '0',@PAD0
     6285 5C  
     6286 30  
0283 6287 A0      ADD @BANK,@PAD0
     6288 5C  
     6289 50  
0284 628A BC      ST  @PAD0,V@VEROFS+>16  ; Write to VRAM
     628B A0  
     628C B6
     628D 5C  
0285          
0286          
0287          * Start update GROM read bank. First erase bank markings.
0288          BANKOFS EQU (32*LAYOUTBAN)+4
0289 628E BE      ST ' ',V@BANKOFS
     628F A1  
     6290 04
     6291 20  
0290 6292 BE      ST ' ',V@BANKOFS+>20
     6293 A1  
     6294 24
     6295 20  
0291 6296 BE      ST ' ',V@BANKOFS+>40
     6297 A1  
     6298 44
     6299 20  
0292 629A BE      ST ' ',V@BANKOFS+>60
     629B A1  
     629C 64
     629D 20  
0293 629E 87      DCLR @PAD0
     629F 5C  
0294 62A0 BC      ST   @BANK,@PAD3        Copy to low byte the bank #
     62A1 5F  
     62A2 50  
0295 62A3 E3      DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
     62A4 5E  
     62A5 00  
     62A6 05
0296 62A7 BE      ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
     62A8 E1  
     62A9 04
     62AA 5E
     62AB 2A  
0297          * End update GROM read bank.
0298 62AC 05      B   G@GWAIT
     62AD 61  
     62AE C0
0299          
0300          *----------------------------------------
0301          * Second screen with a few features.
0302          *----------------------------------------
0303          DUMPSCREEN:
0304 62AF BE      ST   ' ',V@VEROFS
     62B0 A0  
     62B1 A0
     62B2 20  
0305 62B3 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     62B4 02  
     62B5 5F
     62B6 A0  
     62B7 A1
     62B8 A0  
     62B9 A0
0306 62BA 08      FMT
0307 62BB FF      COL LALIGN
     62BC 02  
0308 62BD FE      ROW LAYOUTVER
     62BE 05  
0309 62BF 1A      HTEX '1 DEC 2 INC DUMP ADDR 3 RET'
     62C0 31  
     62C1 20  
     62C2 44  
     62C3 45  
     62C4 43  
     62C5 20  
     62C6 32  
     62C7 20  
     62C8 49  
     62C9 4E  
     62CA 43  
     62CB 20  
     62CC 44  
     62CD 55  
     62CE 4D  
     62CF 50  
     62D0 20  
     62D1 41  
     62D2 44  
     62D3 44  
     62D4 52  
     62D5 20  
     62D6 33  
     62D7 20  
     62D8 52  
     62D9 45  
     62DA 54  
0310 62DB A0      ROW+ >01
0311 62DC FF      COL LALIGN
     62DD 02  
0312 62DE 12      HTEX '4 FILL GRAM WITH FF'
     62DF 34  
     62E0 20  
     62E1 46  
     62E2 49  
     62E3 4C  
     62E4 4C  
     62E5 20  
     62E6 47  
     62E7 52  
     62E8 41  
     62E9 4D  
     62EA 20  
     62EB 57  
     62EC 49  
     62ED 54  
     62EE 48  
     62EF 20  
     62F0 46  
     62F1 46  
0313 62F2 A0      ROW+ >01
0314 62F3 FF      COL LALIGN
     62F4 02  
0315 62F5 1B      HTEX '5 COPY 24K GROM 8000 TO GRAM'
     62F6 35  
     62F7 20  
     62F8 43  
     62F9 4F  
     62FA 50  
     62FB 59  
     62FC 20  
     62FD 32  
     62FE 34  
     62FF 4B  
     6300 20  
     6301 47  
     6302 52  
     6303 4F  
     6304 4D  
     6305 20  
     6306 38  
     6307 30  
     6308 30  
     6309 30  
     630A 20  
     630B 54  
     630C 4F  
     630D 20  
     630E 47  
     630F 52  
     6310 41  
     6311 4D  
0316 6312 A0      ROW+ >01
0317 6313 FF      COL LALIGN
     6314 02  
0318 6315 11      HTEX '6 ARM EXECUTE 0000'
     6316 36  
     6317 20  
     6318 41  
     6319 52  
     631A 4D  
     631B 20  
     631C 45  
     631D 58  
     631E 45  
     631F 43  
     6320 55  
     6321 54  
     6322 45  
     6323 20  
     6324 30  
     6325 30  
     6326 30  
     6327 30  
0319 6328 A0      ROW+ >01
0320 6329 FF      COL LALIGN
     632A 02  
0321 632B 11      HTEX '7 ARM EXECUTE 4000'
     632C 37  
     632D 20  
     632E 41  
     632F 52  
     6330 4D  
     6331 20  
     6332 45  
     6333 58  
     6334 45  
     6335 43  
     6336 55  
     6337 54  
     6338 45  
     6339 20  
     633A 34  
     633B 30  
     633C 30  
     633D 30  
0322 633E A0      ROW+ >01
0323 633F FF      COL LALIGN
     6340 02  
0324 6341 18      HTEX '0 BURN FIRMWARE FROM GRAM'
     6342 30  
     6343 20  
     6344 42  
     6345 55  
     6346 52  
     6347 4E  
     6348 20  
     6349 46  
     634A 49  
     634B 52  
     634C 4D  
     634D 57  
     634E 41  
     634F 52  
     6350 45  
     6351 20  
     6352 46  
     6353 52  
     6354 4F  
     6355 4D  
     6356 20  
     6357 47  
     6358 52  
     6359 41  
     635A 4D  
0325 635B A1      ROW+ >02
0326 635C FF      COL LALIGN
     635D 02  
0327 635E 0A      HTEX 'GROM DUMPER'
     635F 47  
     6360 52  
     6361 4F  
     6362 4D  
     6363 20  
     6364 44  
     6365 55  
     6366 4D  
     6367 50  
     6368 45  
     6369 52  
0328 636A FB      FEND
0329          
0330 636B 31      MOVE >002C,G@BIN2HEX,@>8300 ; Move assembly code in place
     636C 00  
     636D 2C
     636E 00  
     636F 66  
     6370 42
0331          
0332          MAKEDUMP:
0333 6371 BF      DST   VEROFS+224,@VRAMP
     6372 40  
     6373 01  
     6374 80
0334 6375 86      CLR   @PAD2             ; Row counter
     6376 5E  
0335 6377 BE      ST    '*',V@VALIDIND
     6378 A0  
     6379 83
     637A 2A  
0336          DUMP2:
0337 637B BE      ST    ' ',V@>FFFF(VRAMP)    ; setup VRAM address
     637C EF  
     637D FF
     637E FF
     637F 40
     6380 20  
0338 6381 BC      ST    @DUMPA,@PAD0      ; Hi byte off address
     6382 5C  
     6383 62  
0339 6384 06      CALL  HEXOUT
     6385 64  
     6386 F8
0340 6387 A3      DADD  2,@VRAMP
     6388 40  
     6389 00  
     638A 02
0341 638B BC      ST    @DUMPA+1,@PAD0    ; Lo byte off address
     638C 5C  
     638D 63  
0342 638E 06      CALL  HEXOUT
     638F 64  
     6390 F8
0343 6391 BE      ST    ':',V@2(@VRAMP)
     6392 E0  
     6393 02
     6394 40
     6395 3A  
0344 6396 A3      DADD  3,@VRAMP
     6397 40  
     6398 00  
     6399 03
0345 639A 86      CLR   @PAD1             ; column counter
     639B 5D  
0346          ; Dump 8 bytes from from 16 bit ptr  DUMPA
0347          DUMP1:
0348 639C 33      MOVE  1,G@0(@DUMPA),@PAD0    ; Read from GROM pointed to by DUMPA
     639D 00  
     639E 01
     639F 5C  
     63A0 00  
     63A1 00
     63A2 62
0349 63A3 06      CALL  HEXOUT
     63A4 64  
     63A5 F8
0350 63A6 BE      ST    ' ',V@2(@VRAMP)
     63A7 E0  
     63A8 02
     63A9 40
     63AA 20  
0351 63AB A3      DADD  3,@VRAMP
     63AC 40  
     63AD 00  
     63AE 03
0352 63AF 91      DINC  @DUMPA
     63B0 62  
0353 63B1 90      INC   @PAD1
     63B2 5D  
0354 63B3 D6      CEQ   8,@PAD1           ; 8 columns - are we done?
     63B4 5D  
     63B5 08  
0355 63B6 43      BR    DUMP1             ; No: jump to dump1
     63B7 9C  
0356          ; Advance VRAM pointer, we add and mask to bring pointer to beginning
0357          ; of next line.
0358 63B8 A3      DADD  >1F,@VRAMP
     63B9 40  
     63BA 00  
     63BB 1F
0359 63BC B3      DAND  >0FE0,@VRAMP
     63BD 40  
     63BE 0F  
     63BF E0
0360 63C0 90      INC   @PAD2             ; inc Row
     63C1 5E  
0361 63C2 D6      CEQ   8,@PAD2           ; Done with 8 rows?
     63C3 5E  
     63C4 08  
0362 63C5 43      BR    DUMP2             ; No: jump to dump2
     63C6 7B  
0363 63C7 A7      DSUB  8*8,@DUMPA           ; Undo the incs in the loop above
     63C8 62  
     63C9 00  
     63CA 40
0364 63CB BE      ST    ' ',V@VALIDIND
     63CC A0  
     63CD 83
     63CE 20  
0365          ; Wait for keypress
0366          KW1:
0367 63CF 03      SCAN
0368 63D0 63      BS    DGOTKEY
     63D1 DA  
0369 63D2 A2      ADD   1,V@PATADR
     63D3 AF  
     63D4 0F
     63D5 F8
     63D6 01  
0370 63D7 05      B     KW1
     63D8 63  
     63D9 CF
0371          DGOTKEY:
0372 63DA BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     63DB A0  
     63DC 82
     63DD 75  
0373 63DE CE      CGT   'X'-1,@SCANKEY    ; Key >= 'X'
     63DF 75  
     63E0 57  
0374 63E1 64      BS    XYZ               ; Yes: go to XYZ
     63E2 02  
0375 63E3 CE      CGT   '0'-1,@SCANKEY
     63E4 75  
     63E5 2F  
0376 63E6 43      BR    KW1               ; Key less than zero -> loop
     63E7 CF  
0377 63E8 CE      CGT   '7',@SCANKEY      ; Key over '7' -> loop
     63E9 75  
     63EA 37  
0378 63EB 63      BS    KW1
     63EC CF  
0379 63ED A6      SUB   '0',@SCANKEY
     63EE 75  
     63EF 30  
0380 63F0 8A      CASE  @SCANKEY          ; BUGBUG make range check
     63F1 75  
0381 63F2 44      BR    DKEY0
     63F3 7B  
0382 63F4 44      BR    DKEY1
     63F5 5F  
0383 63F6 44      BR    DKEY2
     63F7 66  
0384 63F8 44      BR    DKEY3
     63F9 6D  
0385 63FA 44      BR    DKEY4
     63FB 9A  
0386 63FC 44      BR    DKEY5
     63FD B6  
0387 63FE 44      BR    DKEY6
     63FF D6  
0388 6400 44      BR    DKEY7
     6401 F2  
0389          
0390          ; Check if we have button X Y Z pressed
0391          XYZ:
0392 6402 CE      CGT   'Z',@SCANKEY    ; Above Z?
     6403 75  
     6404 5A  
0393 6405 63      BS    KW1             ; Yes: KW1
     6406 CF  
0394          ; Ok now we need to ask the user for a value and store it to X, Y or Z register.
0395          ; Show the current value of the variable after character code
0396 6407 BF      DST   VEROFS-29,@VRAMP ; Location in VRAM
     6408 40  
     6409 00  
     640A 83
0397 640B BC      ST    @SCANKEY,@PAD3
     640C 5F  
     640D 75  
0398 640E A6      SUB   'X',@PAD3       ; Now pad is 0,1,2 for X,Y,Z
     640F 5F  
     6410 58  
0399 6411 E2      SLL   1,@PAD3         ; Multiply by 2
     6412 5F  
     6413 01  
0400 6414 86      CLR   @PAD2           ; clear high byte
     6415 5E  
0401 6416 A3      DADD  XREG,@PAD2       ; Add address of XREG, now PAD1:PAD2 is a pointer to value
     6417 5E  
     6418 83  
     6419 2C
0402          
0403 641A BC      ST    @0(@PAD2),@PAD0  ; Hi byte of reg
     641B 5C  
     641C CF  
     641D 7D
     641E 00
     641F 5E
0404 6420 06      CALL  HEXOUT
     6421 64  
     6422 F8
0405 6423 A3      DADD  2,@VRAMP
     6424 40  
     6425 00  
     6426 02
0406 6427 BC      ST    @1(@PAD2),@PAD0  ; Lo byte of reg
     6428 5C  
     6429 CF  
     642A 7D
     642B 01
     642C 5E
0407 642D 06      CALL  HEXOUT
     642E 64  
     642F F8
0408 6430 05      B     G@KW1
     6431 63  
     6432 CF
0409          
0410          
0411          
0412          ASKCONFIRM:
0413          ; Ask for confirmation. Clear a few rows to clarify
0414 6433 BE      ST   ' ',V@VEROFS
     6434 A0  
     6435 A0
     6436 20  
0415 6437 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     6438 02  
     6439 5F
     643A A0  
     643B A1
     643C A0  
     643D A0
0416 643E 08      FMT
0417 643F FF      COL LALIGN
     6440 02  
0418 6441 FE      ROW LAYOUTVER
     6442 05  
0419 6443 15      HTEX '!!PRESS 1 TO CONFIRM!!'
     6444 21  
     6445 21  
     6446 50  
     6447 52  
     6448 45  
     6449 53  
     644A 53  
     644B 20  
     644C 31  
     644D 20  
     644E 54  
     644F 4F  
     6450 20  
     6451 43  
     6452 4F  
     6453 4E  
     6454 46  
     6455 49  
     6456 52  
     6457 4D  
     6458 21  
     6459 21  
0420 645A FB      FEND
0421          WAIT0:
0422 645B 03      SCAN
0423 645C 44      BR    WAIT0
     645D 5B  
0424 645E 00      RTN
0425          
0426          DKEY1:
0427 645F A7      DSUB  64,@DUMPA
     6460 62  
     6461 00  
     6462 40
0428 6463 05      B     MAKEDUMP
     6464 63  
     6465 71
0429          DKEY2:
0430 6466 A3      DADD  64,@DUMPA
     6467 62  
     6468 00  
     6469 40
0431 646A 05      B     MAKEDUMP
     646B 63  
     646C 71
0432          DKEY3:
0433 646D BE      ST   ' ',V@VEROFS
     646E A0  
     646F A0
     6470 20  
0434 6471 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     6472 02  
     6473 5F
     6474 A0  
     6475 A1
     6476 A0  
     6477 A0
0435 6478 05      B     SCREEN1
     6479 60  
     647A 62
0436          DKEY0:      ; Burn to Flash
0437 647B 06      CALL  G@ASKCONFIRM
     647C 64  
     647D 33
0438 647E D6      CEQ   '1',@SCANKEY       is the key one?
     647F 75  
     6480 31  
0439 6481 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     6482 AF  
0440          ; Yes, continue to Flash the MCU
0441 6483 04      BACK  >F3              screen colors: white on some other color
     6484 F3  
0442 6485 BE      ST    'F',V@VALIDIND    ; Command valid indicator
     6486 A0  
     6487 83
     6488 46  
0443 6489 BE      ST    6,@GCMDBYTE
     648A 40  
     648B 06  
0444 648C BF      DST   >1234,@GCMDBYTE+2
     648D 42  
     648E 12  
     648F 34
0445 6490 87      DCLR  @GCMDBYTE+4
     6491 44  
0446 6492 87      DCLR  @GCMDBYTE+6
     6493 46  
0447 6494 06      CALL  ISSUECMD
     6495 62  
     6496 67
0448          ; We probably do not return from this call... GROMMY might be in a funny state
0449 6497 05      B     MAKEDUMP
     6498 63  
     6499 71
0450          
0451          DKEY4:      ; Command to fill GRAM with >FF, all 24K
0452 649A BF      DST   >FFFF,@PAD2   ; Fill value, 2 bytes
     649B 5E  
     649C FF  
     649D FF
0453 649E BE      ST    '*',V@VALIDIND    ; Command valid indicator
     649F A0  
     64A0 83
     64A1 2A  
0454 64A2 25      MOVE  >1,@PAD2,G@>0
     64A3 00  
     64A4 01
     64A5 00  
     64A6 00
     64A7 5E  
0455 64A8 21      MOVE  >5FFF,G@>0,G@>1
     64A9 5F  
     64AA FF
     64AB 00  
     64AC 01
     64AD 00  
     64AE 00
0456 64AF BE      ST    ' ',V@VALIDIND    ; Command valid indicator
     64B0 A0  
     64B1 83
     64B2 20  
0457 64B3 05      B     MAKEDUMP
     64B4 63  
     64B5 71
0458          
0459          DKEY5:
0460 64B6 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     64B7 A0  
     64B8 83
     64B9 2A  
0461 64BA 21      MOVE >2000,G@>8000,G@>0000
     64BB 20  
     64BC 00
     64BD 00  
     64BE 00
     64BF 80  
     64C0 00
0462 64C1 21      MOVE >2000,G@>A000,G@>2000
     64C2 20  
     64C3 00
     64C4 20  
     64C5 00
     64C6 A0  
     64C7 00
0463 64C8 21      MOVE >2000,G@>C000,G@>4000
     64C9 20  
     64CA 00
     64CB 40  
     64CC 00
     64CD C0  
     64CE 00
0464 64CF BE      ST    ' ',V@VALIDIND    ; Command valid indicator
     64D0 A0  
     64D1 83
     64D2 20  
0465 64D3 05      B     MAKEDUMP
     64D4 63  
     64D5 71
0466          
0467          DKEY6:      ; ARM execute 0000
0468 64D6 BF      DST   >0000,@GCMDBYTE+2
     64D7 42  
     64D8 00  
     64D9 00
0469          DKEY6ASK:
0470 64DA 06      CALL  G@ASKCONFIRM
     64DB 64  
     64DC 33
0471 64DD D6      CEQ   '1',@SCANKEY       is the key one?
     64DE 75  
     64DF 31  
0472 64E0 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     64E1 AF  
0473 64E2 BE      ST    'F',V@VALIDIND    ; Command valid indicator
     64E3 A0  
     64E4 83
     64E5 46  
0474 64E6 BE      ST    7,@GCMDBYTE
     64E7 40  
     64E8 07  
0475 64E9 87      DCLR  @GCMDBYTE+4
     64EA 44  
0476 64EB 87      DCLR  @GCMDBYTE+6
     64EC 46  
0477 64ED 06      CALL  ISSUECMD
     64EE 62  
     64EF 67
0478          ; We probably do not return from this call... GROMMY might be in a funny state
0479 64F0 43      BR    MAKEDUMP
     64F1 71  
0480          
0481          DKEY7:
0482 64F2 BF      DST   >0040,@GCMDBYTE+2  ; ARM has different byte order
     64F3 42  
     64F4 00  
     64F5 40
0483 64F6 44      BR    DKEY6ASK
     64F7 DA  
0484          
0485          
0486          *----------------------------------------
0487          * Display in HEX the byte in PAD0
0488          *----------------------------------------
0489          HEXOUT:
0490 64F8 0F    XML >F0
     64F9 F0  
0491 64FA 00    RTN
0492          
0493          HEXOUT1:
0494 64FB BC      ST   @PAD0,@PAD4
     64FC 60  
     64FD 5C  
0495 64FE E6      SRL   >04,@PAD4       isolate first nibble
     64FF 60  
     6500 04  
0496 6501 CE      CGT   >09,@PAD4       greater than 9?
     6502 60  
     6503 09  
0497 6504 65      BS    HEX1            yes
     6505 0B  
0498 6506 A2      ADD   >30,@PAD4       no: make it char 0-9
     6507 60  
     6508 30  
0499 6509 45      BR    HEX2
     650A 0E  
0500 650B A2  HEX1: ADD   >37,@PAD4      yes: make it char A-F
     650C 60  
     650D 37  
0501          HEX2:
0502          ; Output first hex digit (most significant digit)
0503 650E BC      ST    @PAD4,V@0(@VRAMP)
     650F E0  
     6510 00
     6511 40
     6512 60  
0504          ; Work on 2nd digit
0505 6513 BC      ST    @PAD0,@PAD4     copy number
     6514 60  
     6515 5C  
0506 6516 B2      AND   >0F,@PAD4       isolate second nibble
     6517 60  
     6518 0F  
0507 6519 CE      CGT   >09,@PAD4       greater than 9?
     651A 60  
     651B 09  
0508 651C 65      BS    HEX3          yes
     651D 23  
0509 651E A2      ADD   >30,@PAD4       no: make it char 0-9
     651F 60  
     6520 30  
0510 6521 45      BR    HEX4
     6522 26  
0511 6523 A2  HEX3  ADD   >37,@PAD4       yes: make it char A-F
     6524 60  
     6525 37  
0512          HEX4:
0513          ; Output 2nd hex digit (least significant digit)
0514 6526 BC      ST    @PAD4,V@1(@VRAMP)
     6527 E0  
     6528 01
     6529 40
     652A 60  
0515 652B 00      RTN
0516          
0517          HEXOUT2:
0518 652C 86      CLR   @PAD4
     652D 60  
0519 652E BC      ST    @PAD0,@PAD5
     652F 61  
     6530 5C  
0520 6531 E6      SRL   >04,@PAD5       isolate first nibble
     6532 61  
     6533 04  
0521 6534 33      MOVE  1,G@HEXES(@PAD4),V@0(@VRAMP)
     6535 00  
     6536 01
     6537 E0  
     6538 00
     6539 40
     653A 65  
     653B 4D
     653C 60
0522 653D BC      ST    @PAD0,@PAD5
     653E 61  
     653F 5C  
0523 6540 B2      AND   >0F,@PAD5
     6541 61  
     6542 0F  
0524 6543 33      MOVE  1,G@HEXES(@PAD4),V@1(@VRAMP)
     6544 00  
     6545 01
     6546 E0  
     6547 01
     6548 40
     6549 65  
     654A 4D
     654B 60
0525 654C 00      RTN
0526          
0527          
0528 654D 30  HEXES: BYTE '0','1','Z','3','4','5','6','7'
     654E 31  
     654F 5A  
     6550 33  
     6551 34  
     6552 35  
     6553 36  
     6554 37  
0529 6555 38    BYTE '8','9','A','B','C','D','E','F'
     6556 39  
     6557 41  
     6558 42  
     6559 43  
     655A 44  
     655B 45  
     655C 46  
0530          
0531          *----------------------------------------
0532          * Read grommy2 version, update on screen.
0533          * Also read and set bank & shadow values.
0534          *----------------------------------------
0535          SHOW_VERSION
0536 655D 06      CALL G@GINITCMD
     655E 65  
     655F C2
0537 6560 06      CALL G@GSENDCMD
     6561 65  
     6562 C9
0538          * Check result of command - did we get OK?
0539 6563 31      MOVE 2,G@HWIF,@PAD0
     6564 00  
     6565 02
     6566 5C  
     6567 5F  
     6568 F0
0540 6569 D7      DCEQ >4F4B,@PAD0        ; did we get OK?
     656A 5C  
     656B 4F  
     656C 4B
0541 656D 65      BS   VER_OK             ; Yes: go to VER_OK
     656E 7A  
0542          ** No grommy2 detected. Put in dummy data.
0543 656F 87      DCLR @PAD2              ; Major and minor zero
     6570 5E  
0544 6571 BE      ST   99,@PAD4           ; Build 99
     6572 60  
     6573 63  
0545 6574 86      CLR  @SHADOW
     6575 51  
0546 6576 86      CLR  @BANK
     6577 50  
0547 6578 45      BR   VER1
     6579 97  
0548          VER_OK:     ; grommy responded, read data
0549          * Copy values from GROM IF to pad
0550 657A 31      MOVE 3,G@HWIF+8,@PAD2
     657B 00  
     657C 03
     657D 5E  
     657E 5F  
     657F F8
0551          * Get active bank from grommy2
0552 6580 31      MOVE 1,G@HWIF+3,@BANK
     6581 00  
     6582 01
     6583 50  
     6584 5F  
     6585 F3
0553 6586 B2      AND  >0F,@BANK
     6587 50  
     6588 0F  
0554 6589 D6      CEQ  8,@BANK            ; Is GRAM bank 8 selected?
     658A 50  
     658B 08  
0555 658C 45      BR   NOGRAM1            ; No, we're good
     658D 91  
0556 658E BE      ST   3,@BANK            ; yes, convert to 3 here
     658F 50  
     6590 03  
0557          NOGRAM1:
0558          * Get RAM shadow from grommy2
0559 6591 31      MOVE 1,G@HWIF+4,@SHADOW
     6592 00  
     6593 01
     6594 51  
     6595 5F  
     6596 F4
0560          VER1:
0561          * Show major version in p2
0562 6597 BE      ST  '0',@PAD0
     6598 5C  
     6599 30  
0563 659A A0      ADD @PAD2,@PAD0
     659B 5C  
     659C 5E  
0564 659D BC      ST  @PAD0,V@VEROFS+>A        Write to VRAM
     659E A0  
     659F AA
     65A0 5C  
0565          * Show minor version in p3
0566 65A1 BE      ST  '0',@PAD0
     65A2 5C  
     65A3 30  
0567 65A4 A0      ADD @PAD3,@PAD0
     65A5 5C  
     65A6 5F  
0568 65A7 BC      ST  @PAD0,V@VEROFS+>C        Write to VRAM
     65A8 A0  
     65A9 AC
     65AA 5C  
0569          * Show build version in p4. The build is two digits from 0 to 99
0570 65AB 86      CLR  @PAD0              Zero fill as the value to divide is 16 bits§
     65AC 5C  
0571 65AD BC      ST   @PAD4,@PAD1
     65AE 5D  
     65AF 60  
0572 65B0 AE      DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
     65B1 5C  
     65B2 0A  
0573 65B3 A2      ADD  '0',@PAD0
     65B4 5C  
     65B5 30  
0574 65B6 BC      ST   @PAD0,V@VEROFS+>E      Write to VRAM
     65B7 A0  
     65B8 AE
     65B9 5C  
0575 65BA A2      ADD  '0',@PAD1          Remainder
     65BB 5D  
     65BC 30  
0576 65BD BC      ST   @PAD1,V@VEROFS+>F      Write to VRAM
     65BE A0  
     65BF AF
     65C0 5D  
0577 65C1 00      RTN
0578          
0579          
0580          *----------------------------------------
0581          * Init command buffer in pad
0582          *----------------------------------------
0583          GINITCMD
0584 65C2 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
     65C3 00  
     65C4 10
     65C5 40  
     65C6 65  
     65C7 D6
0585 65C8 00         RTN
0586          
0587          *----------------------------------------
0588          * Send command to grommy2
0589          *----------------------------------------
0590          GSENDCMD
0591 65C9 BC         ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
     65CA 41  
     65CB 40  
0592 65CC BA         XOR   >FF,@GCMDBYTE+1
     65CD 41  
     65CE FF  
0593 65CF 25         MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
     65D0 00  
     65D1 10
     65D2 5F  
     65D3 F0
     65D4 40  
0594 65D5 00         RTN
0595          
0596          
0597          GROMMY_DAT
0598 65D6 00         DATA   >00FF,>003F,>0000,>0000
     65D7 FF
     65D8 00  
     65D9 3F
     65DA 00  
     65DB 00
     65DC 00  
     65DD 00
0599 65DE 45         TEXT 'EPGROMMY'
     65DF 50  
     65E0 47  
     65E1 52  
     65E2 4F  
     65E3 4D  
     65E4 4D  
     65E5 59  
0600          
0601          
0602          DENSE_FONT ; Define character cells wihtin 4x8 cell
0603          ; Numnbers 0 and 1
0604 65E6 22          BYTE >22
0605 65E7 56          BYTE >56
0606 65E8 52          BYTE >52
0607 65E9 52          BYTE >52
0608 65EA 52          BYTE >52
0609 65EB 52          BYTE >52
0610 65EC 27          BYTE >27
0611 65ED 00          BYTE >00
0612          ; Define a cell with 2 and 3
0613 65EE 26          BYTE >26
0614 65EF 51          BYTE >51
0615 65F0 11          BYTE >11
0616 65F1 26          BYTE >26
0617 65F2 41          BYTE >41
0618 65F3 41          BYTE >41
0619 65F4 76          BYTE >76
0620 65F5 00          BYTE >00
0621          ; Define a cell with 4 and 5
0622 65F6 17          BYTE >17
0623 65F7 34          BYTE >34
0624 65F8 54          BYTE >54
0625 65F9 76          BYTE >76
0626 65FA 11          BYTE >11
0627 65FB 11          BYTE >11
0628 65FC 16          BYTE >16
0629 65FD 00          BYTE >00
0630          ; Define a cell with 6 and 7
0631 65FE 37          BYTE >37
0632 65FF 41          BYTE >41
0633 6600 62          BYTE >62
0634 6601 52          BYTE >52
0635 6602 52          BYTE >52
0636 6603 52          BYTE >52
0637 6604 22          BYTE >22
0638 6605 00          BYTE >00
0639          ; Define a cell with 8 and 9
0640 6606 22          BYTE >22
0641 6607 55          BYTE >55
0642 6608 55          BYTE >55
0643 6609 23          BYTE >23
0644 660A 51          BYTE >51
0645 660B 51          BYTE >51
0646 660C 26          BYTE >26
0647 660D 00          BYTE >00
0648          ; Define a cell with A and B
0649 660E 26          BYTE >26
0650 660F 55          BYTE >55
0651 6610 55          BYTE >55
0652 6611 76          BYTE >76
0653 6612 55          BYTE >55
0654 6613 55          BYTE >55
0655 6614 56          BYTE >56
0656 6615 00          BYTE >00
0657          ; Define a cell with C and D
0658 6616 36          BYTE >36
0659 6617 45          BYTE >45
0660 6618 45          BYTE >45
0661 6619 45          BYTE >45
0662 661A 45          BYTE >45
0663 661B 45          BYTE >45
0664 661C 36          BYTE >36
0665 661D 00          BYTE >00
0666          ; Define a cell with E and F
0667 661E 77          BYTE >77
0668 661F 44          BYTE >44
0669 6620 44          BYTE >44
0670 6621 66          BYTE >66
0671 6622 44          BYTE >44
0672 6623 44          BYTE >44
0673 6624 74          BYTE >74
0674 6625 00          BYTE >00
0675          
0676          * Test code copied from Mini Memory
0677 6626 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
     6627 00  
     6628 10
     6629 40  
     662A 65  
     662B D6
0678 662C BC         ST    @>839A,@>8340                Copy command byte
     662D 40  
     662E 80  
     662F 9A
0679 6630 BC         ST    @>839A,@>8341                The second byte is its complement
     6631 41  
     6632 80  
     6633 9A
0680 6634 BA         XOR   >FF,@>8341
     6635 41  
     6636 FF  
0681 6637 BC         ST    @>839B,@>8342                Copy p2.
     6638 42  
     6639 80  
     663A 9B
0682 663B 25         MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
     663C 00  
     663D 10
     663E 5F  
     663F F0
     6640 40  
0683 6641 00         RTN
0684          
0685          * BIN2HEX assembly routine. Compiled to run from 8302.
0686          * First item is a vector, so this is good for XML >F0.
0687          BIN2HEX:
0688 6642 83    DATA >8302    * Vector to 8302
     6643 02
0689 6644 C0    DATA >C08B, >D060, >835C, >0941, >06A0
     6645 8B
     6646 D0  
     6647 60
     6648 83  
     6649 5C
     664A 09  
     664B 41
     664C 06  
     664D A0
0690 664E 83    DATA >8318   * BL destination address
     664F 18
0691 6650 D0    DATA >D060, >835C, >0241, >0F00, >C2C2
     6651 60
     6652 83  
     6653 5C
     6654 02  
     6655 41
     6656 0F  
     6657 00
     6658 C2  
     6659 C2
0692 665A 02    DATA >0221, >3000, >0281, >3A00, >1A02
     665B 21
     665C 30  
     665D 00
     665E 02  
     665F 81
     6660 3A  
     6661 00
     6662 1A  
     6663 02
0693 6664 02    DATA >0221, >0700, >DBC1, >FFFE, >045B
     6665 21
     6666 07  
     6667 00
     6668 DB  
     6669 C1
     666A FF  
     666B FE
     666C 04  
     666D 5B
0694          
0695          * 0005 0000 C08B  18   MOV R11,R2
0696          * 0006 0002 D060  34   MOVB @PAD0,R1
0697          *      0004 835C
0698          * 0007 0006 0941  56   SRL  R1,4
0699          * 0008 0008 06A0  32   BL   @!
0700          *      000A 8318
0701          * 0009 000C D060  34   MOVB @PAD0,R1
0702          *      000E 835C
0703          * 0010 0010 0241  22   ANDI R1,>0F00
0704          *      0012 0F00
0705          * 0011 0014 C2C2  18   MOV R2,R11
0706          * 0012               !:
0707          * 0013 0016 0221  22   AI   R1,'0'*256
0708          *      0018 3000
0709          * 0014 001A 0281  22   CI   R1,('9'+1)*>100
0710          *      001C 3A00
0711          * 0015 001E 1A02  14   JL   !
0712          * 0016 0020 0221  22   AI   R1,>700
0713          *      0022 0700
0714          * 0017               !
0715          * 0018 0024 DBC1  38   MOVB  R1,@>FFFE(R15)  write byte to VDP
0716          *      0026 FFFE
0717          * 0019 0028 045B  20   RT
0718          
0719          
0720          *----------------------------------------
0721          * VDP setup for module
0722          *----------------------------------------
0723          GVDPSETUP
0724 666E BE      ST    >D0,V@>0300      no sprites
     666F A3  
     6670 00
     6671 D0  
0725 6672 BE      ST    >F5,V@>0380      init color table as white on blue for all chars
     6673 A3  
     6674 80
     6675 F5  
0726 6676 35      MOVE  >001F,V@>0380,V@>0381
     6677 00  
     6678 1F
     6679 A3  
     667A 81
     667B A3  
     667C 80
0727 667D 07      ALL   >20              erase screen
     667E 20  
0728 667F 04      BACK  >F5              screen colors: white on light blue
     6680 F5  
0729 6681 00      RTN
0730          
0731              COPY 'screen.gpl'
              > screen.gpl
0001          * Character definitions
0002 6682 00  GUDG96	BYTE >00,>00,>00,>00,>00,>00,>00,>00 ; Character 96
     6683 00  
     6684 00  
     6685 00  
     6686 00  
     6687 00  
     6688 00  
     6689 00  
0003 668A 00  GUDG97	BYTE >00,>00,>70,>43,>72,>42,>42,>72 ; Character 97
     668B 00  
     668C 70  
     668D 43  
     668E 72  
     668F 42  
     6690 42  
     6691 72  
0004 6692 00  GUDG98	BYTE >00,>28,>08,>A9,>2A,>2E,>2B,>29 ; Character 98
     6693 28  
     6694 08  
     6695 A9  
     6696 2A  
     6697 2E  
     6698 2B  
     6699 29  
0005 669A 00  GUDG99	BYTE >00,>00,>0F,>09,>09,>0E,>08,>08 ; Character 99
     669B 00  
     669C 0F  
     669D 09  
     669E 09  
     669F 0E  
     66A0 08  
     66A1 08  
0006 66A2 00  GUDG100	BYTE >00,>40,>00,>46,>49,>4F,>48,>46 ; Character 100
     66A3 40  
     66A4 00  
     66A5 46  
     66A6 49  
     66A7 4F  
     66A8 48  
     66A9 46  
0007 66AA 00  GUDG101	BYTE >00,>41,>41,>79,>49,>49,>49,>49 ; Character 101
     66AB 41  
     66AC 41  
     66AD 79  
     66AE 49  
     66AF 49  
     66B0 49  
     66B1 49  
0008 66B2 00  GUDG102	BYTE >00,>40,>40,>1C,>10,>0C,>06,>1C ; Character 102
     66B3 40  
     66B4 40  
     66B5 1C  
     66B6 10  
     66B7 0C  
     66B8 06  
     66B9 1C  
0009 66BA 00  GUDG103	BYTE >00,>00,>00,>00,>00,>00,>1C,>3F ; Character 103
     66BB 00  
     66BC 00  
     66BD 00  
     66BE 00  
     66BF 00  
     66C0 1C  
     66C1 3F  
0010 66C2 00  GUDG104	BYTE >00,>00,>00,>00,>00,>00,>00,>3F ; Character 104
     66C3 00  
     66C4 00  
     66C5 00  
     66C6 00  
     66C7 00  
     66C8 00  
     66C9 3F  
0011 66CA 00  GUDG105	BYTE >00,>00,>00,>00,>00,>00,>00,>9C ; Character 105
     66CB 00  
     66CC 00  
     66CD 00  
     66CE 00  
     66CF 00  
     66D0 00  
     66D1 9C  
0012 66D2 00  GUDG106	BYTE >00,>00,>00,>00,>00,>00,>07,>3F ; Character 106
     66D3 00  
     66D4 00  
     66D5 00  
     66D6 00  
     66D7 00  
     66D8 07  
     66D9 3F  
0013 66DA 00  GUDG107	BYTE >00,>00,>00,>00,>00,>00,>00,>F0 ; Character 107
     66DB 00  
     66DC 00  
     66DD 00  
     66DE 00  
     66DF 00  
     66E0 00  
     66E1 F0  
0014 66E2 00  GUDG108	BYTE >00,>00,>00,>00,>00,>00,>06,>9F ; Character 108
     66E3 00  
     66E4 00  
     66E5 00  
     66E6 00  
     66E7 00  
     66E8 06  
     66E9 9F  
0015 66EA 00  GUDG109	BYTE >00,>00,>00,>00,>00,>00,>03,>8F ; Character 109
     66EB 00  
     66EC 00  
     66ED 00  
     66EE 00  
     66EF 00  
     66F0 03  
     66F1 8F  
0016 66F2 00  GUDG110	BYTE >00,>00,>00,>00,>00,>00,>00,>C7 ; Character 110
     66F3 00  
     66F4 00  
     66F5 00  
     66F6 00  
     66F7 00  
     66F8 00  
     66F9 C7  
0017 66FA 00  GUDG111	BYTE >00,>00,>00,>00,>00,>00,>00,>F3 ; Character 111
     66FB 00  
     66FC 00  
     66FD 00  
     66FE 00  
     66FF 00  
     6700 00  
     6701 F3  
0018 6702 00  GUDG112	BYTE >00,>00,>00,>00,>00,>00,>C0,>F1 ; Character 112
     6703 00  
     6704 00  
     6705 00  
     6706 00  
     6707 00  
     6708 C0  
     6709 F1  
0019 670A 00  GUDG113	BYTE >00,>00,>00,>00,>00,>00,>60,>F8 ; Character 113
     670B 00  
     670C 00  
     670D 00  
     670E 00  
     670F 00  
     6710 60  
     6711 F8  
0020 6712 00  GUDG114	BYTE >00,>00,>00,>00,>00,>00,>00,>FC ; Character 114
     6713 00  
     6714 00  
     6715 00  
     6716 00  
     6717 00  
     6718 00  
     6719 FC  
0021 671A 00  GUDG115	BYTE >00,>03,>0F,>1F,>3F,>3F,>7F,>7E ; Character 115
     671B 03  
     671C 0F  
     671D 1F  
     671E 3F  
     671F 3F  
     6720 7F  
     6721 7E  
0022 6722 00  GUDG116	BYTE >00,>F0,>FC,>FE,>FF,>FF,>3F,>3F ; Character 116
     6723 F0  
     6724 FC  
     6725 FE  
     6726 FF  
     6727 FF  
     6728 3F  
     6729 3F  
0023 672A 00  GUDG117	BYTE >00,>00,>00,>00,>00,>80,>80,>80 ; Character 117
     672B 00  
     672C 00  
     672D 00  
     672E 00  
     672F 80  
     6730 80  
     6731 80  
0024 6732 7F  GUDG118	BYTE >7F,>FF,>FF,>FE,>FE,>FE,>FE,>FE ; Character 118
     6733 FF  
     6734 FF  
     6735 FE  
     6736 FE  
     6737 FE  
     6738 FE  
     6739 FE  
0025 673A FF  GUDG119	BYTE >FF,>FF,>FF,>7F,>7F,>7F,>7F,>7F ; Character 119
     673B FF  
     673C FF  
     673D 7F  
     673E 7F  
     673F 7F  
     6740 7F  
     6741 7F  
0026 6742 3F  GUDG120	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>3F,>3F ; Character 120
     6743 3F  
     6744 3F  
     6745 3F  
     6746 3F  
     6747 3F  
     6748 3F  
     6749 3F  
0027 674A BC  GUDG121	BYTE >BC,>FC,>FC,>FD,>FD,>FD,>F9,>C1 ; Character 121
     674B FC  
     674C FC  
     674D FD  
     674E FD  
     674F FD  
     6750 F9  
     6751 C1  
0028 6752 7F  GUDG122	BYTE >7F,>FF,>FF,>FC,>FC,>FC,>FC,>FC ; Character 122
     6753 FF  
     6754 FF  
     6755 FC  
     6756 FC  
     6757 FC  
     6758 FC  
     6759 FC  
0029 675A F8  GUDG123	BYTE >F8,>FC,>FE,>FE,>FE,>FE,>FE,>FE ; Character 123
     675B FC  
     675C FE  
     675D FE  
     675E FE  
     675F FE  
     6760 FE  
     6761 FE  
0030 6762 FF  GUDG124	BYTE >FF,>FF,>FF,>9F,>9F,>9F,>9F,>9F ; Character 124
     6763 FF  
     6764 FF  
     6765 9F  
     6766 9F  
     6767 9F  
     6768 9F  
     6769 9F  
0031 676A DF  GUDG125	BYTE >DF,>FF,>FF,>E7,>C7,>C7,>C7,>C7 ; Character 125
     676B FF  
     676C FF  
     676D E7  
     676E C7  
     676F C7  
     6770 C7  
     6771 C7  
0032 6772 E7  GUDG126	BYTE >E7,>E7,>E7,>F7,>F7,>F7,>F7,>F7 ; Character 126
     6773 E7  
     6774 E7  
     6775 F7  
     6776 F7  
     6777 F7  
     6778 F7  
     6779 F7  
0033 677A FF  GUDG127	BYTE >FF,>FF,>FF,>F3,>F3,>F3,>F3,>F3 ; Character 127
     677B FF  
     677C FF  
     677D F3  
     677E F3  
     677F F3  
     6780 F3  
     6781 F3  
0034 6782 FB  GUDG128	BYTE >FB,>FF,>FF,>FC,>F8,>F8,>F8,>F8 ; Character 128
     6783 FF  
     6784 FF  
     6785 FC  
     6786 F8  
     6787 F8  
     6788 F8  
     6789 F8  
0035 678A FC  GUDG129	BYTE >FC,>FC,>FC,>FE,>FE,>FE,>FE,>FE ; Character 129
     678B FC  
     678C FC  
     678D FE  
     678E FE  
     678F FE  
     6790 FE  
     6791 FE  
0036 6792 FE  GUDG130	BYTE >FE,>FE,>7E,>7E,>7E,>7E,>7E,>3F ; Character 130
     6793 FE  
     6794 7E  
     6795 7E  
     6796 7E  
     6797 7E  
     6798 7E  
     6799 3F  
0037 679A 3F  GUDG131	BYTE >3F,>7F,>7F,>7F,>7E,>7E,>7E,>7E ; Character 131
     679B 7F  
     679C 7F  
     679D 7F  
     679E 7E  
     679F 7E  
     67A0 7E  
     67A1 7E  
0038 67A2 7E  GUDG132	BYTE >7E,>7E,>7E,>00,>00,>00,>00,>01 ; Character 132
     67A3 7E  
     67A4 7E  
     67A5 00  
     67A6 00  
     67A7 00  
     67A8 00  
     67A9 01  
0039 67AA 3F  GUDG133	BYTE >3F,>3F,>3F,>7F,>7F,>FF,>FF,>FE ; Character 133
     67AB 3F  
     67AC 3F  
     67AD 7F  
     67AE 7F  
     67AF FF  
     67B0 FF  
     67B1 FE  
0040 67B2 80  GUDG134	BYTE >80,>80,>80,>80,>00,>00,>00,>00 ; Character 134
     67B3 80  
     67B4 80  
     67B5 80  
     67B6 00  
     67B7 00  
     67B8 00  
     67B9 00  
0041 67BA FE  GUDG135	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FF ; Character 135
     67BB FE  
     67BC FE  
     67BD FE  
     67BE FE  
     67BF FE  
     67C0 FE  
     67C1 FF  
0042 67C2 7F  GUDG136	BYTE >7F,>7F,>7F,>7F,>7F,>7F,>7F,>FF ; Character 136
     67C3 7F  
     67C4 7F  
     67C5 7F  
     67C6 7F  
     67C7 7F  
     67C8 7F  
     67C9 FF  
0043 67CA C1  GUDG137	BYTE >C1,>81,>81,>81,>81,>81,>81,>81 ; Character 137
     67CB 81  
     67CC 81  
     67CD 81  
     67CE 81  
     67CF 81  
     67D0 81  
     67D1 81  
0044 67D2 FC  GUDG138	BYTE >FC,>FC,>FC,>FC,>FC,>FC,>FC,>FC ; Character 138
     67D3 FC  
     67D4 FC  
     67D5 FC  
     67D6 FC  
     67D7 FC  
     67D8 FC  
     67D9 FC  
0045 67DA FE  GUDG139	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FE ; Character 139
     67DB FE  
     67DC FE  
     67DD FE  
     67DE FE  
     67DF FE  
     67E0 FE  
     67E1 FE  
0046 67E2 9F  GUDG140	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>9F,>9F ; Character 140
     67E3 9F  
     67E4 9F  
     67E5 9F  
     67E6 9F  
     67E7 9F  
     67E8 9F  
     67E9 9F  
0047 67EA C7  GUDG141	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>C7,>C7 ; Character 141
     67EB C7  
     67EC C7  
     67ED C7  
     67EE C7  
     67EF C7  
     67F0 C7  
     67F1 C7  
0048 67F2 F7  GUDG142	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>F7,>F7 ; Character 142
     67F3 F7  
     67F4 F7  
     67F5 F7  
     67F6 F7  
     67F7 F7  
     67F8 F7  
     67F9 F7  
0049 67FA F3  GUDG143	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>F3,>F3 ; Character 143
     67FB F3  
     67FC F3  
     67FD F3  
     67FE F3  
     67FF F3  
     6800 F3  
     6801 F3  
0050 6802 F8  GUDG144	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>F8,>F8 ; Character 144
     6803 F8  
     6804 F8  
     6805 F8  
     6806 F8  
     6807 F8  
     6808 F8  
     6809 F8  
0051 680A 3F  GUDG145	BYTE >3F,>3F,>3F,>3F,>1F,>1F,>1F,>1F ; Character 145
     680B 3F  
     680C 3F  
     680D 3F  
     680E 1F  
     680F 1F  
     6810 1F  
     6811 1F  
0052 6812 7E  GUDG146	BYTE >7E,>7E,>7E,>7E,>FC,>FC,>FC,>FC ; Character 146
     6813 7E  
     6814 7E  
     6815 7E  
     6816 FC  
     6817 FC  
     6818 FC  
     6819 FC  
0053 681A 01  GUDG147	BYTE >01,>03,>07,>07,>0F,>0F,>1F,>3F ; Character 147
     681B 03  
     681C 07  
     681D 07  
     681E 0F  
     681F 0F  
     6820 1F  
     6821 3F  
0054 6822 FC  GUDG148	BYTE >FC,>FC,>F8,>F8,>F0,>E0,>E0,>C0 ; Character 148
     6823 FC  
     6824 F8  
     6825 F8  
     6826 F0  
     6827 E0  
     6828 E0  
     6829 C0  
0055 682A 7F  GUDG149	BYTE >7F,>7F,>3F,>00,>FE,>FE,>FF,>7F ; Character 149
     682B 7F  
     682C 3F  
     682D 00  
     682E FE  
     682F FE  
     6830 FF  
     6831 7F  
0056 6832 FF  GUDG150	BYTE >FF,>FF,>7F,>7F,>7F,>7F,>FF,>FE ; Character 150
     6833 FF  
     6834 7F  
     6835 7F  
     6836 7F  
     6837 7F  
     6838 FF  
     6839 FE  
0057 683A 3F  GUDG151	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>00,>00 ; Character 151
     683B 3F  
     683C 3F  
     683D 3F  
     683E 3F  
     683F 3F  
     6840 00  
     6841 00  
0058 6842 81  GUDG152	BYTE >81,>81,>80,>80,>80,>80,>00,>00 ; Character 152
     6843 81  
     6844 80  
     6845 80  
     6846 80  
     6847 80  
     6848 00  
     6849 00  
0059 684A FC  GUDG153	BYTE >FC,>FC,>FF,>FF,>7F,>1F,>00,>00 ; Character 153
     684B FC  
     684C FF  
     684D FF  
     684E 7F  
     684F 1F  
     6850 00  
     6851 00  
0060 6852 FE  GUDG154	BYTE >FE,>FE,>FC,>FC,>F8,>E0,>00,>00 ; Character 154
     6853 FE  
     6854 FC  
     6855 FC  
     6856 F8  
     6857 E0  
     6858 00  
     6859 00  
0061 685A 9F  GUDG155	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>00,>00 ; Character 155
     685B 9F  
     685C 9F  
     685D 9F  
     685E 9F  
     685F 9F  
     6860 00  
     6861 00  
0062 6862 C7  GUDG156	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>00,>00 ; Character 156
     6863 C7  
     6864 C7  
     6865 C7  
     6866 C7  
     6867 C7  
     6868 00  
     6869 00  
0063 686A F7  GUDG157	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>00,>00 ; Character 157
     686B F7  
     686C F7  
     686D F7  
     686E F7  
     686F F7  
     6870 00  
     6871 00  
0064 6872 F3  GUDG158	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>00,>00 ; Character 158
     6873 F3  
     6874 F3  
     6875 F3  
     6876 F3  
     6877 F3  
     6878 00  
     6879 00  
0065 687A F8  GUDG159	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>00,>00 ; Character 159
     687B F8  
     687C F8  
     687D F8  
     687E F8  
     687F F8  
     6880 00  
     6881 00  
0066 6882 FE  GUDG160	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>00,>00 ; Character 160
     6883 FE  
     6884 FE  
     6885 FE  
     6886 FE  
     6887 FE  
     6888 00  
     6889 00  
0067 688A 1F  GUDG161	BYTE >1F,>0F,>0F,>0F,>0F,>1F,>3F,>3F ; Character 161
     688B 0F  
     688C 0F  
     688D 0F  
     688E 0F  
     688F 1F  
     6890 3F  
     6891 3F  
0068 6892 FC  GUDG162	BYTE >FC,>FC,>FC,>FC,>F8,>F8,>F8,>F0 ; Character 162
     6893 FC  
     6894 FC  
     6895 FC  
     6896 F8  
     6897 F8  
     6898 F8  
     6899 F0  
0069 689A 3F  GUDG163	BYTE >3F,>7F,>7F,>7F,>7F,>7F,>00,>00 ; Character 163
     689B 7F  
     689C 7F  
     689D 7F  
     689E 7F  
     689F 7F  
     68A0 00  
     68A1 00  
0070 68A2 80  GUDG164	BYTE >80,>FF,>FF,>FF,>FF,>FF,>00,>00 ; Character 164
     68A3 FF  
     68A4 FF  
     68A5 FF  
     68A6 FF  
     68A7 FF  
     68A8 00  
     68A9 00  
0071 68AA 00  GUDG165	BYTE >00,>00,>80,>80,>80,>80,>00,>00 ; Character 165
     68AB 00  
     68AC 80  
     68AD 80  
     68AE 80  
     68AF 80  
     68B0 00  
     68B1 00  
0072 68B2 3F  GUDG166	BYTE >3F,>0F,>00,>00,>00,>00,>00,>00 ; Character 166
     68B3 0F  
     68B4 00  
     68B5 00  
     68B6 00  
     68B7 00  
     68B8 00  
     68B9 00  
0073 68BA FC  GUDG167	BYTE >FC,>F0,>00,>00,>00,>00,>00,>00 ; Character 167
     68BB F0  
     68BC 00  
     68BD 00  
     68BE 00  
     68BF 00  
     68C0 00  
     68C1 00  
0074 68C2 3F  GUDG168	BYTE >3F,>00,>00,>00,>00,>00,>00,>00 ; Character 168
     68C3 00  
     68C4 00  
     68C5 00  
     68C6 00  
     68C7 00  
     68C8 00  
     68C9 00  
0075 68CA E0  GUDG169	BYTE >E0,>00,>00,>00,>00,>00,>00,>00 ; Character 169
     68CB 00  
     68CC 00  
     68CD 00  
     68CE 00  
     68CF 00  
     68D0 00  
     68D1 00  
0076 68D2 3E  GUDG170	BYTE >3E,>60,>60,>60,>60,>60,>32,>1E ; Character 170
     68D3 60  
     68D4 60  
     68D5 60  
     68D6 60  
     68D7 60  
     68D8 32  
     68D9 1E  
0077 68DA 3E  GUDG171	BYTE >3E,>66,>43,>C3,>43,>62,>76,>3C ; Character 171
     68DB 66  
     68DC 43  
     68DD C3  
     68DE 43  
     68DF 62  
     68E0 76  
     68E1 3C  
0078 68E2 63  GUDG172	BYTE >63,>73,>7B,>6F,>6F,>67,>67,>63 ; Character 172
     68E3 73  
     68E4 7B  
     68E5 6F  
     68E6 6F  
     68E7 67  
     68E8 67  
     68E9 63  
0079 68EA 7C  GUDG173	BYTE >7C,>60,>60,>7C,>60,>60,>60,>60 ; Character 173
     68EB 60  
     68EC 60  
     68ED 7C  
     68EE 60  
     68EF 60  
     68F0 60  
     68F1 60  
0080 68F2 C7  GUDG174	BYTE >C7,>CC,>CC,>CC,>CC,>CC,>CE,>C7 ; Character 174
     68F3 CC  
     68F4 CC  
     68F5 CC  
     68F6 CC  
     68F7 CC  
     68F8 CE  
     68F9 C7  
0081 68FA C0  GUDG175	BYTE >C0,>00,>00,>C0,>E0,>60,>E0,>C0 ; Character 175
     68FB 00  
     68FC 00  
     68FD C0  
     68FE E0  
     68FF 60  
     6900 E0  
     6901 C0  
0082 6902 61  GLINE0_25 BYTE >61,>62,>63,>64,>65,>66,>67,>68,>68,>69,>6A,>6B,>68,>6C,>6D,>6E,>6F,>70,>71,>72,>68,>73,>74,>75
     6903 62  
     6904 63  
     6905 64  
     6906 65  
     6907 66  
     6908 67  
     6909 68  
     690A 68  
     690B 69  
     690C 6A  
     690D 6B  
     690E 68  
     690F 6C  
     6910 6D  
     6911 6E  
     6912 6F  
     6913 70  
     6914 71  
     6915 72  
     6916 68  
     6917 73  
     6918 74  
     6919 75  
0083 691A 76  GLINE1_25 BYTE >76,>77,>78,>79,>7A,>7B,>78,>7C,>7D,>7E,>7F,>80,>81,>82,>83,>84,>85,>86
     691B 77  
     691C 78  
     691D 79  
     691E 7A  
     691F 7B  
     6920 78  
     6921 7C  
     6922 7D  
     6923 7E  
     6924 7F  
     6925 80  
     6926 81  
     6927 82  
     6928 83  
     6929 84  
     692A 85  
     692B 86  
0084 692C 87  GLINE2_24 BYTE >87,>88,>78,>89,>8A,>8B,>78,>8C,>8D,>8E,>8F,>90,>8B,>91,>92,>93,>94
     692D 88  
     692E 78  
     692F 89  
     6930 8A  
     6931 8B  
     6932 78  
     6933 8C  
     6934 8D  
     6935 8E  
     6936 8F  
     6937 90  
     6938 8B  
     6939 91  
     693A 92  
     693B 93  
     693C 94  
0085 693D 95  GLINE3_25 BYTE >95,>96,>97,>98,>99,>9A,>97,>9B,>9C,>9D,>9E,>9F,>A0,>A1,>A2,>A3,>A4,>A5
     693E 96  
     693F 97  
     6940 98  
     6941 99  
     6942 9A  
     6943 97  
     6944 9B  
     6945 9C  
     6946 9D  
     6947 9E  
     6948 9F  
     6949 A0  
     694A A1  
     694B A2  
     694C A3  
     694D A4  
     694E A5  
0086 694F A6  GLINE4_9 BYTE >A6,>A7
     6950 A7  
0087 6951 A8  GLINE4_28 BYTE >A8,>A9,>AA,>AB,>AC,>AD,>AE,>AF
     6952 A9  
     6953 AA  
     6954 AB  
     6955 AC  
     6956 AD  
     6957 AE  
     6958 AF  
0088          
0089          G_SCR1
0090 6959 31      MOVE >0280,G@GUDG96,V@>0B00 ; Copy our screen chars
     695A 02  
     695B 80
     695C AB  
     695D 00
     695E 66  
     695F 82
0091          
0092 6960 31  	MOVE >0018,G@GLINE0_25,V@>0001
     6961 00  
     6962 18
     6963 A0  
     6964 01
     6965 69  
     6966 02
0093 6967 31  	MOVE >0012,G@GLINE1_25,V@>0027
     6968 00  
     6969 12
     696A A0  
     696B 27
     696C 69  
     696D 1A
0094 696E 31  	MOVE >0011,G@GLINE2_24,V@>0047
     696F 00  
     6970 11
     6971 A0  
     6972 47
     6973 69  
     6974 2C
0095 6975 31  	MOVE >0012,G@GLINE3_25,V@>0067
     6976 00  
     6977 12
     6978 A0  
     6979 67
     697A 69  
     697B 3D
0096 697C 31  	MOVE >0002,G@GLINE4_9,V@>0087
     697D 00  
     697E 02
     697F A0  
     6980 87
     6981 69  
     6982 4F
0097 6983 31  	MOVE >0008,G@GLINE4_28,V@>0094
     6984 00  
     6985 08
     6986 A0  
     6987 94
     6988 69  
     6989 51
0098          
0099 698A 00      RTN
0100          
