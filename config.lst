XGA99 CROSS-ASSEMBLER   VERSION 3.0.1
              > config.gpl
0001          * config.gpl
0002          * Configurator for GROMMY2
0003          * At this point this is just a demo how to render the generated screen.gpl
0004          * EP 2023-11-26
0005          *
0006          * Compile the GPL code to binary with:
0007          * xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
0008          * output file is config.bin, since the filename ends with g it is treated
0009          * by an emulator such as js99er.net as a GROM file.
0010          *
0011          * This file includes the screen.gpl file at the very end.
0012          *
0013          
0014          LALIGN    EQU >02              Left alignment of text
0015          LALIGN2   EQU >03
0016          LAYOUTVER EQU 5         Row for Version number
0017          LAYOUTBAN EQU 8        Row for selected bank display
0018          VEROFS    EQU 32*LAYOUTVER
0019          VALIDIND  EQU VEROFS-29         ; Indicator for valid command
0020          
0021          * A few variables for the grommy2 config to use.
0022          * I am not sure if these are free to use, but I will try :)
0023          XREG    EQU >832C   ; ** Program text or token pointer (in BASIC?)
0024          YREG    EQU >832E   ; ** Pointer to line number tale (in BASIC)
0025          ZREG    EQU >8330   ; ** Start of line number table pointer (in BASIC)
0026          ; >8332 .. 8337 seem to contain pointers also used by BASIC not GPL
0027          
0028          * Grommy2 command buffer in scratchpad
0029          GCMDBYTE EQU >8340
0030          GCMDP2   EQU >8342
0031          GCMDP3   EQU >8343
0032          GCMDP4   EQU >8344
0033          GCMDP5   EQU >8345
0034          GCMDP6   EQU >8346
0035          GCMDP7   EQU >8347
0036          
0037          BANK    EQU >8350           Active bank
0038          SHADOW  EQU >8351           Shadow enable / disable
0039          PAD0    EQU >835C
0040          PAD1    EQU >835D
0041          PAD2    EQU >835E
0042          PAD3    EQU >835F
0043          PAD4    EQU >8360
0044          PAD5    EQU >8361
0045          INDEX   EQU PAD5
0046          DUMPA   EQU >8362           ; GROM Dump address
0047          VRAMP   EQU >8340           ; VRAM ptr overlays GCMDBYTE
0048          
0049          DSP     EQU >8372           ; GPL data stack pointer
0050          SCANKEY EQU >8375
0051          VDPTIMER EQU >8379          ; Incremented by VDP interrupts
0052          * Hardware interface address
0053          HWIF     EQU >5FF0
0054          
0055          HEXBASECH EQU >E0         ; Base character for hex display
0056          ALIVECH   EQU >DF         ; Placed in top right corner, show we are alive
0057          
0058          
0059 6000 AA  G6000  DATA >AA01             standard header  version 1
     6001 01
0060 6002 00         DATA >0000             # of programs 0
     6003 00
0061 6004 00         DATA >0000             no power up
     6005 00
0062 6006 60         DATA G6010             program
     6007 10
0063 6008 00         DATA >0000             DSRs
     6009 00
0064 600A 00         DATA >0000             subprograms
     600B 00
0065 600C 00         DATA >0000
     600D 00
0066 600E 00         DATA >0000
     600F 00
0067          
0068 6010 00  G6010  DATA >0000         * No next program
     6011 00
0069 6012 60         DATA GPROG
     6013 2A
0070 6014 0E         STRI 'GROMMY2 CONFIG'
     6015 47  
     6016 52  
     6017 4F  
     6018 4D  
     6019 4D  
     601A 59  
     601B 32  
     601C 20  
     601D 43  
     601E 4F  
     601F 4E  
     6020 46  
     6021 49  
     6022 47  
0071          
0072          GVREGS
0073 6023 E0      BYTE  >E0              VDP registers values: standard mode
0074 6024 00      BYTE  >00              screen image at >0000
0075 6025 0E      BYTE  >0E              color table at >0380
0076 6026 01      BYTE  >01              char patterns at >0800
0077 6027 06      BYTE  >06              sprite attributes at >0300
0078 6028 00      BYTE  >00              sprite patterns at >0000
0079 6029 F5      BYTE  >F5              text/screen colors: white / light blue
0080          
0081          GPROG
0082 602A 86      CLR   @>8374
     602B 74  
0083 602C BF      DST   >0900,@>834A     load upper case chars 32->
     602D 4A  
     602E 09  
     602F 00
0084 6030 06      CALL  G@>0018
     6031 00  
     6032 18
0085          * Setup roughly as with mini memory
0086 6033 39      MOVE >0007,G@GVREGS,#>01    Set VDP Regs
     6034 00  
     6035 07
     6036 01  
     6037 60  
     6038 23
0087 6039 86      CLR   V@>0800          clear charpats 0-31
     603A A8  
     603B 00
0088 603C 35      MOVE  >00FF,V@>0800,V@>0801
     603D 00  
     603E FF
     603F A8  
     6040 01
     6041 A8  
     6042 00
0089          
0090 6043 BE      ST    >7E,@>8373       init subroutine stack
     6044 73  
     6045 7E  
0091 6046 87      DCLR  @>8322           clear error code
     6047 22  
0092 6048 87      DCLR  @>8348           clear flags
     6049 48  
0093          
0094 604A 87      DCLR   @DUMPA
     604B 62  
0095 604C 86      CLR    @BANK           Actually init from grommy2
     604D 50  
0096 604E 86      CLR    @SHADOW         Actually init from grommy2
     604F 51  
0097          
0098 6050 87      DCLR   @XREG
     6051 2C  
0099 6052 87      DCLR   @YREG
     6053 2E  
0100 6054 87      DCLR   @ZREG
     6055 30  
0101          
0102 6056 06      CALL G@GVDPSETUP
     6057 67  
     6058 49
0103          
0104 6059 06      CALL G@G_SCR1       ; Setup the screen which was automatically generated
     605A 6A  
     605B 34
0105          * Setup additional chars E0..EF as numbers 0..9 and A..F
0106          * 0x980 = hex(0x800+ord('0')*8)
0107          * 0xa08 = hex(0x800+ord('A')*8)
0108          * 0xf00 = hex(0x800+0xe0*8)
0109          * 0xf50 = hex(0x800+0xea*8)
0110          CHSRC1 EQU >800+(8*'0')
0111          CHSRC2 EQU >800+(8*'A')
0112          CHOFS1 EQU >800+(8*HEXBASECH)
0113          CHOFS2 EQU >800+(8*(HEXBASECH+10))
0114 605C 35      MOVE 10*8,V@CHSRC1,V@CHOFS1  * 10 number patterns
     605D 00  
     605E 50
     605F AF  
     6060 0F
     6061 00
     6062 A9  
     6063 80
0115 6064 35      MOVE  6*8,V@CHSRC2,V@CHOFS2
     6065 00  
     6066 30
     6067 AF  
     6068 0F
     6069 50
     606A AA  
     606B 08
0116          * Set the colors for these characters.
0117 606C BE      ST   >A5,V@>39C
     606D A3  
     606E 9C
     606F A5  
0118 6070 BE      ST   >A5,V@>39D
     6071 A3  
     6072 9D
     6073 A5  
0119          * Make the fonts "bold"
0120 6074 BF      DST  >F00,@VRAMP
     6075 40  
     6076 0F  
     6077 00
0121 6078 BC  !   ST   V@0(@VRAMP),@PAD0
     6079 5C  
     607A E0  
     607B 00
     607C 40
0122 607D E6      SRL  1,@PAD0
     607E 5C  
     607F 01  
0123 6080 B4      OR   V@0(@VRAMP),@PAD0
     6081 5C  
     6082 E0  
     6083 00
     6084 40
0124 6085 BC      ST  @PAD0,V@0(@VRAMP)
     6086 E0  
     6087 00
     6088 40
     6089 5C  
0125 608A 91      DINC @VRAMP
     608B 40  
0126 608C D7      DCEQ >F80,@VRAMP
     608D 40  
     608E 0F  
     608F 80
0127 6090 40      BR   -!
     6091 78  
0128          * Copy the fonts to make inverse duplicates
0129 6092 35      MOVE >80,V@>F00,V@>F80
     6093 00  
     6094 80
     6095 AF  
     6096 0F
     6097 80
     6098 AF  
     6099 0F
     609A 00
0130 609B BE      ST   >5A,V@>39E
     609C A3  
     609D 9E
     609E 5A  
0131 609F BE      ST   >5A,V@>39F
     60A0 A3  
     60A1 9F
     60A2 5A  
0132          
0133          SCREEN1:
0134          * Use the FMT token to add some strings on the screen
0135 60A3 08      FMT
0136 60A4 FF      COL LALIGN
     60A5 02  
0137 60A6 FE      ROW LAYOUTVER
     60A7 05  
0138 60A8 1D      HTEX 'VERSION 0.0.00 BANK 0 SHADOW 0'
     60A9 56  
     60AA 45  
     60AB 52  
     60AC 53  
     60AD 49  
     60AE 4F  
     60AF 4E  
     60B0 20  
     60B1 30  
     60B2 2E  
     60B3 30  
     60B4 2E  
     60B5 30  
     60B6 30  
     60B7 20  
     60B8 42  
     60B9 41  
     60BA 4E  
     60BB 4B  
     60BC 20  
     60BD 30  
     60BE 20  
     60BF 53  
     60C0 48  
     60C1 41  
     60C2 44  
     60C3 4F  
     60C4 57  
     60C5 20  
     60C6 30  
0139 60C7 A0      ROW+ >01
0140 60C8 FF      COL LALIGN
     60C9 02  
0141 60CA 19      HTEX 'SELECT GROM BANK FOR READS'
     60CB 53  
     60CC 45  
     60CD 4C  
     60CE 45  
     60CF 43  
     60D0 54  
     60D1 20  
     60D2 47  
     60D3 52  
     60D4 4F  
     60D5 4D  
     60D6 20  
     60D7 42  
     60D8 41  
     60D9 4E  
     60DA 4B  
     60DB 20  
     60DC 46  
     60DD 4F  
     60DE 52  
     60DF 20  
     60E0 52  
     60E1 45  
     60E2 41  
     60E3 44  
     60E4 53  
0142 60E5 A0      ROW+ >01
0143 60E6 FF      COL LALIGN2
     60E7 03  
0144 60E8 0C      HTEX '0 SYSTEM BANK'
     60E9 30  
     60EA 20  
     60EB 53  
     60EC 59  
     60ED 53  
     60EE 54  
     60EF 45  
     60F0 4D  
     60F1 20  
     60F2 42  
     60F3 41  
     60F4 4E  
     60F5 4B  
0145 60F6 A0      ROW+ >01
0146 60F7 FF      COL LALIGN2
     60F8 03  
0147 60F9 0C      HTEX '1 USER BANK 1'
     60FA 31  
     60FB 20  
     60FC 55  
     60FD 53  
     60FE 45  
     60FF 52  
     6100 20  
     6101 42  
     6102 41  
     6103 4E  
     6104 4B  
     6105 20  
     6106 31  
0148 6107 A0      ROW+ >01
0149 6108 FF      COL LALIGN2
     6109 03  
0150 610A 0C      HTEX '2 USER BANK 2'
     610B 32  
     610C 20  
     610D 55  
     610E 53  
     610F 45  
     6110 52  
     6111 20  
     6112 42  
     6113 41  
     6114 4E  
     6115 4B  
     6116 20  
     6117 32  
0151 6118 A0      ROW+ >01
0152 6119 FF      COL LALIGN2
     611A 03  
0153 611B 0A      HTEX '3 GRAM BANK'
     611C 33  
     611D 20  
     611E 47  
     611F 52  
     6120 41  
     6121 4D  
     6122 20  
     6123 42  
     6124 41  
     6125 4E  
     6126 4B  
0154          
0155 6127 A1      ROW+ >02
0156 6128 FF      COL LALIGN
     6129 02  
0157 612A 09      HTEX 'SHADOW RAM'
     612B 53  
     612C 48  
     612D 41  
     612E 44  
     612F 4F  
     6130 57  
     6131 20  
     6132 52  
     6133 41  
     6134 4D  
0158 6135 A0      ROW+ >01
0159 6136 FF      COL LALIGN2
     6137 03  
0160 6138 15      HTEX '4 ENABLE     5 DISABLE'
     6139 34  
     613A 20  
     613B 45  
     613C 4E  
     613D 41  
     613E 42  
     613F 4C  
     6140 45  
     6141 20  
     6142 20  
     6143 20  
     6144 20  
     6145 20  
     6146 35  
     6147 20  
     6148 44  
     6149 49  
     614A 53  
     614B 41  
     614C 42  
     614D 4C  
     614E 45  
0161          
0162 614F A1      ROW+ >02
0163 6150 FF      COL LALIGN
     6151 02  
0164 6152 16      HTEX 'FLASH GRAM TO USER BANK'
     6153 46  
     6154 4C  
     6155 41  
     6156 53  
     6157 48  
     6158 20  
     6159 47  
     615A 52  
     615B 41  
     615C 4D  
     615D 20  
     615E 54  
     615F 4F  
     6160 20  
     6161 55  
     6162 53  
     6163 45  
     6164 52  
     6165 20  
     6166 42  
     6167 41  
     6168 4E  
     6169 4B  
0165 616A A0      ROW+ >01
0166 616B FF      COL LALIGN2
     616C 03  
0167 616D 14      HTEX '6 BANK 1     7 BANK 2'
     616E 36  
     616F 20  
     6170 42  
     6171 41  
     6172 4E  
     6173 4B  
     6174 20  
     6175 31  
     6176 20  
     6177 20  
     6178 20  
     6179 20  
     617A 20  
     617B 37  
     617C 20  
     617D 42  
     617E 41  
     617F 4E  
     6180 4B  
     6181 20  
     6182 32  
0168          
0169 6183 A1      ROW+ >02
0170 6184 FF      COL LALIGN
     6185 02  
0171 6186 14      HTEX 'COPY ROM BANK TO GRAM'
     6187 43  
     6188 4F  
     6189 50  
     618A 59  
     618B 20  
     618C 52  
     618D 4F  
     618E 4D  
     618F 20  
     6190 42  
     6191 41  
     6192 4E  
     6193 4B  
     6194 20  
     6195 54  
     6196 4F  
     6197 20  
     6198 47  
     6199 52  
     619A 41  
     619B 4D  
0172 619C A0      ROW+ >01
0173 619D FF      COL LALIGN2
     619E 03  
0174 619F 16      HTEX 'A COPY FROM SYSTEM BANK'
     61A0 41  
     61A1 20  
     61A2 43  
     61A3 4F  
     61A4 50  
     61A5 59  
     61A6 20  
     61A7 46  
     61A8 52  
     61A9 4F  
     61AA 4D  
     61AB 20  
     61AC 53  
     61AD 59  
     61AE 53  
     61AF 54  
     61B0 45  
     61B1 4D  
     61B2 20  
     61B3 42  
     61B4 41  
     61B5 4E  
     61B6 4B  
0175 61B7 A0      ROW+ >01
0176 61B8 FF      COL LALIGN2
     61B9 03  
0177 61BA 16      HTEX 'B COPY FROM USER BANK 1'
     61BB 42  
     61BC 20  
     61BD 43  
     61BE 4F  
     61BF 50  
     61C0 59  
     61C1 20  
     61C2 46  
     61C3 52  
     61C4 4F  
     61C5 4D  
     61C6 20  
     61C7 55  
     61C8 53  
     61C9 45  
     61CA 52  
     61CB 20  
     61CC 42  
     61CD 41  
     61CE 4E  
     61CF 4B  
     61D0 20  
     61D1 31  
0178 61D2 A0      ROW+ >01
0179 61D3 FF      COL LALIGN2
     61D4 03  
0180 61D5 16      HTEX 'C COPY FROM USER BANK 2'
     61D6 43  
     61D7 20  
     61D8 43  
     61D9 4F  
     61DA 50  
     61DB 59  
     61DC 20  
     61DD 46  
     61DE 52  
     61DF 4F  
     61E0 4D  
     61E1 20  
     61E2 55  
     61E3 53  
     61E4 45  
     61E5 52  
     61E6 20  
     61E7 42  
     61E8 41  
     61E9 4E  
     61EA 4B  
     61EB 20  
     61EC 32  
0181          
0182 61ED A0      ROW+ >01
0183 61EE FF      COL LALIGN
     61EF 02  
0184 61F0 08      HTEX '9 MORE...'
     61F1 39  
     61F2 20  
     61F3 4D  
     61F4 4F  
     61F5 52  
     61F6 45  
     61F7 2E  
     61F8 2E  
     61F9 2E  
0185          
0186 61FA FB      FEND
0187          
0188          * Pattern address of character ALIVECH
0189          PATADR EQU >0800+(8*ALIVECH)
0190          * Test a couple of chars
0191          *    MOVE 64,G@DENSE_FONT,V@PATADR-64
0192          *    ST >F7,V@0
0193          *    ST >F8,V@1
0194          *    ST >F9,V@2
0195          *    ST >FA,V@3
0196          *    ST >FB,V@4
0197          *    ST >FC,V@5
0198          *    ST >FD,V@6
0199          *    ST >FE,V@7
0200          
0201 61FB 06      CALL  SHOW_VERSION      ; Get version, bank, shadow info
     61FC 66  
     61FD 40
0202 61FE 05      B     GUPDATE           ; update screen
     61FF 62  
     6200 B9
0203          
0204          GWAIT
0205 6201 03      SCAN
0206 6202 62      BS    GOTKEY
     6203 0E  
0207          * We did not get a key. Animate something.
0208 6204 BE      ST    ALIVECH,V@>001F      Write char FF to top right corner
     6205 A0  
     6206 1F
     6207 DF  
0209 6208 90      INC   V@PATADR
     6209 AE  
     620A F8
0210 620B 05      B    G@GWAIT          wait for the user to press a key
     620C 62  
     620D 01
0211          
0212          
0213          GOTKEY:
0214 620E BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     620F A0  
     6210 82
     6211 75  
0215 6212 BE      ST    ' ',V@VALIDIND        ; Assume invalid CMD
     6213 A0  
     6214 83
     6215 20  
0216 6216 CE      CGT   '0'-1,@SCANKEY       greater than >= 0
     6217 75  
     6218 2F  
0217 6219 42      BR    GG01              no skip forward
     621A B3  
0218 621B CE      CGT   '9',@SCANKEY        Key greater than '9'?
     621C 75  
     621D 39  
0219 621E 62      BS    CHECK_ABC             ; Yes: skip forward
     621F 39  
0220 6220 A6      SUB   '0',@SCANKEY
     6221 75  
     6222 30  
0221 6223 8A      CASE  @SCANKEY
     6224 75  
0222 6225 42      BR    KEY0
     6226 5D  
0223 6227 42      BR    KEY1
     6228 5D  
0224 6229 42      BR    KEY2
     622A 5D  
0225 622B 42      BR    KEY3
     622C 68  
0226 622D 42      BR    KEY4
     622E 4E  
0227 622F 42      BR    KEY5
     6230 59  
0228 6231 42      BR    KEY6
     6232 70  
0229 6233 42      BR    KEY7
     6234 7B  
0230 6235 42      BR    KEY8
     6236 80  
0231 6237 42      BR    KEY9
     6238 89  
0232          CHECK_ABC
0233          ; Commands A,B and C
0234 6239 CE      CGT   'A'-1,@SCANKEY
     623A 75  
     623B 40  
0235 623C 42      BR    GG01
     623D B3  
0236 623E CE      CGT   'C',@SCANKEY
     623F 75  
     6240 43  
0237 6241 62      BS    GG01
     6242 B3  
0238 6243 A6      SUB   'A',@SCANKEY
     6244 75  
     6245 41  
0239 6246 8A      CASE  @SCANKEY
     6247 75  
0240 6248 42      BR    KEYA
     6249 8C  
0241 624A 42      BR    KEYB
     624B 98  
0242 624C 42      BR    KEYC
     624D 9D  
0243          
0244          KEY4:
0245 624E BE      ST  1,@SHADOW
     624F 51  
     6250 01  
0246          SHADOWSET
0247 6251 BC      ST  @SHADOW,@GCMDP2    ; Set parameter 2
     6252 42  
     6253 51  
0248 6254 BE      ST  3,@GCMDBYTE         ; Command 3 shadow enable/disable
     6255 40  
     6256 03  
0249 6257 42      BR  ISSUECMD
     6258 A6  
0250          KEY5:
0251 6259 86      CLR @SHADOW
     625A 51  
0252 625B 42      BR  SHADOWSET
     625C 51  
0253          KEY0
0254          KEY1
0255          KEY2
0256 625D BC      ST   @SCANKEY,@BANK
     625E 50  
     625F 75  
0257 6260 BC      ST   @SCANKEY,@GCMDP2    ; Set parameter 2
     6261 42  
     6262 75  
0258          BANKSEL
0259 6263 BE      ST   1,@GCMDBYTE         ; Command 1 select bank for reads
     6264 40  
     6265 01  
0260 6266 42      BR  ISSUECMD
     6267 A6  
0261          KEY3
0262 6268 BC      ST   @SCANKEY,@BANK
     6269 50  
     626A 75  
0263 626B BE      ST   8,@GCMDP2           ; GRAM bank is 8
     626C 42  
     626D 08  
0264 626E 42      BR   BANKSEL
     626F 63  
0265          
0266          KEY6:                       ; Flash GRAM to user bank 1
0267 6270 BE      ST   >01,@GCMDP2        ; User bank 1
     6271 42  
     6272 01  
0268          GRAM2FLASH
0269 6273 BE      ST   >3F,@GCMDP3        ; Bit mask: flash entire bank
     6274 43  
     6275 3F  
0270 6276 BE      ST   4,@GCMDBYTE
     6277 40  
     6278 04  
0271 6279 42      BR  ISSUECMD
     627A A6  
0272          KEY7:                       ; Flash GRAM to user bank 2
0273 627B BE      ST   >02,@GCMDP2        ; User bank 2
     627C 42  
     627D 02  
0274 627E 42      BR   GRAM2FLASH
     627F 73  
0275          KEY8
0276 6280 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6281 A0  
     6282 83
     6283 2A  
0277 6284 06      CALL  SHOW_VERSION
     6285 66  
     6286 40
0278 6287 42      BR    GWAIT
     6288 01  
0279          KEY9:
0280 6289 05      B   DUMPSCREEN
     628A 62  
     628B EE
0281          
0282          KEYA:                       ; Copy bank 0 to GRAM
0283 628C BE      ST    0,@GCMDP2
     628D 42  
     628E 00  
0284          COPY2GRAM:
0285 628F BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6290 A0  
     6291 83
     6292 2A  
0286 6293 BE      ST    2,@GCMDBYTE
     6294 40  
     6295 02  
0287 6296 42      BR    ISSUECMD
     6297 A6  
0288          KEYB:
0289 6298 BE      ST    1,@GCMDP2
     6299 42  
     629A 01  
0290 629B 42      BR    COPY2GRAM
     629C 8F  
0291          KEYC:
0292 629D BE      ST    2,@GCMDP2
     629E 42  
     629F 02  
0293 62A0 42      BR    COPY2GRAM
     62A1 8F  
0294          
0295          ISSUECMD1:                  ; Clear last 4 parameter bytes
0296 62A2 87      DCLR  @GCMDBYTE+4
     62A3 44  
0297 62A4 87      DCLR  @GCMDBYTE+6
     62A5 46  
0298          ISSUECMD:
0299 62A6 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     62A7 00  
     62A8 08
     62A9 48  
     62AA 66  
     62AB C1
0300 62AC BE      ST    '*',V@VALIDIND    ; Command valid indicator
     62AD A0  
     62AE 83
     62AF 2A  
0301 62B0 06      CALL  GSENDCMD          ; Send command to HW
     62B1 66  
     62B2 AC
0302          
0303          GG01:
0304 62B3 D6      CEQ   >0F,@SCANKEY       is it Fctn-9?
     62B4 75  
     62B5 0F  
0305 62B6 42      BR    G@GCONT2         no: GCONT2
     62B7 B9  
0306 62B8 0B      EXIT                   yes: reset the TI-99/4A
0307          
0308          GCONT2
0309          * Update screen to reflect current status
0310          GUPDATE
0311          * Status of Shadow RAM enable/disable
0312 62B9 BE      ST  '0',@PAD0
     62BA 5C  
     62BB 30  
0313 62BC A0      ADD @SHADOW,@PAD0
     62BD 5C  
     62BE 51  
0314 62BF BC      ST  @PAD0,V@VEROFS+>1F        Write to VRAM
     62C0 A0  
     62C1 BF
     62C2 5C  
0315          * Status of selected bank
0316 62C3 BE      ST  '0',@PAD0
     62C4 5C  
     62C5 30  
0317 62C6 A0      ADD @BANK,@PAD0
     62C7 5C  
     62C8 50  
0318 62C9 BC      ST  @PAD0,V@VEROFS+>16  ; Write to VRAM
     62CA A0  
     62CB B6
     62CC 5C  
0319          
0320          
0321          * Start update GROM read bank. First erase bank markings.
0322          BANKOFS EQU (32*LAYOUTBAN)+4
0323 62CD BE      ST ' ',V@BANKOFS
     62CE A1  
     62CF 04
     62D0 20  
0324 62D1 BE      ST ' ',V@BANKOFS+>20
     62D2 A1  
     62D3 24
     62D4 20  
0325 62D5 BE      ST ' ',V@BANKOFS+>40
     62D6 A1  
     62D7 44
     62D8 20  
0326 62D9 BE      ST ' ',V@BANKOFS+>60
     62DA A1  
     62DB 64
     62DC 20  
0327 62DD 87      DCLR @PAD0
     62DE 5C  
0328 62DF BC      ST   @BANK,@PAD3        Copy to low byte the bank #
     62E0 5F  
     62E1 50  
0329 62E2 E3      DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
     62E3 5E  
     62E4 00  
     62E5 05
0330 62E6 BE      ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
     62E7 E1  
     62E8 04
     62E9 5E
     62EA 2A  
0331          * End update GROM read bank.
0332 62EB 05      B   G@GWAIT
     62EC 62  
     62ED 01
0333          
0334          *----------------------------------------
0335          * Second screen with a few features.
0336          *----------------------------------------
0337          DUMPSCREEN:
0338 62EE BE      ST   ' ',V@VEROFS
     62EF A0  
     62F0 A0
     62F1 20  
0339 62F2 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     62F3 02  
     62F4 5F
     62F5 A0  
     62F6 A1
     62F7 A0  
     62F8 A0
0340 62F9 08      FMT
0341 62FA FF      COL LALIGN
     62FB 02  
0342 62FC FE      ROW LAYOUTVER
     62FD 05  
0343 62FE 1A      HTEX '1 DEC 2 INC DUMP ADDR 3 RET'
     62FF 31  
     6300 20  
     6301 44  
     6302 45  
     6303 43  
     6304 20  
     6305 32  
     6306 20  
     6307 49  
     6308 4E  
     6309 43  
     630A 20  
     630B 44  
     630C 55  
     630D 4D  
     630E 50  
     630F 20  
     6310 41  
     6311 44  
     6312 44  
     6313 52  
     6314 20  
     6315 33  
     6316 20  
     6317 52  
     6318 45  
     6319 54  
0344 631A A0      ROW+ >01
0345 631B FF      COL LALIGN
     631C 02  
0346 631D 12      HTEX '4 FILL GRAM WITH FF'
     631E 34  
     631F 20  
     6320 46  
     6321 49  
     6322 4C  
     6323 4C  
     6324 20  
     6325 47  
     6326 52  
     6327 41  
     6328 4D  
     6329 20  
     632A 57  
     632B 49  
     632C 54  
     632D 48  
     632E 20  
     632F 46  
     6330 46  
0347 6331 A0      ROW+ >01
0348 6332 FF      COL LALIGN
     6333 02  
0349 6334 1B      HTEX '5 COPY 24K GROM 8000 TO GRAM'
     6335 35  
     6336 20  
     6337 43  
     6338 4F  
     6339 50  
     633A 59  
     633B 20  
     633C 32  
     633D 34  
     633E 4B  
     633F 20  
     6340 47  
     6341 52  
     6342 4F  
     6343 4D  
     6344 20  
     6345 38  
     6346 30  
     6347 30  
     6348 30  
     6349 20  
     634A 54  
     634B 4F  
     634C 20  
     634D 47  
     634E 52  
     634F 41  
     6350 4D  
0350 6351 A0      ROW+ >01
0351 6352 FF      COL LALIGN
     6353 02  
0352 6354 11      HTEX '6 ARM EXECUTE 0000'
     6355 36  
     6356 20  
     6357 41  
     6358 52  
     6359 4D  
     635A 20  
     635B 45  
     635C 58  
     635D 45  
     635E 43  
     635F 55  
     6360 54  
     6361 45  
     6362 20  
     6363 30  
     6364 30  
     6365 30  
     6366 30  
0353 6367 A0      ROW+ >01
0354 6368 FF      COL LALIGN
     6369 02  
0355 636A 11      HTEX '7 ARM EXECUTE 4000'
     636B 37  
     636C 20  
     636D 41  
     636E 52  
     636F 4D  
     6370 20  
     6371 45  
     6372 58  
     6373 45  
     6374 43  
     6375 55  
     6376 54  
     6377 45  
     6378 20  
     6379 34  
     637A 30  
     637B 30  
     637C 30  
0356 637D A0      ROW+ >01
0357 637E FF      COL LALIGN
     637F 02  
0358 6380 18      HTEX '0 BURN FIRMWARE FROM GRAM'
     6381 30  
     6382 20  
     6383 42  
     6384 55  
     6385 52  
     6386 4E  
     6387 20  
     6388 46  
     6389 49  
     638A 52  
     638B 4D  
     638C 57  
     638D 41  
     638E 52  
     638F 45  
     6390 20  
     6391 46  
     6392 52  
     6393 4F  
     6394 4D  
     6395 20  
     6396 47  
     6397 52  
     6398 41  
     6399 4D  
0359 639A A1      ROW+ >02
0360 639B FF      COL LALIGN
     639C 02  
0361 639D 0A      HTEX 'GROM DUMPER'
     639E 47  
     639F 52  
     63A0 4F  
     63A1 4D  
     63A2 20  
     63A3 44  
     63A4 55  
     63A5 4D  
     63A6 50  
     63A7 45  
     63A8 52  
0362 63A9 FB      FEND
0363          
0364 63AA 31      MOVE EBIN2HEX-BIN2HEX,G@BIN2HEX,@>8300 ; Move assembly code in place
     63AB 00  
     63AC 22
     63AD 00  
     63AE 67  
     63AF 25
0365          
0366          * ; test characters on last line
0367          *     ST  HEXBASECH,@PAD0
0368          *     DST 32*23,@VRAMP          * Beginning of last row
0369          * !   ST  @PAD0,V@0(@VRAMP)
0370          *     DINC @VRAMP
0371          *     INC @PAD0
0372          *     CZ  @PAD0
0373          *     BR  -!
0374          
0375          
0376          ; First test in units of frame count (VDPTIMER)
0377          ; Test runs for 4 frames.
0378          ;   GPL with original HEXOUT: 119 ticks
0379          ;   GPL call to GPL HEXOUT routine issuing XML >F0:  55 ticks
0380          ;   Replace GPL call with XML >F0: 47 ticks
0381          ;   All GPL with new hex characters, no gap between '9' and 'A': 87 ticks
0382          ;     This also handles two characers at a time. But still slow.
0388          
0389          **    B  SKIPBENCH
0390          ; Run benchmark
0391 63B0 BE      ST    4,@XREG               ; Loop counter
     63B1 2C  
     63B2 04  
0392 63B3 BC      ST    @VDPTIMER,@XREG+1     ; Read timer
     63B4 2D  
     63B5 79  
0393 63B6 06  !   CALL  G@DODUMP
     63B7 64  
     63B8 05
0394 63B9 A3      DADD  8,@DUMPA
     63BA 62  
     63BB 00  
     63BC 08
0395 63BD 92      DEC   @XREG
     63BE 2C  
0396 63BF 8E      CZ    @XREG
     63C0 2C  
0397 63C1 43      BR   -!
     63C2 B6  
0398 63C3 BC      ST    @VDPTIMER,@XREG       ; Read timer
     63C4 2C  
     63C5 79  
0399 63C6 A7      DSUB  4*10,@DUMPA
     63C7 62  
     63C8 00  
     63C9 28
0400          ** SKIPBENCH:
0401          
0402          MAKEDUMP:
0403 63CA BD      DST  @YREG,@DUMPA
     63CB 62  
     63CC 2E  
0404 63CD 06      CALL G@DODUMP
     63CE 64  
     63CF 05
0405 63D0 BE      ST    ' ',V@VALIDIND
     63D1 A0  
     63D2 83
     63D3 20  
0406          ; Wait for keypress
0407          KW1:
0408 63D4 03      SCAN
0409 63D5 63      BS    DGOTKEY
     63D6 DD  
0410 63D7 90      INC   V@PATADR
     63D8 AE  
     63D9 F8
0411 63DA 05      B     KW1
     63DB 63  
     63DC D4
0412          DGOTKEY:
0413 63DD BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     63DE A0  
     63DF 82
     63E0 75  
0414 63E1 CE      CGT   'X'-1,@SCANKEY    ; Key >= 'X'
     63E2 75  
     63E3 57  
0415 63E4 64      BS    XYZ               ; Yes: go to XYZ
     63E5 5D  
0416 63E6 CE      CGT   '0'-1,@SCANKEY
     63E7 75  
     63E8 2F  
0417 63E9 43      BR    KW1               ; Key less than zero -> loop
     63EA D4  
0418 63EB CE      CGT   '7',@SCANKEY      ; Key over '7' -> loop
     63EC 75  
     63ED 37  
0419 63EE 63      BS    KW1
     63EF D4  
0420 63F0 A6      SUB   '0',@SCANKEY
     63F1 75  
     63F2 30  
0421 63F3 8A      CASE  @SCANKEY
     63F4 75  
0422 63F5 44      BR    DKEY0
     63F6 E3  
0423 63F7 44      BR    DKEY1
     63F8 C7  
0424 63F9 44      BR    DKEY2
     63FA CE  
0425 63FB 44      BR    DKEY3
     63FC D5  
0426 63FD 45      BR    DKEY4
     63FE 02  
0427 63FF 45      BR    DKEY5
     6400 1E  
0428 6401 45      BR    DKEY6
     6402 3E  
0429 6403 45      BR    DKEY7
     6404 5A  
0430          
0431          DODUMP:
0432 6405 BF      DST   VEROFS+224,@VRAMP
     6406 40  
     6407 01  
     6408 80
0433 6409 86      CLR   @PAD2             ; Row counter
     640A 5E  
0434 640B BE      ST    '*',V@VALIDIND
     640C A0  
     640D 83
     640E 2A  
0435          DUMP2:
0436 640F BE      ST    ' ',V@>FFFF(VRAMP)    ; setup VRAM address in case assembly used
     6410 EF  
     6411 FF
     6412 FF
     6413 40
     6414 20  
0437 6415 BC      ST    @DUMPA,@PAD0      ; Hi byte off address
     6416 5C  
     6417 62  
0001 6418 0F      XML >F0
     6419 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0439 641A A3      DADD  2,@VRAMP
     641B 40  
     641C 00  
     641D 02
0440 641E BC      ST    @DUMPA+1,@PAD0    ; Lo byte off address
     641F 5C  
     6420 63  
0001 6421 0F      XML >F0
     6422 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0442 6423 BE      ST    ':',V@2(@VRAMP)
     6424 E0  
     6425 02
     6426 40
     6427 3A  
0443 6428 A3      DADD  3,@VRAMP
     6429 40  
     642A 00  
     642B 03
0444 642C 86      CLR   @PAD1             ; column counter
     642D 5D  
0445          ; Dump 8 bytes from from 16 bit ptr  DUMPA
0446          DUMP1:
0447 642E 33      MOVE  1,G@0(@DUMPA),@PAD0    ; Read from GROM pointed to by DUMPA
     642F 00  
     6430 01
     6431 5C  
     6432 00  
     6433 00
     6434 62
0001 6435 0F      XML >F0
     6436 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0449 6437 BE      ST    ' ',V@2(@VRAMP)
     6438 E0  
     6439 02
     643A 40
     643B 20  
0450 643C A3      DADD  3,@VRAMP
     643D 40  
     643E 00  
     643F 03
0451 6440 91      DINC  @DUMPA
     6441 62  
0452 6442 90      INC   @PAD1
     6443 5D  
0453 6444 D6      CEQ   8,@PAD1           ; 8 columns - are we done?
     6445 5D  
     6446 08  
0454 6447 44      BR    DUMP1             ; No: jump to dump1
     6448 2E  
0455          ; Advance VRAM pointer, we add and mask to bring pointer to beginning
0456          ; of next line.
0457 6449 A3      DADD  >1F,@VRAMP
     644A 40  
     644B 00  
     644C 1F
0458 644D B3      DAND  >0FE0,@VRAMP
     644E 40  
     644F 0F  
     6450 E0
0459 6451 90      INC   @PAD2             ; inc Row
     6452 5E  
0460 6453 D6      CEQ   8,@PAD2           ; Done with 8 rows?
     6454 5E  
     6455 08  
0461 6456 44      BR    DUMP2             ; No: jump to dump2
     6457 0F  
0462 6458 A7      DSUB  8*8,@DUMPA           ; Undo the incs in the loop above
     6459 62  
     645A 00  
     645B 40
0463 645C 00      RTN
0464          
0465          ; Check if we have button X Y Z pressed
0466          XYZ:
0467 645D CE      CGT   'Z',@SCANKEY    ; Above Z?
     645E 75  
     645F 5A  
0468 6460 63      BS    KW1             ; Yes: KW1
     6461 D4  
0469          ; Ok now we need to ask the user for a value and store it to X, Y or Z register.
0470          ; Show the current value of the variable after character code
0471 6462 BF      DST   VEROFS-29,@VRAMP ; Location in VRAM
     6463 40  
     6464 00  
     6465 83
0472 6466 BC      ST    @SCANKEY,@PAD3
     6467 5F  
     6468 75  
0473 6469 A6      SUB   'X',@PAD3       ; Now pad is 0,1,2 for X,Y,Z
     646A 5F  
     646B 58  
0474 646C E2      SLL   1,@PAD3         ; Multiply by 2
     646D 5F  
     646E 01  
0475 646F 86      CLR   @PAD2           ; clear high byte
     6470 5E  
0476 6471 A3      DADD  XREG,@PAD2       ; Add address of XREG, now PAD1:PAD2 is a pointer to value
     6472 5E  
     6473 83  
     6474 2C
0477          
0478 6475 BC      ST    @0(@PAD2),@PAD0  ; Hi byte of reg
     6476 5C  
     6477 CF  
     6478 7D
     6479 00
     647A 5E
0001 647B 0F      XML >F0
     647C F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0480 647D A3      DADD  2,@VRAMP
     647E 40  
     647F 00  
     6480 02
0481 6481 BC      ST    @1(@PAD2),@PAD0  ; Lo byte of reg
     6482 5C  
     6483 CF  
     6484 7D
     6485 01
     6486 5E
0001 6487 0F      XML >F0
     6488 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0483 6489 A7      DSUB  2,@VRAMP          ; Point to beginning of hex digits
     648A 40  
     648B 00  
     648C 02
0484 648D BE      ST    4,@PAD4           ; 4 digits to edit, VRAMP points to them
     648E 60  
     648F 04  
0485 6490 06      CALL  EDITHEX           ; go and edit them
     6491 65  
     6492 60
0486          ; YREG is used as dump addres. If it changed, refresh screen.
0487 6493 D5      DCEQ  @YREG,@DUMPA
     6494 62  
     6495 2E  
0488 6496 43      BR    MAKEDUMP
     6497 CA  
0489 6498 05      B     G@KW1
     6499 63  
     649A D4
0490          
0491          
0492          
0493          ASKCONFIRM:
0494          ; Ask for confirmation. Clear a few rows to clarify
0495 649B BE      ST   ' ',V@VEROFS
     649C A0  
     649D A0
     649E 20  
0496 649F 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64A0 02  
     64A1 5F
     64A2 A0  
     64A3 A1
     64A4 A0  
     64A5 A0
0497 64A6 08      FMT
0498 64A7 FF      COL LALIGN
     64A8 02  
0499 64A9 FE      ROW LAYOUTVER
     64AA 05  
0500 64AB 15      HTEX '!!PRESS 1 TO CONFIRM!!'
     64AC 21  
     64AD 21  
     64AE 50  
     64AF 52  
     64B0 45  
     64B1 53  
     64B2 53  
     64B3 20  
     64B4 31  
     64B5 20  
     64B6 54  
     64B7 4F  
     64B8 20  
     64B9 43  
     64BA 4F  
     64BB 4E  
     64BC 46  
     64BD 49  
     64BE 52  
     64BF 4D  
     64C0 21  
     64C1 21  
0501 64C2 FB      FEND
0502          WAIT0:
0503 64C3 03      SCAN
0504 64C4 44      BR    WAIT0
     64C5 C3  
0505 64C6 00      RTN
0506          
0507          DKEY1:
0508 64C7 A7      DSUB  64,@YREG
     64C8 2E  
     64C9 00  
     64CA 40
0509 64CB 05      B     MAKEDUMP
     64CC 63  
     64CD CA
0510          DKEY2:
0511 64CE A3      DADD  64,@YREG
     64CF 2E  
     64D0 00  
     64D1 40
0512 64D2 05      B     MAKEDUMP
     64D3 63  
     64D4 CA
0513          DKEY3:
0514 64D5 BE      ST   ' ',V@VEROFS
     64D6 A0  
     64D7 A0
     64D8 20  
0515 64D9 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64DA 02  
     64DB 5F
     64DC A0  
     64DD A1
     64DE A0  
     64DF A0
0516 64E0 05      B     SCREEN1
     64E1 60  
     64E2 A3
0517          DKEY0:      ; Burn to Flash
0518 64E3 06      CALL  G@ASKCONFIRM
     64E4 64  
     64E5 9B
0519 64E6 D6      CEQ   '1',@SCANKEY       is the key one?
     64E7 75  
     64E8 31  
0520 64E9 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     64EA EE  
0521          ; Yes, continue to Flash the MCU
0522 64EB 04      BACK  >F3              screen colors: white on some other color
     64EC F3  
0523 64ED BE      ST    'F',V@VALIDIND    ; Command valid indicator
     64EE A0  
     64EF 83
     64F0 46  
0524 64F1 BE      ST    6,@GCMDBYTE
     64F2 40  
     64F3 06  
0525 64F4 BF      DST   >1234,@GCMDBYTE+2
     64F5 42  
     64F6 12  
     64F7 34
0526 64F8 87      DCLR  @GCMDBYTE+4
     64F9 44  
0527 64FA 87      DCLR  @GCMDBYTE+6
     64FB 46  
0528 64FC 06      CALL  ISSUECMD
     64FD 62  
     64FE A6
0529          ; We probably do not return from this call... GROMMY might be in a funny state
0530 64FF 05      B     G@MAKEDUMP
     6500 63  
     6501 CA
0531          
0532          DKEY4:      ; Command to fill GRAM with >FF, all 24K
0533 6502 BF      DST   >FFFF,@PAD2   ; Fill value, 2 bytes
     6503 5E  
     6504 FF  
     6505 FF
0534 6506 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6507 A0  
     6508 83
     6509 2A  
0535 650A 25      MOVE  >1,@PAD2,G@>0
     650B 00  
     650C 01
     650D 00  
     650E 00
     650F 5E  
0536 6510 21      MOVE  >5FFF,G@>0,G@>1
     6511 5F  
     6512 FF
     6513 00  
     6514 01
     6515 00  
     6516 00
0537 6517 BE      ST    ' ',V@VALIDIND    ; Command valid indicator
     6518 A0  
     6519 83
     651A 20  
0538 651B 05      B     MAKEDUMP
     651C 63  
     651D CA
0539          
0540          DKEY5:
0541 651E BE      ST    '*',V@VALIDIND    ; Command valid indicator
     651F A0  
     6520 83
     6521 2A  
0542 6522 21      MOVE >2000,G@>8000,G@>0000
     6523 20  
     6524 00
     6525 00  
     6526 00
     6527 80  
     6528 00
0543 6529 21      MOVE >2000,G@>A000,G@>2000
     652A 20  
     652B 00
     652C 20  
     652D 00
     652E A0  
     652F 00
0544 6530 21      MOVE >2000,G@>C000,G@>4000
     6531 20  
     6532 00
     6533 40  
     6534 00
     6535 C0  
     6536 00
0545 6537 BE      ST    ' ',V@VALIDIND    ; Command valid indicator
     6538 A0  
     6539 83
     653A 20  
0546 653B 05      B     MAKEDUMP
     653C 63  
     653D CA
0547          
0548          DKEY6:      ; ARM execute 0000
0549 653E BF      DST   >0100,@GCMDBYTE+2   ; thumb bit high
     653F 42  
     6540 01  
     6541 00
0550          DKEY6ASK:
0551 6542 06      CALL  G@ASKCONFIRM
     6543 64  
     6544 9B
0552 6545 D6      CEQ   '1',@SCANKEY       is the key one?
     6546 75  
     6547 31  
0553 6548 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     6549 EE  
0554 654A BE      ST    'F',V@VALIDIND    ; Command valid indicator
     654B A0  
     654C 83
     654D 46  
0555 654E BE      ST    7,@GCMDBYTE
     654F 40  
     6550 07  
0556 6551 87      DCLR  @GCMDBYTE+4
     6552 44  
0557 6553 87      DCLR  @GCMDBYTE+6
     6554 46  
0558 6555 06      CALL  ISSUECMD
     6556 62  
     6557 A6
0559          ; We probably do not return from this call... GROMMY might be in a funny state
0560 6558 43      BR    MAKEDUMP
     6559 CA  
0561          
0562          DKEY7:
0563 655A BF      DST   >0140,@GCMDBYTE+2  ; ARM has different byte order
     655B 42  
     655C 01  
     655D 40
0564 655E 45      BR    DKEY6ASK
     655F 42  
0565          
0566          *----------------------------------------
0567          * Edit HEX
0568          * Number already dsiplayed with E0..EF or F0..FF.
0569          * Parameters:
0570          *   VRAMP points to the screen area.
0571          *   PAD2:PAD3 points to the value.
0572          *   PAD4 number of digits to edit. Must be even.
0573          *----------------------------------------
0574          EDITHEX:
0575 6560 86      CLR  @INDEX   ; current digit index
     6561 61  
0576          EWAIT:
0577 6562 03      SCAN
0578 6563 65      BS   EGOTKEY
     6564 81  
0579          ; No key. Flash the cursor pointed at VRAMP by copying bit 4 of frame counter
0580          ; to the character code.
0581 6565 BC      ST   @VDPTIMER,@PAD0
     6566 5C  
     6567 79  
0582 6568 B2      AND  >10,@PAD0
     6569 5C  
     656A 10  
0583 656B BC      ST   V@0(@VRAMP),@PAD1
     656C 5D  
     656D E0  
     656E 00
     656F 40
0584 6570 B2      AND  >EF,@PAD1
     6571 5D  
     6572 EF  
0585 6573 B4      OR   @PAD1,@PAD0
     6574 5C  
     6575 5D  
0586 6576 BC      ST  @PAD0,V@0(@VRAMP)
     6577 E0  
     6578 00
     6579 40
     657A 5C  
0587 657B 90      INC   V@PATADR
     657C AE  
     657D F8
0588 657E 05      B    EWAIT
     657F 65  
     6580 62
0589          
0590          EGOTKEY:    ; We received a key. If it is '0' - '9' or 'A'-'F' it is a hex digit, thus edit.
0591 6581 CE      CGT   '0'-1,@SCANKEY       ; greater than >= 0
     6582 75  
     6583 2F  
0592 6584 45      BR    ENODIGIT             ; No -> ENODIGIT
     6585 C0  
0593 6586 CE      CGT   '9',@SCANKEY         ; Key greater than '9'?
     6587 75  
     6588 39  
0594 6589 65      BS    CHECKAF
     658A B0  
0595 658B A6      SUB   '0',@SCANKEY         ; Here we have '0'-'9' make it 0-9
     658C 75  
     658D 30  
0596          GOTDIGIT:
0597 658E A2      ADD   HEXBASECH,@SCANKEY
     658F 75  
     6590 E0  
0598 6591 BC      ST    @SCANKEY,V@0(@VRAMP)  ; Store digit into VRAM.
     6592 E0  
     6593 00
     6594 40
     6595 75  
0599 6596 91      DINC  @VRAMP
     6597 40  
0600 6598 90      INC   @INDEX
     6599 61  
0601 659A D4      CEQ   @INDEX,@PAD4          ; Index=number of digitss?
     659B 60  
     659C 61  
0602 659D 45      BR    EWAIT                 ; No: get back to waiting next key
     659E 62  
0603 659F 06      CALL  BACK2BEGIN
     65A0 65  
     65A1 A5
0604 65A2 05      B     EWAIT                 ; Wait for next keypress
     65A3 65  
     65A4 62
0605          
0606          BACK2BEGIN:
0607 65A5 B2      AND   >EF,V@0(VRAMP)        ; Yes: make sure no cursor show here.
     65A6 E0  
     65A7 00
     65A8 40
     65A9 EF  
0608 65AA A4      SUB   @INDEX,@VRAMP+1       ; Yes: Reset VRAMP back to beginning of number (BUGBUG: carry not handled!)
     65AB 41  
     65AC 61  
0609 65AD 86      CLR   @INDEX                ; Reset index
     65AE 61  
0610 65AF 00      RTN
0611          
0612          CHECKAF:                        ; Check if we have 'A'..'F'
0613 65B0 CE      CGT   'A'-1,@SCANKEY        ; >= 'A' ?
     65B1 75  
     65B2 40  
0614 65B3 45      BR    ENODIGIT              ; no: -> ENODIGIT
     65B4 C0  
0615 65B5 CE      CGT   'F',@SCANKEY          ; >= 'F' ?
     65B6 75  
     65B7 46  
0616 65B8 65      BS    ENODIGIT              ; Yes: -> ENODIGIT
     65B9 C0  
0617 65BA A6      SUB   'A'-10,@SCANKEY       ; Make 'A' into 10
     65BB 75  
     65BC 37  
0618 65BD 05      B     GOTDIGIT              ; Display etc.
     65BE 65  
     65BF 8E
0619          
0620          ENODIGIT:                       ; Here we do not have digit 0-9, A-F
0621 65C0 D6      CEQ    13,@SCANKEY          ; Is it enter?
     65C1 75  
     65C2 0D  
0622 65C3 45      BR     EWAIT                ; No: get next key
     65C4 62  
0623          ; Here we have the digits in VRAM. Decode the number.
0624 65C5 06      CALL   BACK2BEGIN           ; Reset VRAMP to beginning of number
     65C6 65  
     65C7 A5
0625 65C8 BC  !   ST     V@0(@VRAMP),@PAD0    ; Get first digit
     65C9 5C  
     65CA E0  
     65CB 00
     65CC 40
0626 65CD B2      AND    >0F,@PAD0            ; Low 4 bits are the hex digit
     65CE 5C  
     65CF 0F  
0627 65D0 E2      SLL    4,@PAD0
     65D1 5C  
     65D2 04  
0628 65D3 BC      ST     V@1(VRAMP),@PAD1     ; Get second digit
     65D4 5D  
     65D5 E0  
     65D6 01
     65D7 40
0629 65D8 B2      AND    >0F,@PAD1
     65D9 5D  
     65DA 0F  
0630 65DB B4      OR     @PAD1,@PAD0          ; Now PAD0 has the byte.
     65DC 5C  
     65DD 5D  
0631 65DE BC      ST     @PAD0,@0(@PAD2)      ; Store byte
     65DF CF  
     65E0 7D
     65E1 00
     65E2 5E
     65E3 5C  
0632 65E4 94      INCT   @INDEX
     65E5 61  
0633 65E6 91      DINC   @PAD2
     65E7 5E  
0634 65E8 95      DINCT  @VRAMP
     65E9 40  
0635 65EA D4      CEQ    @INDEX,@PAD4         ; Are we at the end, INDEX==COUNT?
     65EB 60  
     65EC 61  
0636 65ED 45      BR     -!                   ; No, continue
     65EE C8  
0637 65EF A4      SUB    @INDEX,@PAD3         ; Reset PAD2:PAD3 pointer (BUGBUG no carry)
     65F0 5F  
     65F1 61  
0638 65F2 06      CALL   BACK2BEGIN           ; Reset VRAMP
     65F3 65  
     65F4 A5
0639 65F5 00      RTN                         ; Done
0640          
0641          
0642          *----------------------------------------
0643          * Display in HEX the byte in PAD0
0644          *----------------------------------------
0645          HEXOUT:
0646 65F6 0F    XML >F0       ; Jump via >8300
     65F7 F0  
0647 65F8 00    RTN
0648          
0649          HEXOUT1:
0650 65F9 BC      ST   @PAD0,@PAD4
     65FA 60  
     65FB 5C  
0651 65FC E6      SRL   >04,@PAD4       isolate first nibble
     65FD 60  
     65FE 04  
0652 65FF CE      CGT   >09,@PAD4       greater than 9?
     6600 60  
     6601 09  
0653 6602 66      BS    HEX1            yes
     6603 09  
0654 6604 A2      ADD   >30,@PAD4       no: make it char 0-9
     6605 60  
     6606 30  
0655 6607 46      BR    HEX2
     6608 0C  
0656 6609 A2  HEX1: ADD   >37,@PAD4      yes: make it char A-F
     660A 60  
     660B 37  
0657          HEX2:
0658          ; Output first hex digit (most significant digit)
0659 660C BC      ST    @PAD4,V@0(@VRAMP)
     660D E0  
     660E 00
     660F 40
     6610 60  
0660          ; Work on 2nd digit
0661 6611 BC      ST    @PAD0,@PAD4     copy number
     6612 60  
     6613 5C  
0662 6614 B2      AND   >0F,@PAD4       isolate second nibble
     6615 60  
     6616 0F  
0663 6617 CE      CGT   >09,@PAD4       greater than 9?
     6618 60  
     6619 09  
0664 661A 66      BS    HEX3          yes
     661B 21  
0665 661C A2      ADD   >30,@PAD4       no: make it char 0-9
     661D 60  
     661E 30  
0666 661F 46      BR    HEX4
     6620 24  
0667 6621 A2  HEX3  ADD   >37,@PAD4       yes: make it char A-F
     6622 60  
     6623 37  
0668          HEX4:
0669          ; Output 2nd hex digit (least significant digit)
0670 6624 BC      ST    @PAD4,V@1(@VRAMP)
     6625 E0  
     6626 01
     6627 40
     6628 60  
0671 6629 00      RTN
0672          
0673          * Use the new hex characters which do not have a gap between 9 and A
0674          HEXOUT2:
0675 662A BC      ST   @PAD0,@PAD4
     662B 60  
     662C 5C  
0676 662D BC      ST   @PAD0,@PAD5
     662E 61  
     662F 5C  
0677 6630 E6      SRL  >04,@PAD4       isolate first nibble
     6631 60  
     6632 04  
0678 6633 B2      AND  >0F,@PAD5
     6634 61  
     6635 0F  
0679          TWINHEXBC EQU   (HEXBASECH * 256) + HEXBASECH
0680 6636 A3      DADD TWINHEXBC,@PAD4
     6637 60  
     6638 E0  
     6639 E0
0681 663A BD      DST  @PAD4,V@0(VRAMP)
     663B E0  
     663C 00
     663D 40
     663E 60  
0682 663F 01      RTNC
0683          
0684          *----------------------------------------
0685          * Read grommy2 version, update on screen.
0686          * Also read and set bank & shadow values.
0687          *----------------------------------------
0688          SHOW_VERSION
0689 6640 06      CALL G@GINITCMD
     6641 66  
     6642 A5
0690 6643 06      CALL G@GSENDCMD
     6644 66  
     6645 AC
0691          * Check result of command - did we get OK?
0692 6646 31      MOVE 2,G@HWIF,@PAD0
     6647 00  
     6648 02
     6649 5C  
     664A 5F  
     664B F0
0693 664C D7      DCEQ >4F4B,@PAD0        ; did we get OK?
     664D 5C  
     664E 4F  
     664F 4B
0694 6650 66      BS   VER_OK             ; Yes: go to VER_OK
     6651 5D  
0695          ** No grommy2 detected. Put in dummy data.
0696 6652 87      DCLR @PAD2              ; Major and minor zero
     6653 5E  
0697 6654 BE      ST   99,@PAD4           ; Build 99
     6655 60  
     6656 63  
0698 6657 86      CLR  @SHADOW
     6658 51  
0699 6659 86      CLR  @BANK
     665A 50  
0700 665B 46      BR   VER1
     665C 7A  
0701          VER_OK:     ; grommy responded, read data
0702          * Copy values from GROM IF to pad
0703 665D 31      MOVE 3,G@HWIF+8,@PAD2
     665E 00  
     665F 03
     6660 5E  
     6661 5F  
     6662 F8
0704          * Get active bank from grommy2
0705 6663 31      MOVE 1,G@HWIF+3,@BANK
     6664 00  
     6665 01
     6666 50  
     6667 5F  
     6668 F3
0706 6669 B2      AND  >0F,@BANK
     666A 50  
     666B 0F  
0707 666C D6      CEQ  8,@BANK            ; Is GRAM bank 8 selected?
     666D 50  
     666E 08  
0708 666F 46      BR   NOGRAM1            ; No, we're good
     6670 74  
0709 6671 BE      ST   3,@BANK            ; yes, convert to 3 here
     6672 50  
     6673 03  
0710          NOGRAM1:
0711          * Get RAM shadow from grommy2
0712 6674 31      MOVE 1,G@HWIF+4,@SHADOW
     6675 00  
     6676 01
     6677 51  
     6678 5F  
     6679 F4
0713          VER1:
0714          * Show major version in p2
0715 667A BE      ST  '0',@PAD0
     667B 5C  
     667C 30  
0716 667D A0      ADD @PAD2,@PAD0
     667E 5C  
     667F 5E  
0717 6680 BC      ST  @PAD0,V@VEROFS+>A        Write to VRAM
     6681 A0  
     6682 AA
     6683 5C  
0718          * Show minor version in p3
0719 6684 BE      ST  '0',@PAD0
     6685 5C  
     6686 30  
0720 6687 A0      ADD @PAD3,@PAD0
     6688 5C  
     6689 5F  
0721 668A BC      ST  @PAD0,V@VEROFS+>C        Write to VRAM
     668B A0  
     668C AC
     668D 5C  
0722          * Show build version in p4. The build is two digits from 0 to 99
0723 668E 86      CLR  @PAD0              Zero fill as the value to divide is 16 bits§
     668F 5C  
0724 6690 BC      ST   @PAD4,@PAD1
     6691 5D  
     6692 60  
0725 6693 AE      DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
     6694 5C  
     6695 0A  
0726 6696 A2      ADD  '0',@PAD0
     6697 5C  
     6698 30  
0727 6699 BC      ST   @PAD0,V@VEROFS+>E      Write to VRAM
     669A A0  
     669B AE
     669C 5C  
0728 669D A2      ADD  '0',@PAD1          Remainder
     669E 5D  
     669F 30  
0729 66A0 BC      ST   @PAD1,V@VEROFS+>F      Write to VRAM
     66A1 A0  
     66A2 AF
     66A3 5D  
0730 66A4 00      RTN
0731          
0732          
0733          *----------------------------------------
0734          * Init command buffer in pad
0735          *----------------------------------------
0736          GINITCMD
0737 66A5 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
     66A6 00  
     66A7 10
     66A8 40  
     66A9 66  
     66AA B9
0738 66AB 00         RTN
0739          
0740          *----------------------------------------
0741          * Send command to grommy2
0742          *----------------------------------------
0743          GSENDCMD
0744 66AC BC         ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
     66AD 41  
     66AE 40  
0745 66AF BA         XOR   >FF,@GCMDBYTE+1
     66B0 41  
     66B1 FF  
0746 66B2 25         MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
     66B3 00  
     66B4 10
     66B5 5F  
     66B6 F0
     66B7 40  
0747 66B8 00         RTN
0748          
0749          
0750          GROMMY_DAT
0751 66B9 00         DATA   >00FF,>003F,>0000,>0000
     66BA FF
     66BB 00  
     66BC 3F
     66BD 00  
     66BE 00
     66BF 00  
     66C0 00
0752 66C1 45         TEXT 'EPGROMMY'
     66C2 50  
     66C3 47  
     66C4 52  
     66C5 4F  
     66C6 4D  
     66C7 4D  
     66C8 59  
0753          
0754          
0755          DENSE_FONT ; Define character cells wihtin 4x8 cell
0756          ; Numnbers 0 and 1
0757 66C9 22          BYTE >22
0758 66CA 56          BYTE >56
0759 66CB 52          BYTE >52
0760 66CC 52          BYTE >52
0761 66CD 52          BYTE >52
0762 66CE 52          BYTE >52
0763 66CF 27          BYTE >27
0764 66D0 00          BYTE >00
0765          ; Define a cell with 2 and 3
0766 66D1 26          BYTE >26
0767 66D2 51          BYTE >51
0768 66D3 11          BYTE >11
0769 66D4 26          BYTE >26
0770 66D5 41          BYTE >41
0771 66D6 41          BYTE >41
0772 66D7 76          BYTE >76
0773 66D8 00          BYTE >00
0774          ; Define a cell with 4 and 5
0775 66D9 17          BYTE >17
0776 66DA 34          BYTE >34
0777 66DB 54          BYTE >54
0778 66DC 76          BYTE >76
0779 66DD 11          BYTE >11
0780 66DE 11          BYTE >11
0781 66DF 16          BYTE >16
0782 66E0 00          BYTE >00
0783          ; Define a cell with 6 and 7
0784 66E1 37          BYTE >37
0785 66E2 41          BYTE >41
0786 66E3 62          BYTE >62
0787 66E4 52          BYTE >52
0788 66E5 52          BYTE >52
0789 66E6 52          BYTE >52
0790 66E7 22          BYTE >22
0791 66E8 00          BYTE >00
0792          ; Define a cell with 8 and 9
0793 66E9 22          BYTE >22
0794 66EA 55          BYTE >55
0795 66EB 55          BYTE >55
0796 66EC 23          BYTE >23
0797 66ED 51          BYTE >51
0798 66EE 51          BYTE >51
0799 66EF 26          BYTE >26
0800 66F0 00          BYTE >00
0801          ; Define a cell with A and B
0802 66F1 26          BYTE >26
0803 66F2 55          BYTE >55
0804 66F3 55          BYTE >55
0805 66F4 76          BYTE >76
0806 66F5 55          BYTE >55
0807 66F6 55          BYTE >55
0808 66F7 56          BYTE >56
0809 66F8 00          BYTE >00
0810          ; Define a cell with C and D
0811 66F9 36          BYTE >36
0812 66FA 45          BYTE >45
0813 66FB 45          BYTE >45
0814 66FC 45          BYTE >45
0815 66FD 45          BYTE >45
0816 66FE 45          BYTE >45
0817 66FF 36          BYTE >36
0818 6700 00          BYTE >00
0819          ; Define a cell with E and F
0820 6701 77          BYTE >77
0821 6702 44          BYTE >44
0822 6703 44          BYTE >44
0823 6704 66          BYTE >66
0824 6705 44          BYTE >44
0825 6706 44          BYTE >44
0826 6707 74          BYTE >74
0827 6708 00          BYTE >00
0828          
0829          * Test code copied from Mini Memory
0830 6709 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
     670A 00  
     670B 10
     670C 40  
     670D 66  
     670E B9
0831 670F BC         ST    @>839A,@>8340                Copy command byte
     6710 40  
     6711 80  
     6712 9A
0832 6713 BC         ST    @>839A,@>8341                The second byte is its complement
     6714 41  
     6715 80  
     6716 9A
0833 6717 BA         XOR   >FF,@>8341
     6718 41  
     6719 FF  
0834 671A BC         ST    @>839B,@>8342                Copy p2.
     671B 42  
     671C 80  
     671D 9B
0835 671E 25         MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
     671F 00  
     6720 10
     6721 5F  
     6722 F0
     6723 40  
0836 6724 00         RTN
0837          
0838          * BIN2HEX assembly routine. Compiled to run from 8302.
0839          * First item is a vector, so this is good for XML >F0.
0840          BIN2HEX:
0841 6725 83      DATA >8302
     6726 02
0842 6727 D0      DATA >D060, >835C
     6728 60
     6729 83  
     672A 5C
0843 672B 09      DATA >0941
     672C 41
0844 672D 02      DATA >0221, >E000
     672E 21
     672F E0  
     6730 00
0845 6731 DB      DATA >DBC1, >FFFE
     6732 C1
     6733 FF  
     6734 FE
0846 6735 D0      DATA >D060, >835C
     6736 60
     6737 83  
     6738 5C
0847 6739 02      DATA >0241, >0F00
     673A 41
     673B 0F  
     673C 00
0848 673D 02      DATA >0221, >E000
     673E 21
     673F E0  
     6740 00
0849 6741 DB      DATA >DBC1, >FFFE
     6742 C1
     6743 FF  
     6744 FE
0850 6745 04      DATA >045B
     6746 5B
0851 6747 00  EBIN2HEX DATA >000 ; dummy
     6748 00
0852          
0853          * 0010 8302 D060  34   MOVB @PAD0,R1
0854          *      8304 835C
0855          * 0011 8306 0941  56   SRL  R1,4
0856          * 0012 8308 0221  22   AI   R1,256*HEXBASECH
0857          *      830A E000
0858          * 0013 830C DBC1  38   MOVB  R1,@>FFFE(R15)  write byte to VDP
0859          *      830E FFFE
0860          * 0014 8310 D060  34   MOVB @PAD0,R1
0861          *      8312 835C
0862          * 0015 8314 0241  22   ANDI R1,>0F00
0863          *      8316 0F00
0864          * 0016 8318 0221  22   AI   R1,256*HEXBASECH
0865          *      831A E000
0866          * 0017 831C DBC1  38   MOVB  R1,@>FFFE(R15)  write byte to VDP
0867          *      831E FFFE
0868          * 0018 8320 045B  20   RT
0869          
0870          
0871          
0872          
0873          * Old version
0874          *  DATA >8302    * Vector to 8302
0875          *  DATA >C08B, >D060, >835C, >0941, >06A0
0876          *  DATA >8318   * BL destination address
0877          *  DATA >D060, >835C, >0241, >0F00, >C2C2
0878          *  DATA >0221, >3000, >0281, >3A00, >1A02
0879          *  DATA >0221, >0700, >DBC1, >FFFE, >045B
0880          * 0005 0000 C08B  18   MOV R11,R2
0881          * 0006 0002 D060  34   MOVB @PAD0,R1
0882          *      0004 835C
0883          * 0007 0006 0941  56   SRL  R1,4
0884          * 0008 0008 06A0  32   BL   @!
0885          *      000A 8318
0886          * 0009 000C D060  34   MOVB @PAD0,R1
0887          *      000E 835C
0888          * 0010 0010 0241  22   ANDI R1,>0F00
0889          *      0012 0F00
0890          * 0011 0014 C2C2  18   MOV R2,R11
0891          * 0012               !:
0892          * 0013 0016 0221  22   AI   R1,'0'*256
0893          *      0018 3000
0894          * 0014 001A 0281  22   CI   R1,('9'+1)*>100
0895          *      001C 3A00
0896          * 0015 001E 1A02  14   JL   !
0897          * 0016 0020 0221  22   AI   R1,>700
0898          *      0022 0700
0899          * 0017               !
0900          * 0018 0024 DBC1  38   MOVB  R1,@>FFFE(R15)  write byte to VDP
0901          *      0026 FFFE
0902          * 0019 0028 045B  20   RT
0903          
0904          
0905          *----------------------------------------
0906          * VDP setup for module
0907          *----------------------------------------
0908          GVDPSETUP
0909 6749 BE      ST    >D0,V@>0300      no sprites
     674A A3  
     674B 00
     674C D0  
0910 674D BE      ST    >F5,V@>0380      init color table as white on blue for all chars
     674E A3  
     674F 80
     6750 F5  
0911 6751 35      MOVE  >001F,V@>0380,V@>0381
     6752 00  
     6753 1F
     6754 A3  
     6755 81
     6756 A3  
     6757 80
0912 6758 07      ALL   >20              erase screen
     6759 20  
0913 675A 04      BACK  >F5              screen colors: white on light blue
     675B F5  
0914 675C 00      RTN
0915          
0916              COPY 'screen.gpl'
              > screen.gpl
0001          * Character definitions
0002 675D 00  GUDG96	BYTE >00,>00,>00,>00,>00,>00,>00,>00 ; Character 96
     675E 00  
     675F 00  
     6760 00  
     6761 00  
     6762 00  
     6763 00  
     6764 00  
0003 6765 00  GUDG97	BYTE >00,>00,>70,>43,>72,>42,>42,>72 ; Character 97
     6766 00  
     6767 70  
     6768 43  
     6769 72  
     676A 42  
     676B 42  
     676C 72  
0004 676D 00  GUDG98	BYTE >00,>28,>08,>A9,>2A,>2E,>2B,>29 ; Character 98
     676E 28  
     676F 08  
     6770 A9  
     6771 2A  
     6772 2E  
     6773 2B  
     6774 29  
0005 6775 00  GUDG99	BYTE >00,>00,>0F,>09,>09,>0E,>08,>08 ; Character 99
     6776 00  
     6777 0F  
     6778 09  
     6779 09  
     677A 0E  
     677B 08  
     677C 08  
0006 677D 00  GUDG100	BYTE >00,>40,>00,>46,>49,>4F,>48,>46 ; Character 100
     677E 40  
     677F 00  
     6780 46  
     6781 49  
     6782 4F  
     6783 48  
     6784 46  
0007 6785 00  GUDG101	BYTE >00,>41,>41,>79,>49,>49,>49,>49 ; Character 101
     6786 41  
     6787 41  
     6788 79  
     6789 49  
     678A 49  
     678B 49  
     678C 49  
0008 678D 00  GUDG102	BYTE >00,>40,>40,>1C,>10,>0C,>06,>1C ; Character 102
     678E 40  
     678F 40  
     6790 1C  
     6791 10  
     6792 0C  
     6793 06  
     6794 1C  
0009 6795 00  GUDG103	BYTE >00,>00,>00,>00,>00,>00,>1C,>3F ; Character 103
     6796 00  
     6797 00  
     6798 00  
     6799 00  
     679A 00  
     679B 1C  
     679C 3F  
0010 679D 00  GUDG104	BYTE >00,>00,>00,>00,>00,>00,>00,>3F ; Character 104
     679E 00  
     679F 00  
     67A0 00  
     67A1 00  
     67A2 00  
     67A3 00  
     67A4 3F  
0011 67A5 00  GUDG105	BYTE >00,>00,>00,>00,>00,>00,>00,>9C ; Character 105
     67A6 00  
     67A7 00  
     67A8 00  
     67A9 00  
     67AA 00  
     67AB 00  
     67AC 9C  
0012 67AD 00  GUDG106	BYTE >00,>00,>00,>00,>00,>00,>07,>3F ; Character 106
     67AE 00  
     67AF 00  
     67B0 00  
     67B1 00  
     67B2 00  
     67B3 07  
     67B4 3F  
0013 67B5 00  GUDG107	BYTE >00,>00,>00,>00,>00,>00,>00,>F0 ; Character 107
     67B6 00  
     67B7 00  
     67B8 00  
     67B9 00  
     67BA 00  
     67BB 00  
     67BC F0  
0014 67BD 00  GUDG108	BYTE >00,>00,>00,>00,>00,>00,>06,>9F ; Character 108
     67BE 00  
     67BF 00  
     67C0 00  
     67C1 00  
     67C2 00  
     67C3 06  
     67C4 9F  
0015 67C5 00  GUDG109	BYTE >00,>00,>00,>00,>00,>00,>03,>8F ; Character 109
     67C6 00  
     67C7 00  
     67C8 00  
     67C9 00  
     67CA 00  
     67CB 03  
     67CC 8F  
0016 67CD 00  GUDG110	BYTE >00,>00,>00,>00,>00,>00,>00,>C7 ; Character 110
     67CE 00  
     67CF 00  
     67D0 00  
     67D1 00  
     67D2 00  
     67D3 00  
     67D4 C7  
0017 67D5 00  GUDG111	BYTE >00,>00,>00,>00,>00,>00,>00,>F3 ; Character 111
     67D6 00  
     67D7 00  
     67D8 00  
     67D9 00  
     67DA 00  
     67DB 00  
     67DC F3  
0018 67DD 00  GUDG112	BYTE >00,>00,>00,>00,>00,>00,>C0,>F1 ; Character 112
     67DE 00  
     67DF 00  
     67E0 00  
     67E1 00  
     67E2 00  
     67E3 C0  
     67E4 F1  
0019 67E5 00  GUDG113	BYTE >00,>00,>00,>00,>00,>00,>60,>F8 ; Character 113
     67E6 00  
     67E7 00  
     67E8 00  
     67E9 00  
     67EA 00  
     67EB 60  
     67EC F8  
0020 67ED 00  GUDG114	BYTE >00,>00,>00,>00,>00,>00,>00,>FC ; Character 114
     67EE 00  
     67EF 00  
     67F0 00  
     67F1 00  
     67F2 00  
     67F3 00  
     67F4 FC  
0021 67F5 00  GUDG115	BYTE >00,>03,>0F,>1F,>3F,>3F,>7F,>7E ; Character 115
     67F6 03  
     67F7 0F  
     67F8 1F  
     67F9 3F  
     67FA 3F  
     67FB 7F  
     67FC 7E  
0022 67FD 00  GUDG116	BYTE >00,>F0,>FC,>FE,>FF,>FF,>3F,>3F ; Character 116
     67FE F0  
     67FF FC  
     6800 FE  
     6801 FF  
     6802 FF  
     6803 3F  
     6804 3F  
0023 6805 00  GUDG117	BYTE >00,>00,>00,>00,>00,>80,>80,>80 ; Character 117
     6806 00  
     6807 00  
     6808 00  
     6809 00  
     680A 80  
     680B 80  
     680C 80  
0024 680D 7F  GUDG118	BYTE >7F,>FF,>FF,>FE,>FE,>FE,>FE,>FE ; Character 118
     680E FF  
     680F FF  
     6810 FE  
     6811 FE  
     6812 FE  
     6813 FE  
     6814 FE  
0025 6815 FF  GUDG119	BYTE >FF,>FF,>FF,>7F,>7F,>7F,>7F,>7F ; Character 119
     6816 FF  
     6817 FF  
     6818 7F  
     6819 7F  
     681A 7F  
     681B 7F  
     681C 7F  
0026 681D 3F  GUDG120	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>3F,>3F ; Character 120
     681E 3F  
     681F 3F  
     6820 3F  
     6821 3F  
     6822 3F  
     6823 3F  
     6824 3F  
0027 6825 BC  GUDG121	BYTE >BC,>FC,>FC,>FD,>FD,>FD,>F9,>C1 ; Character 121
     6826 FC  
     6827 FC  
     6828 FD  
     6829 FD  
     682A FD  
     682B F9  
     682C C1  
0028 682D 7F  GUDG122	BYTE >7F,>FF,>FF,>FC,>FC,>FC,>FC,>FC ; Character 122
     682E FF  
     682F FF  
     6830 FC  
     6831 FC  
     6832 FC  
     6833 FC  
     6834 FC  
0029 6835 F8  GUDG123	BYTE >F8,>FC,>FE,>FE,>FE,>FE,>FE,>FE ; Character 123
     6836 FC  
     6837 FE  
     6838 FE  
     6839 FE  
     683A FE  
     683B FE  
     683C FE  
0030 683D FF  GUDG124	BYTE >FF,>FF,>FF,>9F,>9F,>9F,>9F,>9F ; Character 124
     683E FF  
     683F FF  
     6840 9F  
     6841 9F  
     6842 9F  
     6843 9F  
     6844 9F  
0031 6845 DF  GUDG125	BYTE >DF,>FF,>FF,>E7,>C7,>C7,>C7,>C7 ; Character 125
     6846 FF  
     6847 FF  
     6848 E7  
     6849 C7  
     684A C7  
     684B C7  
     684C C7  
0032 684D E7  GUDG126	BYTE >E7,>E7,>E7,>F7,>F7,>F7,>F7,>F7 ; Character 126
     684E E7  
     684F E7  
     6850 F7  
     6851 F7  
     6852 F7  
     6853 F7  
     6854 F7  
0033 6855 FF  GUDG127	BYTE >FF,>FF,>FF,>F3,>F3,>F3,>F3,>F3 ; Character 127
     6856 FF  
     6857 FF  
     6858 F3  
     6859 F3  
     685A F3  
     685B F3  
     685C F3  
0034 685D FB  GUDG128	BYTE >FB,>FF,>FF,>FC,>F8,>F8,>F8,>F8 ; Character 128
     685E FF  
     685F FF  
     6860 FC  
     6861 F8  
     6862 F8  
     6863 F8  
     6864 F8  
0035 6865 FC  GUDG129	BYTE >FC,>FC,>FC,>FE,>FE,>FE,>FE,>FE ; Character 129
     6866 FC  
     6867 FC  
     6868 FE  
     6869 FE  
     686A FE  
     686B FE  
     686C FE  
0036 686D FE  GUDG130	BYTE >FE,>FE,>7E,>7E,>7E,>7E,>7E,>3F ; Character 130
     686E FE  
     686F 7E  
     6870 7E  
     6871 7E  
     6872 7E  
     6873 7E  
     6874 3F  
0037 6875 3F  GUDG131	BYTE >3F,>7F,>7F,>7F,>7E,>7E,>7E,>7E ; Character 131
     6876 7F  
     6877 7F  
     6878 7F  
     6879 7E  
     687A 7E  
     687B 7E  
     687C 7E  
0038 687D 7E  GUDG132	BYTE >7E,>7E,>7E,>00,>00,>00,>00,>01 ; Character 132
     687E 7E  
     687F 7E  
     6880 00  
     6881 00  
     6882 00  
     6883 00  
     6884 01  
0039 6885 3F  GUDG133	BYTE >3F,>3F,>3F,>7F,>7F,>FF,>FF,>FE ; Character 133
     6886 3F  
     6887 3F  
     6888 7F  
     6889 7F  
     688A FF  
     688B FF  
     688C FE  
0040 688D 80  GUDG134	BYTE >80,>80,>80,>80,>00,>00,>00,>00 ; Character 134
     688E 80  
     688F 80  
     6890 80  
     6891 00  
     6892 00  
     6893 00  
     6894 00  
0041 6895 FE  GUDG135	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FF ; Character 135
     6896 FE  
     6897 FE  
     6898 FE  
     6899 FE  
     689A FE  
     689B FE  
     689C FF  
0042 689D 7F  GUDG136	BYTE >7F,>7F,>7F,>7F,>7F,>7F,>7F,>FF ; Character 136
     689E 7F  
     689F 7F  
     68A0 7F  
     68A1 7F  
     68A2 7F  
     68A3 7F  
     68A4 FF  
0043 68A5 C1  GUDG137	BYTE >C1,>81,>81,>81,>81,>81,>81,>81 ; Character 137
     68A6 81  
     68A7 81  
     68A8 81  
     68A9 81  
     68AA 81  
     68AB 81  
     68AC 81  
0044 68AD FC  GUDG138	BYTE >FC,>FC,>FC,>FC,>FC,>FC,>FC,>FC ; Character 138
     68AE FC  
     68AF FC  
     68B0 FC  
     68B1 FC  
     68B2 FC  
     68B3 FC  
     68B4 FC  
0045 68B5 FE  GUDG139	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FE ; Character 139
     68B6 FE  
     68B7 FE  
     68B8 FE  
     68B9 FE  
     68BA FE  
     68BB FE  
     68BC FE  
0046 68BD 9F  GUDG140	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>9F,>9F ; Character 140
     68BE 9F  
     68BF 9F  
     68C0 9F  
     68C1 9F  
     68C2 9F  
     68C3 9F  
     68C4 9F  
0047 68C5 C7  GUDG141	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>C7,>C7 ; Character 141
     68C6 C7  
     68C7 C7  
     68C8 C7  
     68C9 C7  
     68CA C7  
     68CB C7  
     68CC C7  
0048 68CD F7  GUDG142	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>F7,>F7 ; Character 142
     68CE F7  
     68CF F7  
     68D0 F7  
     68D1 F7  
     68D2 F7  
     68D3 F7  
     68D4 F7  
0049 68D5 F3  GUDG143	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>F3,>F3 ; Character 143
     68D6 F3  
     68D7 F3  
     68D8 F3  
     68D9 F3  
     68DA F3  
     68DB F3  
     68DC F3  
0050 68DD F8  GUDG144	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>F8,>F8 ; Character 144
     68DE F8  
     68DF F8  
     68E0 F8  
     68E1 F8  
     68E2 F8  
     68E3 F8  
     68E4 F8  
0051 68E5 3F  GUDG145	BYTE >3F,>3F,>3F,>3F,>1F,>1F,>1F,>1F ; Character 145
     68E6 3F  
     68E7 3F  
     68E8 3F  
     68E9 1F  
     68EA 1F  
     68EB 1F  
     68EC 1F  
0052 68ED 7E  GUDG146	BYTE >7E,>7E,>7E,>7E,>FC,>FC,>FC,>FC ; Character 146
     68EE 7E  
     68EF 7E  
     68F0 7E  
     68F1 FC  
     68F2 FC  
     68F3 FC  
     68F4 FC  
0053 68F5 01  GUDG147	BYTE >01,>03,>07,>07,>0F,>0F,>1F,>3F ; Character 147
     68F6 03  
     68F7 07  
     68F8 07  
     68F9 0F  
     68FA 0F  
     68FB 1F  
     68FC 3F  
0054 68FD FC  GUDG148	BYTE >FC,>FC,>F8,>F8,>F0,>E0,>E0,>C0 ; Character 148
     68FE FC  
     68FF F8  
     6900 F8  
     6901 F0  
     6902 E0  
     6903 E0  
     6904 C0  
0055 6905 7F  GUDG149	BYTE >7F,>7F,>3F,>00,>FE,>FE,>FF,>7F ; Character 149
     6906 7F  
     6907 3F  
     6908 00  
     6909 FE  
     690A FE  
     690B FF  
     690C 7F  
0056 690D FF  GUDG150	BYTE >FF,>FF,>7F,>7F,>7F,>7F,>FF,>FE ; Character 150
     690E FF  
     690F 7F  
     6910 7F  
     6911 7F  
     6912 7F  
     6913 FF  
     6914 FE  
0057 6915 3F  GUDG151	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>00,>00 ; Character 151
     6916 3F  
     6917 3F  
     6918 3F  
     6919 3F  
     691A 3F  
     691B 00  
     691C 00  
0058 691D 81  GUDG152	BYTE >81,>81,>80,>80,>80,>80,>00,>00 ; Character 152
     691E 81  
     691F 80  
     6920 80  
     6921 80  
     6922 80  
     6923 00  
     6924 00  
0059 6925 FC  GUDG153	BYTE >FC,>FC,>FF,>FF,>7F,>1F,>00,>00 ; Character 153
     6926 FC  
     6927 FF  
     6928 FF  
     6929 7F  
     692A 1F  
     692B 00  
     692C 00  
0060 692D FE  GUDG154	BYTE >FE,>FE,>FC,>FC,>F8,>E0,>00,>00 ; Character 154
     692E FE  
     692F FC  
     6930 FC  
     6931 F8  
     6932 E0  
     6933 00  
     6934 00  
0061 6935 9F  GUDG155	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>00,>00 ; Character 155
     6936 9F  
     6937 9F  
     6938 9F  
     6939 9F  
     693A 9F  
     693B 00  
     693C 00  
0062 693D C7  GUDG156	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>00,>00 ; Character 156
     693E C7  
     693F C7  
     6940 C7  
     6941 C7  
     6942 C7  
     6943 00  
     6944 00  
0063 6945 F7  GUDG157	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>00,>00 ; Character 157
     6946 F7  
     6947 F7  
     6948 F7  
     6949 F7  
     694A F7  
     694B 00  
     694C 00  
0064 694D F3  GUDG158	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>00,>00 ; Character 158
     694E F3  
     694F F3  
     6950 F3  
     6951 F3  
     6952 F3  
     6953 00  
     6954 00  
0065 6955 F8  GUDG159	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>00,>00 ; Character 159
     6956 F8  
     6957 F8  
     6958 F8  
     6959 F8  
     695A F8  
     695B 00  
     695C 00  
0066 695D FE  GUDG160	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>00,>00 ; Character 160
     695E FE  
     695F FE  
     6960 FE  
     6961 FE  
     6962 FE  
     6963 00  
     6964 00  
0067 6965 1F  GUDG161	BYTE >1F,>0F,>0F,>0F,>0F,>1F,>3F,>3F ; Character 161
     6966 0F  
     6967 0F  
     6968 0F  
     6969 0F  
     696A 1F  
     696B 3F  
     696C 3F  
0068 696D FC  GUDG162	BYTE >FC,>FC,>FC,>FC,>F8,>F8,>F8,>F0 ; Character 162
     696E FC  
     696F FC  
     6970 FC  
     6971 F8  
     6972 F8  
     6973 F8  
     6974 F0  
0069 6975 3F  GUDG163	BYTE >3F,>7F,>7F,>7F,>7F,>7F,>00,>00 ; Character 163
     6976 7F  
     6977 7F  
     6978 7F  
     6979 7F  
     697A 7F  
     697B 00  
     697C 00  
0070 697D 80  GUDG164	BYTE >80,>FF,>FF,>FF,>FF,>FF,>00,>00 ; Character 164
     697E FF  
     697F FF  
     6980 FF  
     6981 FF  
     6982 FF  
     6983 00  
     6984 00  
0071 6985 00  GUDG165	BYTE >00,>00,>80,>80,>80,>80,>00,>00 ; Character 165
     6986 00  
     6987 80  
     6988 80  
     6989 80  
     698A 80  
     698B 00  
     698C 00  
0072 698D 3F  GUDG166	BYTE >3F,>0F,>00,>00,>00,>00,>00,>00 ; Character 166
     698E 0F  
     698F 00  
     6990 00  
     6991 00  
     6992 00  
     6993 00  
     6994 00  
0073 6995 FC  GUDG167	BYTE >FC,>F0,>00,>00,>00,>00,>00,>00 ; Character 167
     6996 F0  
     6997 00  
     6998 00  
     6999 00  
     699A 00  
     699B 00  
     699C 00  
0074 699D 3F  GUDG168	BYTE >3F,>00,>00,>00,>00,>00,>00,>00 ; Character 168
     699E 00  
     699F 00  
     69A0 00  
     69A1 00  
     69A2 00  
     69A3 00  
     69A4 00  
0075 69A5 E0  GUDG169	BYTE >E0,>00,>00,>00,>00,>00,>00,>00 ; Character 169
     69A6 00  
     69A7 00  
     69A8 00  
     69A9 00  
     69AA 00  
     69AB 00  
     69AC 00  
0076 69AD 3E  GUDG170	BYTE >3E,>60,>60,>60,>60,>60,>32,>1E ; Character 170
     69AE 60  
     69AF 60  
     69B0 60  
     69B1 60  
     69B2 60  
     69B3 32  
     69B4 1E  
0077 69B5 3E  GUDG171	BYTE >3E,>66,>43,>C3,>43,>62,>76,>3C ; Character 171
     69B6 66  
     69B7 43  
     69B8 C3  
     69B9 43  
     69BA 62  
     69BB 76  
     69BC 3C  
0078 69BD 63  GUDG172	BYTE >63,>73,>7B,>6F,>6F,>67,>67,>63 ; Character 172
     69BE 73  
     69BF 7B  
     69C0 6F  
     69C1 6F  
     69C2 67  
     69C3 67  
     69C4 63  
0079 69C5 7C  GUDG173	BYTE >7C,>60,>60,>7C,>60,>60,>60,>60 ; Character 173
     69C6 60  
     69C7 60  
     69C8 7C  
     69C9 60  
     69CA 60  
     69CB 60  
     69CC 60  
0080 69CD C7  GUDG174	BYTE >C7,>CC,>CC,>CC,>CC,>CC,>CE,>C7 ; Character 174
     69CE CC  
     69CF CC  
     69D0 CC  
     69D1 CC  
     69D2 CC  
     69D3 CE  
     69D4 C7  
0081 69D5 C0  GUDG175	BYTE >C0,>00,>00,>C0,>E0,>60,>E0,>C0 ; Character 175
     69D6 00  
     69D7 00  
     69D8 C0  
     69D9 E0  
     69DA 60  
     69DB E0  
     69DC C0  
0082 69DD 61  GLINE0_25 BYTE >61,>62,>63,>64,>65,>66,>67,>68,>68,>69,>6A,>6B,>68,>6C,>6D,>6E,>6F,>70,>71,>72,>68,>73,>74,>75
     69DE 62  
     69DF 63  
     69E0 64  
     69E1 65  
     69E2 66  
     69E3 67  
     69E4 68  
     69E5 68  
     69E6 69  
     69E7 6A  
     69E8 6B  
     69E9 68  
     69EA 6C  
     69EB 6D  
     69EC 6E  
     69ED 6F  
     69EE 70  
     69EF 71  
     69F0 72  
     69F1 68  
     69F2 73  
     69F3 74  
     69F4 75  
0083 69F5 76  GLINE1_25 BYTE >76,>77,>78,>79,>7A,>7B,>78,>7C,>7D,>7E,>7F,>80,>81,>82,>83,>84,>85,>86
     69F6 77  
     69F7 78  
     69F8 79  
     69F9 7A  
     69FA 7B  
     69FB 78  
     69FC 7C  
     69FD 7D  
     69FE 7E  
     69FF 7F  
     6A00 80  
     6A01 81  
     6A02 82  
     6A03 83  
     6A04 84  
     6A05 85  
     6A06 86  
0084 6A07 87  GLINE2_24 BYTE >87,>88,>78,>89,>8A,>8B,>78,>8C,>8D,>8E,>8F,>90,>8B,>91,>92,>93,>94
     6A08 88  
     6A09 78  
     6A0A 89  
     6A0B 8A  
     6A0C 8B  
     6A0D 78  
     6A0E 8C  
     6A0F 8D  
     6A10 8E  
     6A11 8F  
     6A12 90  
     6A13 8B  
     6A14 91  
     6A15 92  
     6A16 93  
     6A17 94  
0085 6A18 95  GLINE3_25 BYTE >95,>96,>97,>98,>99,>9A,>97,>9B,>9C,>9D,>9E,>9F,>A0,>A1,>A2,>A3,>A4,>A5
     6A19 96  
     6A1A 97  
     6A1B 98  
     6A1C 99  
     6A1D 9A  
     6A1E 97  
     6A1F 9B  
     6A20 9C  
     6A21 9D  
     6A22 9E  
     6A23 9F  
     6A24 A0  
     6A25 A1  
     6A26 A2  
     6A27 A3  
     6A28 A4  
     6A29 A5  
0086 6A2A A6  GLINE4_9 BYTE >A6,>A7
     6A2B A7  
0087 6A2C A8  GLINE4_28 BYTE >A8,>A9,>AA,>AB,>AC,>AD,>AE,>AF
     6A2D A9  
     6A2E AA  
     6A2F AB  
     6A30 AC  
     6A31 AD  
     6A32 AE  
     6A33 AF  
0088          
0089          G_SCR1
0090 6A34 31      MOVE >0280,G@GUDG96,V@>0B00 ; Copy our screen chars
     6A35 02  
     6A36 80
     6A37 AB  
     6A38 00
     6A39 67  
     6A3A 5D
0091          
0092 6A3B 31  	MOVE >0018,G@GLINE0_25,V@>0001
     6A3C 00  
     6A3D 18
     6A3E A0  
     6A3F 01
     6A40 69  
     6A41 DD
0093 6A42 31  	MOVE >0012,G@GLINE1_25,V@>0027
     6A43 00  
     6A44 12
     6A45 A0  
     6A46 27
     6A47 69  
     6A48 F5
0094 6A49 31  	MOVE >0011,G@GLINE2_24,V@>0047
     6A4A 00  
     6A4B 11
     6A4C A0  
     6A4D 47
     6A4E 6A  
     6A4F 07
0095 6A50 31  	MOVE >0012,G@GLINE3_25,V@>0067
     6A51 00  
     6A52 12
     6A53 A0  
     6A54 67
     6A55 6A  
     6A56 18
0096 6A57 31  	MOVE >0002,G@GLINE4_9,V@>0087
     6A58 00  
     6A59 02
     6A5A A0  
     6A5B 87
     6A5C 6A  
     6A5D 2A
0097 6A5E 31  	MOVE >0008,G@GLINE4_28,V@>0094
     6A5F 00  
     6A60 08
     6A61 A0  
     6A62 94
     6A63 6A  
     6A64 2C
0098          
0099 6A65 00      RTN
0100          
