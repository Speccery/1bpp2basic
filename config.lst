XGA99 CROSS-ASSEMBLER   VERSION 3.0.1
              > config.gpl
0001          * config.gpl
0002          * Configurator for GROMMY2
0003          * At this point this is just a demo how to render the generated screen.gpl
0004          * EP 2023-11-26
0005          *
0006          * Compile the GPL code to binary with:
0007          * xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
0008          * output file is config.bin, since the filename ends with g it is treated
0009          * by an emulator such as js99er.net as a GROM file.
0010          *
0011          * This file includes the screen.gpl file at the very end.
0012          *
0013          
0014          LALIGN    EQU >02              Left alignment of text
0015          LALIGN2   EQU >03
0016          LAYOUTVER EQU 5         Row for Version number
0017          LAYOUTBAN EQU 8        Row for selected bank display
0018          VEROFS    EQU 32*LAYOUTVER
0019          VALIDIND  EQU VEROFS-29         ; Indicator for valid command
0020          VRAMDUMPAREA EQU VEROFS+224+32
0021          
0022          * A few variables for the grommy2 config to use.
0023          * I am not sure if these are free to use, but I will try :)
0024          XREG    EQU >832C   ; ** Program text or token pointer (in BASIC?)
0025          YREG    EQU >832E   ; ** Pointer to line number tale (in BASIC)
0026          ZREG    EQU >8330   ; ** Start of line number table pointer (in BASIC)
0027          ; >8332 .. 8337 seem to contain pointers also used by BASIC not GPL
0028          
0029          * Grommy2 command buffer in scratchpad
0030          GCMDBYTE EQU >8340
0031          GCMDP2   EQU >8342
0032          GCMDP3   EQU >8343
0033          GCMDP4   EQU >8344
0034          GCMDP5   EQU >8345
0035          GCMDP6   EQU >8346
0036          GCMDP7   EQU >8347
0037          
0038          BANK    EQU >8350           Active bank
0039          SHADOW  EQU >8351           Shadow enable / disable
0040          PAD0    EQU >835C
0041          PAD1    EQU >835D
0042          PAD2    EQU >835E
0043          PAD3    EQU >835F
0044          PAD4    EQU >8360
0045          PAD5    EQU >8361
0046          INDEX   EQU PAD5
0047          DUMPA   EQU >8362           ; GROM Dump address
0048          VRAMP   EQU >8340           ; VRAM ptr overlays GCMDBYTE
0049          
0050          DSP     EQU >8372           ; GPL data stack pointer
0051          SCANKEY EQU >8375
0052          VDPTIMER EQU >8379          ; Incremented by VDP interrupts
0053          * Hardware interface address
0054          HWIF     EQU >5FF0
0055          
0056          HEXBASECH EQU >E0         ; Base character for hex display
0057          ALIVECH   EQU >DF         ; Placed in top right corner, show we are alive
0058          
0059          
0060 6000 AA  G6000  DATA >AA01             standard header  version 1
     6001 01
0061 6002 00         DATA >0000             # of programs 0
     6003 00
0062 6004 00         DATA >0000             no power up
     6005 00
0063 6006 60         DATA G6010             program
     6007 10
0064 6008 00         DATA >0000             DSRs
     6009 00
0065 600A 00         DATA >0000             subprograms
     600B 00
0066 600C 00         DATA >0000
     600D 00
0067 600E 00         DATA >0000
     600F 00
0068          
0069 6010 00  G6010  DATA >0000         * No next program
     6011 00
0070 6012 60         DATA GPROG
     6013 2A
0071 6014 0E         STRI 'GROMMY2 CONFIG'
     6015 47  
     6016 52  
     6017 4F  
     6018 4D  
     6019 4D  
     601A 59  
     601B 32  
     601C 20  
     601D 43  
     601E 4F  
     601F 4E  
     6020 46  
     6021 49  
     6022 47  
0072          
0073          GVREGS
0074 6023 E0      BYTE  >E0              VDP registers values: standard mode
0075 6024 00      BYTE  >00              screen image at >0000
0076 6025 0E      BYTE  >0E              color table at >0380
0077 6026 01      BYTE  >01              char patterns at >0800
0078 6027 06      BYTE  >06              sprite attributes at >0300
0079 6028 00      BYTE  >00              sprite patterns at >0000
0080 6029 F5      BYTE  >F5              text/screen colors: white / light blue
0081          
0082          GPROG
0083 602A 86      CLR   @>8374
     602B 74  
0084 602C BF      DST   >0900,@>834A     load upper case chars 32->
     602D 4A  
     602E 09  
     602F 00
0085 6030 06      CALL  G@>0018
     6031 00  
     6032 18
0086          * Setup roughly as with mini memory
0087 6033 39      MOVE >0007,G@GVREGS,#>01    Set VDP Regs
     6034 00  
     6035 07
     6036 01  
     6037 60  
     6038 23
0088 6039 86      CLR   V@>0800          clear charpats 0-31
     603A A8  
     603B 00
0089 603C 35      MOVE  >00FF,V@>0800,V@>0801
     603D 00  
     603E FF
     603F A8  
     6040 01
     6041 A8  
     6042 00
0090          
0091 6043 BE      ST    >7E,@>8373       init subroutine stack
     6044 73  
     6045 7E  
0092 6046 87      DCLR  @>8322           clear error code
     6047 22  
0093 6048 87      DCLR  @>8348           clear flags
     6049 48  
0094          
0095 604A 87      DCLR   @DUMPA
     604B 62  
0096 604C 86      CLR    @BANK           Actually init from grommy2
     604D 50  
0097 604E 86      CLR    @SHADOW         Actually init from grommy2
     604F 51  
0098          
0099 6050 87      DCLR   @XREG
     6051 2C  
0100 6052 87      DCLR   @YREG
     6053 2E  
0101 6054 87      DCLR   @ZREG
     6055 30  
0102          
0103 6056 06      CALL G@GVDPSETUP
     6057 67  
     6058 6E
0104          
0105 6059 06      CALL G@G_SCR1       ; Setup the screen which was automatically generated
     605A 6A  
     605B 59
0106          * Setup additional chars E0..EF as numbers 0..9 and A..F
0107          * 0x980 = hex(0x800+ord('0')*8)
0108          * 0xa08 = hex(0x800+ord('A')*8)
0109          * 0xf00 = hex(0x800+0xe0*8)
0110          * 0xf50 = hex(0x800+0xea*8)
0111          CHSRC1 EQU >800+(8*'0')
0112          CHSRC2 EQU >800+(8*'A')
0113          CHOFS1 EQU >800+(8*HEXBASECH)
0114          CHOFS2 EQU >800+(8*(HEXBASECH+10))
0115 605C 35      MOVE 10*8,V@CHSRC1,V@CHOFS1  * 10 number patterns
     605D 00  
     605E 50
     605F AF  
     6060 0F
     6061 00
     6062 A9  
     6063 80
0116 6064 35      MOVE  6*8,V@CHSRC2,V@CHOFS2
     6065 00  
     6066 30
     6067 AF  
     6068 0F
     6069 50
     606A AA  
     606B 08
0117          * Set the colors for these characters.
0118 606C BE      ST   >A5,V@>39C
     606D A3  
     606E 9C
     606F A5  
0119 6070 BE      ST   >A5,V@>39D
     6071 A3  
     6072 9D
     6073 A5  
0120          * Make the fonts "bold"
0121 6074 BF      DST  >F00,@VRAMP
     6075 40  
     6076 0F  
     6077 00
0122 6078 BC  !   ST   V@0(@VRAMP),@PAD0
     6079 5C  
     607A E0  
     607B 00
     607C 40
0123 607D E6      SRL  1,@PAD0
     607E 5C  
     607F 01  
0124 6080 B4      OR   V@0(@VRAMP),@PAD0
     6081 5C  
     6082 E0  
     6083 00
     6084 40
0125 6085 BC      ST  @PAD0,V@0(@VRAMP)
     6086 E0  
     6087 00
     6088 40
     6089 5C  
0126 608A 91      DINC @VRAMP
     608B 40  
0127 608C D7      DCEQ >F80,@VRAMP
     608D 40  
     608E 0F  
     608F 80
0128 6090 40      BR   -!
     6091 78  
0129          * Copy the fonts to make inverse duplicates
0130 6092 35      MOVE >80,V@>F00,V@>F80
     6093 00  
     6094 80
     6095 AF  
     6096 0F
     6097 80
     6098 AF  
     6099 0F
     609A 00
0131 609B BE      ST   >5A,V@>39E
     609C A3  
     609D 9E
     609E 5A  
0132 609F BE      ST   >5A,V@>39F
     60A0 A3  
     60A1 9F
     60A2 5A  
0133          
0134          SCREEN1:
0135          * Use the FMT token to add some strings on the screen
0136 60A3 08      FMT
0137 60A4 FF      COL LALIGN
     60A5 02  
0138 60A6 FE      ROW LAYOUTVER
     60A7 05  
0139 60A8 1D      HTEX 'VERSION 0.0.00 BANK 0 SHADOW 0'
     60A9 56  
     60AA 45  
     60AB 52  
     60AC 53  
     60AD 49  
     60AE 4F  
     60AF 4E  
     60B0 20  
     60B1 30  
     60B2 2E  
     60B3 30  
     60B4 2E  
     60B5 30  
     60B6 30  
     60B7 20  
     60B8 42  
     60B9 41  
     60BA 4E  
     60BB 4B  
     60BC 20  
     60BD 30  
     60BE 20  
     60BF 53  
     60C0 48  
     60C1 41  
     60C2 44  
     60C3 4F  
     60C4 57  
     60C5 20  
     60C6 30  
0140 60C7 A0      ROW+ >01
0141 60C8 FF      COL LALIGN
     60C9 02  
0142 60CA 19      HTEX 'SELECT GROM BANK FOR READS'
     60CB 53  
     60CC 45  
     60CD 4C  
     60CE 45  
     60CF 43  
     60D0 54  
     60D1 20  
     60D2 47  
     60D3 52  
     60D4 4F  
     60D5 4D  
     60D6 20  
     60D7 42  
     60D8 41  
     60D9 4E  
     60DA 4B  
     60DB 20  
     60DC 46  
     60DD 4F  
     60DE 52  
     60DF 20  
     60E0 52  
     60E1 45  
     60E2 41  
     60E3 44  
     60E4 53  
0143 60E5 A0      ROW+ >01
0144 60E6 FF      COL LALIGN2
     60E7 03  
0145 60E8 0C      HTEX '0 SYSTEM BANK'
     60E9 30  
     60EA 20  
     60EB 53  
     60EC 59  
     60ED 53  
     60EE 54  
     60EF 45  
     60F0 4D  
     60F1 20  
     60F2 42  
     60F3 41  
     60F4 4E  
     60F5 4B  
0146 60F6 A0      ROW+ >01
0147 60F7 FF      COL LALIGN2
     60F8 03  
0148 60F9 0C      HTEX '1 USER BANK 1'
     60FA 31  
     60FB 20  
     60FC 55  
     60FD 53  
     60FE 45  
     60FF 52  
     6100 20  
     6101 42  
     6102 41  
     6103 4E  
     6104 4B  
     6105 20  
     6106 31  
0149 6107 A0      ROW+ >01
0150 6108 FF      COL LALIGN2
     6109 03  
0151 610A 0C      HTEX '2 USER BANK 2'
     610B 32  
     610C 20  
     610D 55  
     610E 53  
     610F 45  
     6110 52  
     6111 20  
     6112 42  
     6113 41  
     6114 4E  
     6115 4B  
     6116 20  
     6117 32  
0152 6118 A0      ROW+ >01
0153 6119 FF      COL LALIGN2
     611A 03  
0154 611B 0A      HTEX '3 GRAM BANK'
     611C 33  
     611D 20  
     611E 47  
     611F 52  
     6120 41  
     6121 4D  
     6122 20  
     6123 42  
     6124 41  
     6125 4E  
     6126 4B  
0155          
0156 6127 A1      ROW+ >02
0157 6128 FF      COL LALIGN
     6129 02  
0158 612A 09      HTEX 'SHADOW RAM'
     612B 53  
     612C 48  
     612D 41  
     612E 44  
     612F 4F  
     6130 57  
     6131 20  
     6132 52  
     6133 41  
     6134 4D  
0159 6135 A0      ROW+ >01
0160 6136 FF      COL LALIGN2
     6137 03  
0161 6138 15      HTEX '4 ENABLE     5 DISABLE'
     6139 34  
     613A 20  
     613B 45  
     613C 4E  
     613D 41  
     613E 42  
     613F 4C  
     6140 45  
     6141 20  
     6142 20  
     6143 20  
     6144 20  
     6145 20  
     6146 35  
     6147 20  
     6148 44  
     6149 49  
     614A 53  
     614B 41  
     614C 42  
     614D 4C  
     614E 45  
0162          
0163 614F A1      ROW+ >02
0164 6150 FF      COL LALIGN
     6151 02  
0165 6152 16      HTEX 'FLASH GRAM TO USER BANK'
     6153 46  
     6154 4C  
     6155 41  
     6156 53  
     6157 48  
     6158 20  
     6159 47  
     615A 52  
     615B 41  
     615C 4D  
     615D 20  
     615E 54  
     615F 4F  
     6160 20  
     6161 55  
     6162 53  
     6163 45  
     6164 52  
     6165 20  
     6166 42  
     6167 41  
     6168 4E  
     6169 4B  
0166 616A A0      ROW+ >01
0167 616B FF      COL LALIGN2
     616C 03  
0168 616D 14      HTEX '6 BANK 1     7 BANK 2'
     616E 36  
     616F 20  
     6170 42  
     6171 41  
     6172 4E  
     6173 4B  
     6174 20  
     6175 31  
     6176 20  
     6177 20  
     6178 20  
     6179 20  
     617A 20  
     617B 37  
     617C 20  
     617D 42  
     617E 41  
     617F 4E  
     6180 4B  
     6181 20  
     6182 32  
0169          
0170 6183 A1      ROW+ >02
0171 6184 FF      COL LALIGN
     6185 02  
0172 6186 14      HTEX 'COPY ROM BANK TO GRAM'
     6187 43  
     6188 4F  
     6189 50  
     618A 59  
     618B 20  
     618C 52  
     618D 4F  
     618E 4D  
     618F 20  
     6190 42  
     6191 41  
     6192 4E  
     6193 4B  
     6194 20  
     6195 54  
     6196 4F  
     6197 20  
     6198 47  
     6199 52  
     619A 41  
     619B 4D  
0173 619C A0      ROW+ >01
0174 619D FF      COL LALIGN2
     619E 03  
0175 619F 16      HTEX 'A COPY FROM SYSTEM BANK'
     61A0 41  
     61A1 20  
     61A2 43  
     61A3 4F  
     61A4 50  
     61A5 59  
     61A6 20  
     61A7 46  
     61A8 52  
     61A9 4F  
     61AA 4D  
     61AB 20  
     61AC 53  
     61AD 59  
     61AE 53  
     61AF 54  
     61B0 45  
     61B1 4D  
     61B2 20  
     61B3 42  
     61B4 41  
     61B5 4E  
     61B6 4B  
0176 61B7 A0      ROW+ >01
0177 61B8 FF      COL LALIGN2
     61B9 03  
0178 61BA 16      HTEX 'B COPY FROM USER BANK 1'
     61BB 42  
     61BC 20  
     61BD 43  
     61BE 4F  
     61BF 50  
     61C0 59  
     61C1 20  
     61C2 46  
     61C3 52  
     61C4 4F  
     61C5 4D  
     61C6 20  
     61C7 55  
     61C8 53  
     61C9 45  
     61CA 52  
     61CB 20  
     61CC 42  
     61CD 41  
     61CE 4E  
     61CF 4B  
     61D0 20  
     61D1 31  
0179 61D2 A0      ROW+ >01
0180 61D3 FF      COL LALIGN2
     61D4 03  
0181 61D5 16      HTEX 'C COPY FROM USER BANK 2'
     61D6 43  
     61D7 20  
     61D8 43  
     61D9 4F  
     61DA 50  
     61DB 59  
     61DC 20  
     61DD 46  
     61DE 52  
     61DF 4F  
     61E0 4D  
     61E1 20  
     61E2 55  
     61E3 53  
     61E4 45  
     61E5 52  
     61E6 20  
     61E7 42  
     61E8 41  
     61E9 4E  
     61EA 4B  
     61EB 20  
     61EC 32  
0182          
0183 61ED A0      ROW+ >01
0184 61EE FF      COL LALIGN
     61EF 02  
0185 61F0 08      HTEX '9 MORE...'
     61F1 39  
     61F2 20  
     61F3 4D  
     61F4 4F  
     61F5 52  
     61F6 45  
     61F7 2E  
     61F8 2E  
     61F9 2E  
0186          
0187 61FA FB      FEND
0188          
0189          * Pattern address of character ALIVECH
0190          PATADR EQU >0800+(8*ALIVECH)
0191          * Test a couple of chars
0192          *    MOVE 64,G@DENSE_FONT,V@PATADR-64
0193          *    ST >F7,V@0
0194          *    ST >F8,V@1
0195          *    ST >F9,V@2
0196          *    ST >FA,V@3
0197          *    ST >FB,V@4
0198          *    ST >FC,V@5
0199          *    ST >FD,V@6
0200          *    ST >FE,V@7
0201          
0202 61FB 06      CALL  SHOW_VERSION      ; Get version, bank, shadow info
     61FC 66  
     61FD 67
0203 61FE 05      B     GUPDATE           ; update screen
     61FF 62  
     6200 B8
0204          MAINSEL:
0205 6201 06      CALL  CLEARVALID
     6202 65  
     6203 76
0206          GWAIT
0207 6204 03      SCAN
0208 6205 62      BS    GOTKEY
     6206 11  
0209          * We did not get a key. Animate something.
0210 6207 BE      ST    ALIVECH,V@>001F      Write char FF to top right corner
     6208 A0  
     6209 1F
     620A DF  
0211 620B 90      INC   V@PATADR
     620C AE  
     620D F8
0212 620E 05      B    G@GWAIT          wait for the user to press a key
     620F 62  
     6210 04
0213          
0214          
0215          GOTKEY:
0216 6211 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     6212 A0  
     6213 82
     6214 75  
0217 6215 CE      CGT   '0'-1,@SCANKEY       greater than >= 0
     6216 75  
     6217 2F  
0218 6218 42      BR    GG01              no skip forward
     6219 B2  
0219 621A CE      CGT   '9',@SCANKEY        Key greater than '9'?
     621B 75  
     621C 39  
0220 621D 62      BS    CHECK_ABC             ; Yes: skip forward
     621E 38  
0221 621F A6      SUB   '0',@SCANKEY
     6220 75  
     6221 30  
0222 6222 8A      CASE  @SCANKEY
     6223 75  
0223 6224 42      BR    KEY0
     6225 5C  
0224 6226 42      BR    KEY1
     6227 5C  
0225 6228 42      BR    KEY2
     6229 5C  
0226 622A 42      BR    KEY3
     622B 67  
0227 622C 42      BR    KEY4
     622D 4D  
0228 622E 42      BR    KEY5
     622F 58  
0229 6230 42      BR    KEY6
     6231 6F  
0230 6232 42      BR    KEY7
     6233 7A  
0231 6234 42      BR    KEY8
     6235 7F  
0232 6236 42      BR    KEY9
     6237 88  
0233          CHECK_ABC
0234          ; Commands A,B and C
0235 6238 CE      CGT   'A'-1,@SCANKEY
     6239 75  
     623A 40  
0236 623B 42      BR    GG01
     623C B2  
0237 623D CE      CGT   'C',@SCANKEY
     623E 75  
     623F 43  
0238 6240 62      BS    GG01
     6241 B2  
0239 6242 A6      SUB   'A',@SCANKEY
     6243 75  
     6244 41  
0240 6245 8A      CASE  @SCANKEY
     6246 75  
0241 6247 42      BR    KEYA
     6248 8B  
0242 6249 42      BR    KEYB
     624A 97  
0243 624B 42      BR    KEYC
     624C 9C  
0244          
0245          KEY4:
0246 624D BE      ST  1,@SHADOW
     624E 51  
     624F 01  
0247          SHADOWSET
0248 6250 BC      ST  @SHADOW,@GCMDP2    ; Set parameter 2
     6251 42  
     6252 51  
0249 6253 BE      ST  3,@GCMDBYTE         ; Command 3 shadow enable/disable
     6254 40  
     6255 03  
0250 6256 42      BR  ISSUECMD
     6257 A5  
0251          KEY5:
0252 6258 86      CLR @SHADOW
     6259 51  
0253 625A 42      BR  SHADOWSET
     625B 50  
0254          KEY0
0255          KEY1
0256          KEY2
0257 625C BC      ST   @SCANKEY,@BANK
     625D 50  
     625E 75  
0258 625F BC      ST   @SCANKEY,@GCMDP2    ; Set parameter 2
     6260 42  
     6261 75  
0259          BANKSEL
0260 6262 BE      ST   1,@GCMDBYTE         ; Command 1 select bank for reads
     6263 40  
     6264 01  
0261 6265 42      BR  ISSUECMD
     6266 A5  
0262          KEY3
0263 6267 BC      ST   @SCANKEY,@BANK
     6268 50  
     6269 75  
0264 626A BE      ST   8,@GCMDP2           ; GRAM bank is 8
     626B 42  
     626C 08  
0265 626D 42      BR   BANKSEL
     626E 62  
0266          
0267          KEY6:                       ; Flash GRAM to user bank 1
0268 626F BE      ST   >01,@GCMDP2        ; User bank 1
     6270 42  
     6271 01  
0269          GRAM2FLASH
0270 6272 BE      ST   >3F,@GCMDP3        ; Bit mask: flash entire bank
     6273 43  
     6274 3F  
0271 6275 BE      ST   4,@GCMDBYTE
     6276 40  
     6277 04  
0272 6278 42      BR  ISSUECMD
     6279 A5  
0273          KEY7:                       ; Flash GRAM to user bank 2
0274 627A BE      ST   >02,@GCMDP2        ; User bank 2
     627B 42  
     627C 02  
0275 627D 42      BR   GRAM2FLASH
     627E 72  
0276          KEY8
0277 627F BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6280 A0  
     6281 83
     6282 2A  
0278 6283 06      CALL  SHOW_VERSION
     6284 66  
     6285 67
0279 6286 42      BR    MAINSEL
     6287 01  
0280          KEY9:
0281 6288 05      B   DUMPSCREEN
     6289 62  
     628A ED
0282          
0283          KEYA:                       ; Copy bank 0 to GRAM
0284 628B BE      ST    0,@GCMDP2
     628C 42  
     628D 00  
0285          COPY2GRAM:
0286 628E BE      ST    '*',V@VALIDIND    ; Command valid indicator
     628F A0  
     6290 83
     6291 2A  
0287 6292 BE      ST    2,@GCMDBYTE
     6293 40  
     6294 02  
0288 6295 42      BR    ISSUECMD
     6296 A5  
0289          KEYB:
0290 6297 BE      ST    1,@GCMDP2
     6298 42  
     6299 01  
0291 629A 42      BR    COPY2GRAM
     629B 8E  
0292          KEYC:
0293 629C BE      ST    2,@GCMDP2
     629D 42  
     629E 02  
0294 629F 42      BR    COPY2GRAM
     62A0 8E  
0295          
0296          ISSUECMD1:                  ; Clear last 4 parameter bytes
0297 62A1 87      DCLR  @GCMDBYTE+4
     62A2 44  
0298 62A3 87      DCLR  @GCMDBYTE+6
     62A4 46  
0299          ISSUECMD:
0300 62A5 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     62A6 00  
     62A7 08
     62A8 48  
     62A9 66  
     62AA E8
0301 62AB BE      ST    '*',V@VALIDIND    ; Command valid indicator
     62AC A0  
     62AD 83
     62AE 2A  
0302 62AF 06      CALL  GSENDCMD          ; Send command to HW
     62B0 66  
     62B1 D3
0303          
0304          GG01:
0305 62B2 D6      CEQ   >0F,@SCANKEY       is it Fctn-9?
     62B3 75  
     62B4 0F  
0306 62B5 42      BR    G@GCONT2         no: GCONT2
     62B6 B8  
0307 62B7 0B      EXIT                   yes: reset the TI-99/4A
0308          
0309          GCONT2
0310          * Update screen to reflect current status
0311          GUPDATE
0312          * Status of Shadow RAM enable/disable
0313 62B8 BE      ST  '0',@PAD0
     62B9 5C  
     62BA 30  
0314 62BB A0      ADD @SHADOW,@PAD0
     62BC 5C  
     62BD 51  
0315 62BE BC      ST  @PAD0,V@VEROFS+>1F        Write to VRAM
     62BF A0  
     62C0 BF
     62C1 5C  
0316          * Status of selected bank
0317 62C2 BE      ST  '0',@PAD0
     62C3 5C  
     62C4 30  
0318 62C5 A0      ADD @BANK,@PAD0
     62C6 5C  
     62C7 50  
0319 62C8 BC      ST  @PAD0,V@VEROFS+>16  ; Write to VRAM
     62C9 A0  
     62CA B6
     62CB 5C  
0320          
0321          
0322          * Start update GROM read bank. First erase bank markings.
0323          BANKOFS EQU (32*LAYOUTBAN)+4
0324 62CC BE      ST ' ',V@BANKOFS
     62CD A1  
     62CE 04
     62CF 20  
0325 62D0 BE      ST ' ',V@BANKOFS+>20
     62D1 A1  
     62D2 24
     62D3 20  
0326 62D4 BE      ST ' ',V@BANKOFS+>40
     62D5 A1  
     62D6 44
     62D7 20  
0327 62D8 BE      ST ' ',V@BANKOFS+>60
     62D9 A1  
     62DA 64
     62DB 20  
0328 62DC 87      DCLR @PAD0
     62DD 5C  
0329 62DE BC      ST   @BANK,@PAD3        Copy to low byte the bank #
     62DF 5F  
     62E0 50  
0330 62E1 E3      DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
     62E2 5E  
     62E3 00  
     62E4 05
0331 62E5 BE      ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
     62E6 E1  
     62E7 04
     62E8 5E
     62E9 2A  
0332          * End update GROM read bank.
0333 62EA 05      B   G@MAINSEL
     62EB 62  
     62EC 01
0334          
0335          *----------------------------------------
0336          * Second screen with a few features.
0337          *----------------------------------------
0338          DUMPSCREEN:
0339 62ED BE      ST   ' ',V@VEROFS
     62EE A0  
     62EF A0
     62F0 20  
0340 62F1 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     62F2 02  
     62F3 5F
     62F4 A0  
     62F5 A1
     62F6 A0  
     62F7 A0
0341 62F8 08      FMT
0342 62F9 FF      COL LALIGN
     62FA 02  
0343 62FB FE      ROW LAYOUTVER
     62FC 05  
0344 62FD 1A      HTEX '1 DEC 2 INC DUMP ADDR 3 RET'
     62FE 31  
     62FF 20  
     6300 44  
     6301 45  
     6302 43  
     6303 20  
     6304 32  
     6305 20  
     6306 49  
     6307 4E  
     6308 43  
     6309 20  
     630A 44  
     630B 55  
     630C 4D  
     630D 50  
     630E 20  
     630F 41  
     6310 44  
     6311 44  
     6312 52  
     6313 20  
     6314 33  
     6315 20  
     6316 52  
     6317 45  
     6318 54  
0345 6319 A0      ROW+ >01
0346 631A FF      COL LALIGN
     631B 02  
0347 631C 12      HTEX '4 FILL GRAM WITH FF'
     631D 34  
     631E 20  
     631F 46  
     6320 49  
     6321 4C  
     6322 4C  
     6323 20  
     6324 47  
     6325 52  
     6326 41  
     6327 4D  
     6328 20  
     6329 57  
     632A 49  
     632B 54  
     632C 48  
     632D 20  
     632E 46  
     632F 46  
0348 6330 A0      ROW+ >01
0349 6331 FF      COL LALIGN
     6332 02  
0350 6333 1B      HTEX '5 COPY 24K GROM 8000 TO GRAM'
     6334 35  
     6335 20  
     6336 43  
     6337 4F  
     6338 50  
     6339 59  
     633A 20  
     633B 32  
     633C 34  
     633D 4B  
     633E 20  
     633F 47  
     6340 52  
     6341 4F  
     6342 4D  
     6343 20  
     6344 38  
     6345 30  
     6346 30  
     6347 30  
     6348 20  
     6349 54  
     634A 4F  
     634B 20  
     634C 47  
     634D 52  
     634E 41  
     634F 4D  
0351 6350 A0      ROW+ >01
0352 6351 FF      COL LALIGN
     6352 02  
0353 6353 0E      HTEX '6 ARM EXECUTE X'
     6354 36  
     6355 20  
     6356 41  
     6357 52  
     6358 4D  
     6359 20  
     635A 45  
     635B 58  
     635C 45  
     635D 43  
     635E 55  
     635F 54  
     6360 45  
     6361 20  
     6362 58  
0354 6363 A0      ROW+ >01
0355 6364 FF      COL LALIGN
     6365 02  
0356 6366 11      HTEX '7 ARM EXECUTE 4000'
     6367 37  
     6368 20  
     6369 41  
     636A 52  
     636B 4D  
     636C 20  
     636D 45  
     636E 58  
     636F 45  
     6370 43  
     6371 55  
     6372 54  
     6373 45  
     6374 20  
     6375 34  
     6376 30  
     6377 30  
     6378 30  
0357 6379 A0      ROW+ >01
0358 637A FF      COL LALIGN
     637B 02  
0359 637C 18      HTEX '0 BURN FIRMWARE FROM GRAM'
     637D 30  
     637E 20  
     637F 42  
     6380 55  
     6381 52  
     6382 4E  
     6383 20  
     6384 46  
     6385 49  
     6386 52  
     6387 4D  
     6388 57  
     6389 41  
     638A 52  
     638B 45  
     638C 20  
     638D 46  
     638E 52  
     638F 4F  
     6390 4D  
     6391 20  
     6392 47  
     6393 52  
     6394 41  
     6395 4D  
0360 6396 A0      ROW+ >01
0361 6397 FF      COL LALIGN
     6398 02  
0362 6399 18      HTEX 'X Y Z: EDIT VAR X, Y OR Z'
     639A 58  
     639B 20  
     639C 59  
     639D 20  
     639E 5A  
     639F 3A  
     63A0 20  
     63A1 45  
     63A2 44  
     63A3 49  
     63A4 54  
     63A5 20  
     63A6 56  
     63A7 41  
     63A8 52  
     63A9 20  
     63AA 58  
     63AB 2C  
     63AC 20  
     63AD 59  
     63AE 20  
     63AF 4F  
     63B0 52  
     63B1 20  
     63B2 5A  
0363 63B3 FB      FEND
0364          
0365 63B4 31      MOVE BINLEN,G@BINDATA,@>8300 ; Move assembly code in place
     63B5 00  
     63B6 22
     63B7 00  
     63B8 67  
     63B9 4C
0366          
0367          * ; test characters on last line
0368          *     ST  HEXBASECH,@PAD0
0369          *     DST 32*23,@VRAMP          * Beginning of last row
0370          * !   ST  @PAD0,V@0(@VRAMP)
0371          *     DINC @VRAMP
0372          *     INC @PAD0
0373          *     CZ  @PAD0
0374          *     BR  -!
0375          
0376          
0377          ; First test in units of frame count (VDPTIMER)
0378          ; Test runs for 4 frames.
0379          ;   GPL with original HEXOUT: 119 ticks
0380          ;   GPL call to GPL HEXOUT routine issuing XML >F0:  55 ticks
0381          ;   Replace GPL call with XML >F0: 47 ticks
0382          ;   All GPL with new hex characters, no gap between '9' and 'A': 87 ticks
0383          ;     This also handles two characers at a time. But still slow.
0389          
0390 63BA 05      B  SKIPBENCH
     63BB 63  
     63BC D7
0391          ; Run benchmark
0392 63BD BE      ST    4,@XREG               ; Loop counter
     63BE 2C  
     63BF 04  
0393 63C0 BC      ST    @VDPTIMER,@XREG+1     ; Read timer
     63C1 2D  
     63C2 79  
0394 63C3 06  !   CALL  G@DODUMP
     63C4 64  
     63C5 14
0395 63C6 A3      DADD  8,@DUMPA
     63C7 62  
     63C8 00  
     63C9 08
0396 63CA 92      DEC   @XREG
     63CB 2C  
0397 63CC 8E      CZ    @XREG
     63CD 2C  
0398 63CE 43      BR   -!
     63CF C3  
0399 63D0 BC      ST    @VDPTIMER,@XREG       ; Read timer
     63D1 2C  
     63D2 79  
0400 63D3 A7      DSUB  4*10,@DUMPA
     63D4 62  
     63D5 00  
     63D6 28
0401          SKIPBENCH:
0402 63D7 05      B     MAKEDUMP      ; NOP
     63D8 63  
     63D9 DA
0403          
0404          MAKEDUMP:
0405 63DA BD      DST  @YREG,@DUMPA
     63DB 62  
     63DC 2E  
0406 63DD 06      CALL G@DODUMP
     63DE 64  
     63DF 14
0407 63E0 06      CALL  CLEARVALID
     63E1 65  
     63E2 76
0408          ; Wait for keypress
0409          KW1:
0410 63E3 03      SCAN
0411 63E4 63      BS    DGOTKEY
     63E5 EC  
0412 63E6 90      INC   V@PATADR
     63E7 AE  
     63E8 F8
0413 63E9 05      B     KW1
     63EA 63  
     63EB E3
0414          DGOTKEY:
0415 63EC BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     63ED A0  
     63EE 82
     63EF 75  
0416 63F0 CE      CGT   'X'-1,@SCANKEY    ; Key >= 'X'
     63F1 75  
     63F2 57  
0417 63F3 64      BS    XYZ               ; Yes: go to XYZ
     63F4 6C  
0418 63F5 CE      CGT   '0'-1,@SCANKEY
     63F6 75  
     63F7 2F  
0419 63F8 43      BR    KW1               ; Key less than zero -> loop
     63F9 E3  
0420 63FA CE      CGT   '7',@SCANKEY      ; Key over '7' -> loop
     63FB 75  
     63FC 37  
0421 63FD 63      BS    KW1
     63FE E3  
0422 63FF A6      SUB   '0',@SCANKEY
     6400 75  
     6401 30  
0423 6402 8A      CASE  @SCANKEY
     6403 75  
0424 6404 44      BR    DKEY0
     6405 F2  
0425 6406 44      BR    DKEY1
     6407 D6  
0426 6408 44      BR    DKEY2
     6409 DD  
0427 640A 44      BR    DKEY3
     640B E4  
0428 640C 45      BR    DKEY4
     640D 11  
0429 640E 45      BR    DKEY5
     640F 30  
0430 6410 45      BR    DKEY6
     6411 4F  
0431 6412 45      BR    DKEY7
     6413 70  
0432          
0433          DODUMP:
0434 6414 BF      DST   VRAMDUMPAREA,@VRAMP
     6415 40  
     6416 01  
     6417 A0
0435 6418 86      CLR   @PAD2             ; Row counter
     6419 5E  
0436 641A BE      ST    '*',V@VALIDIND
     641B A0  
     641C 83
     641D 2A  
0437          DUMP2:
0438 641E BE      ST    ' ',V@>FFFF(VRAMP)    ; setup VRAM address in case assembly used
     641F EF  
     6420 FF
     6421 FF
     6422 40
     6423 20  
0439 6424 BC      ST    @DUMPA,@PAD0      ; Hi byte off address
     6425 5C  
     6426 62  
0001 6427 0F      XML >F0
     6428 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0441 6429 A3      DADD  2,@VRAMP
     642A 40  
     642B 00  
     642C 02
0442 642D BC      ST    @DUMPA+1,@PAD0    ; Lo byte off address
     642E 5C  
     642F 63  
0001 6430 0F      XML >F0
     6431 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0444 6432 BE      ST    ':',V@2(@VRAMP)
     6433 E0  
     6434 02
     6435 40
     6436 3A  
0445 6437 A3      DADD  3,@VRAMP
     6438 40  
     6439 00  
     643A 03
0446 643B 86      CLR   @PAD1             ; column counter
     643C 5D  
0447          ; Dump 8 bytes from from 16 bit ptr  DUMPA
0448          DUMP1:
0449 643D 33      MOVE  1,G@0(@DUMPA),@PAD0    ; Read from GROM pointed to by DUMPA
     643E 00  
     643F 01
     6440 5C  
     6441 00  
     6442 00
     6443 62
0001 6444 0F      XML >F0
     6445 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0451 6446 BE      ST    ' ',V@2(@VRAMP)
     6447 E0  
     6448 02
     6449 40
     644A 20  
0452 644B A3      DADD  3,@VRAMP
     644C 40  
     644D 00  
     644E 03
0453 644F 91      DINC  @DUMPA
     6450 62  
0454 6451 90      INC   @PAD1
     6452 5D  
0455 6453 D6      CEQ   8,@PAD1           ; 8 columns - are we done?
     6454 5D  
     6455 08  
0456 6456 44      BR    DUMP1             ; No: jump to dump1
     6457 3D  
0457          ; Advance VRAM pointer, we add and mask to bring pointer to beginning
0458          ; of next line.
0459 6458 A3      DADD  >1F,@VRAMP
     6459 40  
     645A 00  
     645B 1F
0460 645C B3      DAND  >0FE0,@VRAMP
     645D 40  
     645E 0F  
     645F E0
0461 6460 90      INC   @PAD2             ; inc Row
     6461 5E  
0462 6462 D6      CEQ   8,@PAD2           ; Done with 8 rows?
     6463 5E  
     6464 08  
0463 6465 44      BR    DUMP2             ; No: jump to dump2
     6466 1E  
0464 6467 A7      DSUB  8*8,@DUMPA           ; Undo the incs in the loop above
     6468 62  
     6469 00  
     646A 40
0465 646B 00      RTN
0466          
0467          ; Check if we have button X Y Z pressed
0468          XYZ:
0469 646C CE      CGT   'Z',@SCANKEY    ; Above Z?
     646D 75  
     646E 5A  
0470 646F 63      BS    KW1             ; Yes: KW1
     6470 E3  
0471          ; Ok now we need to ask the user for a value and store it to X, Y or Z register.
0472          ; Show the current value of the variable after character code
0473 6471 BF      DST   VEROFS-29,@VRAMP ; Location in VRAM
     6472 40  
     6473 00  
     6474 83
0474 6475 BC      ST    @SCANKEY,@PAD3
     6476 5F  
     6477 75  
0475 6478 A6      SUB   'X',@PAD3       ; Now pad is 0,1,2 for X,Y,Z
     6479 5F  
     647A 58  
0476 647B E2      SLL   1,@PAD3         ; Multiply by 2
     647C 5F  
     647D 01  
0477 647E 86      CLR   @PAD2           ; clear high byte
     647F 5E  
0478 6480 A3      DADD  XREG,@PAD2       ; Add address of XREG, now PAD1:PAD2 is a pointer to value
     6481 5E  
     6482 83  
     6483 2C
0479          
0480 6484 BC      ST    @0(@PAD2),@PAD0  ; Hi byte of reg
     6485 5C  
     6486 CF  
     6487 7D
     6488 00
     6489 5E
0001 648A 0F      XML >F0
     648B F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0482 648C A3      DADD  2,@VRAMP
     648D 40  
     648E 00  
     648F 02
0483 6490 BC      ST    @1(@PAD2),@PAD0  ; Lo byte of reg
     6491 5C  
     6492 CF  
     6493 7D
     6494 01
     6495 5E
0001 6496 0F      XML >F0
     6497 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0485 6498 A7      DSUB  2,@VRAMP          ; Point to beginning of hex digits
     6499 40  
     649A 00  
     649B 02
0486 649C BE      ST    4,@PAD4           ; 4 digits to edit, VRAMP points to them
     649D 60  
     649E 04  
0487 649F 06      CALL  EDITHEX           ; go and edit them
     64A0 65  
     64A1 87
0488          ; YREG is used as dump addres. If it changed, refresh screen.
0489 64A2 D5      DCEQ  @YREG,@DUMPA
     64A3 62  
     64A4 2E  
0490 64A5 43      BR    MAKEDUMP
     64A6 DA  
0491 64A7 05      B     G@KW1
     64A8 63  
     64A9 E3
0492          
0493          
0494          
0495          ASKCONFIRM:
0496          ; Ask for confirmation. Clear a few rows to clarify
0497 64AA BE      ST   ' ',V@VEROFS
     64AB A0  
     64AC A0
     64AD 20  
0498 64AE 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64AF 02  
     64B0 5F
     64B1 A0  
     64B2 A1
     64B3 A0  
     64B4 A0
0499 64B5 08      FMT
0500 64B6 FF      COL LALIGN
     64B7 02  
0501 64B8 FE      ROW LAYOUTVER
     64B9 05  
0502 64BA 15      HTEX '!!PRESS 1 TO CONFIRM!!'
     64BB 21  
     64BC 21  
     64BD 50  
     64BE 52  
     64BF 45  
     64C0 53  
     64C1 53  
     64C2 20  
     64C3 31  
     64C4 20  
     64C5 54  
     64C6 4F  
     64C7 20  
     64C8 43  
     64C9 4F  
     64CA 4E  
     64CB 46  
     64CC 49  
     64CD 52  
     64CE 4D  
     64CF 21  
     64D0 21  
0503 64D1 FB      FEND
0504          WAIT0:
0505 64D2 03      SCAN
0506 64D3 44      BR    WAIT0
     64D4 D2  
0507 64D5 00      RTN
0508          
0509          DKEY1:
0510 64D6 A7      DSUB  64,@YREG
     64D7 2E  
     64D8 00  
     64D9 40
0511 64DA 05      B     MAKEDUMP
     64DB 63  
     64DC DA
0512          DKEY2:
0513 64DD A3      DADD  64,@YREG
     64DE 2E  
     64DF 00  
     64E0 40
0514 64E1 05      B     MAKEDUMP
     64E2 63  
     64E3 DA
0515          DKEY3:
0516 64E4 BE      ST   ' ',V@VEROFS
     64E5 A0  
     64E6 A0
     64E7 20  
0517 64E8 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64E9 02  
     64EA 5F
     64EB A0  
     64EC A1
     64ED A0  
     64EE A0
0518 64EF 05      B     SCREEN1
     64F0 60  
     64F1 A3
0519          DKEY0:      ; Burn to Flash
0520 64F2 06      CALL  G@ASKCONFIRM
     64F3 64  
     64F4 AA
0521 64F5 D6      CEQ   '1',@SCANKEY       is the key one?
     64F6 75  
     64F7 31  
0522 64F8 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     64F9 ED  
0523          ; Yes, continue to Flash the MCU
0524 64FA 04      BACK  >F3              screen colors: white on some other color
     64FB F3  
0525 64FC BE      ST    'F',V@VALIDIND    ; Command valid indicator
     64FD A0  
     64FE 83
     64FF 46  
0526 6500 BE      ST    6,@GCMDBYTE
     6501 40  
     6502 06  
0527 6503 BF      DST   >1234,@GCMDBYTE+2
     6504 42  
     6505 12  
     6506 34
0528 6507 87      DCLR  @GCMDBYTE+4
     6508 44  
0529 6509 87      DCLR  @GCMDBYTE+6
     650A 46  
0530 650B 06      CALL  ISSUECMD
     650C 62  
     650D A5
0531          ; We probably do not return from this call... GROMMY might be in a funny state
0532 650E 05      B     G@MAKEDUMP
     650F 63  
     6510 DA
0533          
0534          DKEY4:      ; Command to fill GRAM with >FF, all 24K
0535 6511 BF      DST   >FFFF,@PAD2   ; Fill value, 2 bytes
     6512 5E  
     6513 FF  
     6514 FF
0536 6515 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6516 A0  
     6517 83
     6518 2A  
0537 6519 87      DCLR  @PAD4
     651A 60  
0538 651B 2D  !   MOVE  2,@PAD2,G@0(@PAD4)    ; store to grom
     651C 00  
     651D 02
     651E 00  
     651F 00
     6520 60
     6521 5E  
0539 6522 95      DINCT @PAD4
     6523 60  
0540 6524 D7      DCEQ  >6000,@PAD4
     6525 60  
     6526 60  
     6527 00
0541 6528 45      BR    -!
     6529 1B  
0542 652A 06      CALL  CLEARVALID
     652B 65  
     652C 76
0543 652D 05      B     MAKEDUMP
     652E 63  
     652F DA
0544          
0545          DKEY5:
0546 6530 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6531 A0  
     6532 83
     6533 2A  
0547 6534 21      MOVE >2000,G@>8000,G@>0000
     6535 20  
     6536 00
     6537 00  
     6538 00
     6539 80  
     653A 00
0548 653B 21      MOVE >2000,G@>A000,G@>2000
     653C 20  
     653D 00
     653E 20  
     653F 00
     6540 A0  
     6541 00
0549 6542 21      MOVE >2000,G@>C000,G@>4000
     6543 20  
     6544 00
     6545 40  
     6546 00
     6547 C0  
     6548 00
0550 6549 06      CALL  CLEARVALID
     654A 65  
     654B 76
0551 654C 05      B     MAKEDUMP
     654D 63  
     654E DA
0552          
0553          DKEY6:      ; ARM execute at address X
0554 654F BD      DST   @XREG,@PAD0
     6550 5C  
     6551 2C  
0555 6552 B6      OR    >0100,@PAD0
     6553 5C  
     6554 00  
0556 6555 BD      DST   @PAD0,@GCMDBYTE+2   ; thumb bit high
     6556 42  
     6557 5C  
0557          DKEY6ASK:
0558 6558 06      CALL  G@ASKCONFIRM
     6559 64  
     655A AA
0559 655B D6      CEQ   '1',@SCANKEY       is the key one?
     655C 75  
     655D 31  
0560 655E 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     655F ED  
0561 6560 BE      ST    'F',V@VALIDIND    ; Command valid indicator
     6561 A0  
     6562 83
     6563 46  
0562 6564 BE      ST    7,@GCMDBYTE
     6565 40  
     6566 07  
0563 6567 87      DCLR  @GCMDBYTE+4
     6568 44  
0564 6569 87      DCLR  @GCMDBYTE+6
     656A 46  
0565 656B 06      CALL  ISSUECMD
     656C 62  
     656D A5
0566          ; We probably do not return from this call... GROMMY might be in a funny state
0567 656E 43      BR    MAKEDUMP
     656F DA  
0568          
0569          DKEY7:
0570 6570 BF      DST   >0140,@GCMDBYTE+2  ; ARM has different byte order
     6571 42  
     6572 01  
     6573 40
0571 6574 45      BR    DKEY6ASK
     6575 58  
0572          
0573          *----------------------------------------
0574          CLEARVALID:
0575 6576 BE      ST    ' ',V@VALIDIND
     6577 A0  
     6578 83
     6579 20  
0576 657A BE      ST    ' ',V@VALIDIND+1
     657B A0  
     657C 84
     657D 20  
0577 657E BE      ST    ' ',V@VALIDIND+2
     657F A0  
     6580 85
     6581 20  
0578 6582 BE      ST    ' ',V@VALIDIND+3
     6583 A0  
     6584 86
     6585 20  
0579 6586 00      RTN
0580          
0581          *----------------------------------------
0582          * Edit HEX
0583          * Number already dsiplayed with E0..EF or F0..FF.
0584          * Parameters:
0585          *   VRAMP points to the screen area.
0586          *   PAD2:PAD3 points to the value.
0587          *   PAD4 number of digits to edit. Must be even.
0588          *----------------------------------------
0589          EDITHEX:
0590 6587 86      CLR  @INDEX   ; current digit index
     6588 61  
0591          EWAIT:
0592 6589 03      SCAN
0593 658A 65      BS   EGOTKEY
     658B A8  
0594          ; No key. Flash the cursor pointed at VRAMP by copying bit 4 of frame counter
0595          ; to the character code.
0596 658C BC      ST   @VDPTIMER,@PAD0
     658D 5C  
     658E 79  
0597 658F B2      AND  >10,@PAD0
     6590 5C  
     6591 10  
0598 6592 BC      ST   V@0(@VRAMP),@PAD1
     6593 5D  
     6594 E0  
     6595 00
     6596 40
0599 6597 B2      AND  >EF,@PAD1
     6598 5D  
     6599 EF  
0600 659A B4      OR   @PAD1,@PAD0
     659B 5C  
     659C 5D  
0601 659D BC      ST  @PAD0,V@0(@VRAMP)
     659E E0  
     659F 00
     65A0 40
     65A1 5C  
0602 65A2 90      INC   V@PATADR
     65A3 AE  
     65A4 F8
0603 65A5 05      B    EWAIT
     65A6 65  
     65A7 89
0604          
0605          EGOTKEY:    ; We received a key. If it is '0' - '9' or 'A'-'F' it is a hex digit, thus edit.
0606 65A8 CE      CGT   '0'-1,@SCANKEY       ; greater than >= 0
     65A9 75  
     65AA 2F  
0607 65AB 45      BR    ENODIGIT             ; No -> ENODIGIT
     65AC E7  
0608 65AD CE      CGT   '9',@SCANKEY         ; Key greater than '9'?
     65AE 75  
     65AF 39  
0609 65B0 65      BS    CHECKAF
     65B1 D7  
0610 65B2 A6      SUB   '0',@SCANKEY         ; Here we have '0'-'9' make it 0-9
     65B3 75  
     65B4 30  
0611          GOTDIGIT:
0612 65B5 A2      ADD   HEXBASECH,@SCANKEY
     65B6 75  
     65B7 E0  
0613 65B8 BC      ST    @SCANKEY,V@0(@VRAMP)  ; Store digit into VRAM.
     65B9 E0  
     65BA 00
     65BB 40
     65BC 75  
0614 65BD 91      DINC  @VRAMP
     65BE 40  
0615 65BF 90      INC   @INDEX
     65C0 61  
0616 65C1 D4      CEQ   @INDEX,@PAD4          ; Index=number of digitss?
     65C2 60  
     65C3 61  
0617 65C4 45      BR    EWAIT                 ; No: get back to waiting next key
     65C5 89  
0618 65C6 06      CALL  BACK2BEGIN
     65C7 65  
     65C8 CC
0619 65C9 05      B     EWAIT                 ; Wait for next keypress
     65CA 65  
     65CB 89
0620          
0621          BACK2BEGIN:
0622 65CC B2      AND   >EF,V@0(VRAMP)        ; Yes: make sure no cursor show here.
     65CD E0  
     65CE 00
     65CF 40
     65D0 EF  
0623 65D1 A4      SUB   @INDEX,@VRAMP+1       ; Yes: Reset VRAMP back to beginning of number (BUGBUG: carry not handled!)
     65D2 41  
     65D3 61  
0624 65D4 86      CLR   @INDEX                ; Reset index
     65D5 61  
0625 65D6 00      RTN
0626          
0627          CHECKAF:                        ; Check if we have 'A'..'F'
0628 65D7 CE      CGT   'A'-1,@SCANKEY        ; >= 'A' ?
     65D8 75  
     65D9 40  
0629 65DA 45      BR    ENODIGIT              ; no: -> ENODIGIT
     65DB E7  
0630 65DC CE      CGT   'F',@SCANKEY          ; >= 'F' ?
     65DD 75  
     65DE 46  
0631 65DF 65      BS    ENODIGIT              ; Yes: -> ENODIGIT
     65E0 E7  
0632 65E1 A6      SUB   'A'-10,@SCANKEY       ; Make 'A' into 10
     65E2 75  
     65E3 37  
0633 65E4 05      B     GOTDIGIT              ; Display etc.
     65E5 65  
     65E6 B5
0634          
0635          ENODIGIT:                       ; Here we do not have digit 0-9, A-F
0636 65E7 D6      CEQ    13,@SCANKEY          ; Is it enter?
     65E8 75  
     65E9 0D  
0637 65EA 45      BR     EWAIT                ; No: get next key
     65EB 89  
0638          ; Here we have the digits in VRAM. Decode the number.
0639 65EC 06      CALL   BACK2BEGIN           ; Reset VRAMP to beginning of number
     65ED 65  
     65EE CC
0640 65EF BC  !   ST     V@0(@VRAMP),@PAD0    ; Get first digit
     65F0 5C  
     65F1 E0  
     65F2 00
     65F3 40
0641 65F4 B2      AND    >0F,@PAD0            ; Low 4 bits are the hex digit
     65F5 5C  
     65F6 0F  
0642 65F7 E2      SLL    4,@PAD0
     65F8 5C  
     65F9 04  
0643 65FA BC      ST     V@1(VRAMP),@PAD1     ; Get second digit
     65FB 5D  
     65FC E0  
     65FD 01
     65FE 40
0644 65FF B2      AND    >0F,@PAD1
     6600 5D  
     6601 0F  
0645 6602 B4      OR     @PAD1,@PAD0          ; Now PAD0 has the byte.
     6603 5C  
     6604 5D  
0646 6605 BC      ST     @PAD0,@0(@PAD2)      ; Store byte
     6606 CF  
     6607 7D
     6608 00
     6609 5E
     660A 5C  
0647 660B 94      INCT   @INDEX
     660C 61  
0648 660D 91      DINC   @PAD2
     660E 5E  
0649 660F 95      DINCT  @VRAMP
     6610 40  
0650 6611 D4      CEQ    @INDEX,@PAD4         ; Are we at the end, INDEX==COUNT?
     6612 60  
     6613 61  
0651 6614 45      BR     -!                   ; No, continue
     6615 EF  
0652 6616 A4      SUB    @INDEX,@PAD3         ; Reset PAD2:PAD3 pointer (BUGBUG no carry)
     6617 5F  
     6618 61  
0653 6619 06      CALL   BACK2BEGIN           ; Reset VRAMP
     661A 65  
     661B CC
0654 661C 00      RTN                         ; Done
0655          
0656          
0657          *----------------------------------------
0658          * Display in HEX the byte in PAD0
0659          *----------------------------------------
0660          HEXOUT:
0661 661D 0F    XML >F0       ; Jump via >8300
     661E F0  
0662 661F 00    RTN
0663          
0664          HEXOUT1:
0665 6620 BC      ST   @PAD0,@PAD4
     6621 60  
     6622 5C  
0666 6623 E6      SRL   >04,@PAD4       isolate first nibble
     6624 60  
     6625 04  
0667 6626 CE      CGT   >09,@PAD4       greater than 9?
     6627 60  
     6628 09  
0668 6629 66      BS    HEX1            yes
     662A 30  
0669 662B A2      ADD   >30,@PAD4       no: make it char 0-9
     662C 60  
     662D 30  
0670 662E 46      BR    HEX2
     662F 33  
0671 6630 A2  HEX1: ADD   >37,@PAD4      yes: make it char A-F
     6631 60  
     6632 37  
0672          HEX2:
0673          ; Output first hex digit (most significant digit)
0674 6633 BC      ST    @PAD4,V@0(@VRAMP)
     6634 E0  
     6635 00
     6636 40
     6637 60  
0675          ; Work on 2nd digit
0676 6638 BC      ST    @PAD0,@PAD4     copy number
     6639 60  
     663A 5C  
0677 663B B2      AND   >0F,@PAD4       isolate second nibble
     663C 60  
     663D 0F  
0678 663E CE      CGT   >09,@PAD4       greater than 9?
     663F 60  
     6640 09  
0679 6641 66      BS    HEX3          yes
     6642 48  
0680 6643 A2      ADD   >30,@PAD4       no: make it char 0-9
     6644 60  
     6645 30  
0681 6646 46      BR    HEX4
     6647 4B  
0682 6648 A2  HEX3  ADD   >37,@PAD4       yes: make it char A-F
     6649 60  
     664A 37  
0683          HEX4:
0684          ; Output 2nd hex digit (least significant digit)
0685 664B BC      ST    @PAD4,V@1(@VRAMP)
     664C E0  
     664D 01
     664E 40
     664F 60  
0686 6650 00      RTN
0687          
0688          * Use the new hex characters which do not have a gap between 9 and A
0689          HEXOUT2:
0690 6651 BC      ST   @PAD0,@PAD4
     6652 60  
     6653 5C  
0691 6654 BC      ST   @PAD0,@PAD5
     6655 61  
     6656 5C  
0692 6657 E6      SRL  >04,@PAD4       isolate first nibble
     6658 60  
     6659 04  
0693 665A B2      AND  >0F,@PAD5
     665B 61  
     665C 0F  
0694          TWINHEXBC EQU   (HEXBASECH * 256) + HEXBASECH
0695 665D A3      DADD TWINHEXBC,@PAD4
     665E 60  
     665F E0  
     6660 E0
0696 6661 BD      DST  @PAD4,V@0(VRAMP)
     6662 E0  
     6663 00
     6664 40
     6665 60  
0697 6666 01      RTNC
0698          
0699          *----------------------------------------
0700          * Read grommy2 version, update on screen.
0701          * Also read and set bank & shadow values.
0702          *----------------------------------------
0703          SHOW_VERSION
0704 6667 06      CALL G@GINITCMD
     6668 66  
     6669 CC
0705 666A 06      CALL G@GSENDCMD
     666B 66  
     666C D3
0706          * Check result of command - did we get OK?
0707 666D 31      MOVE 2,G@HWIF,@PAD0
     666E 00  
     666F 02
     6670 5C  
     6671 5F  
     6672 F0
0708 6673 D7      DCEQ >4F4B,@PAD0        ; did we get OK?
     6674 5C  
     6675 4F  
     6676 4B
0709 6677 66      BS   VER_OK             ; Yes: go to VER_OK
     6678 84  
0710          ** No grommy2 detected. Put in dummy data.
0711 6679 87      DCLR @PAD2              ; Major and minor zero
     667A 5E  
0712 667B BE      ST   99,@PAD4           ; Build 99
     667C 60  
     667D 63  
0713 667E 86      CLR  @SHADOW
     667F 51  
0714 6680 86      CLR  @BANK
     6681 50  
0715 6682 46      BR   VER1
     6683 A1  
0716          VER_OK:     ; grommy responded, read data
0717          * Copy values from GROM IF to pad
0718 6684 31      MOVE 3,G@HWIF+8,@PAD2
     6685 00  
     6686 03
     6687 5E  
     6688 5F  
     6689 F8
0719          * Get active bank from grommy2
0720 668A 31      MOVE 1,G@HWIF+3,@BANK
     668B 00  
     668C 01
     668D 50  
     668E 5F  
     668F F3
0721 6690 B2      AND  >0F,@BANK
     6691 50  
     6692 0F  
0722 6693 D6      CEQ  8,@BANK            ; Is GRAM bank 8 selected?
     6694 50  
     6695 08  
0723 6696 46      BR   NOGRAM1            ; No, we're good
     6697 9B  
0724 6698 BE      ST   3,@BANK            ; yes, convert to 3 here
     6699 50  
     669A 03  
0725          NOGRAM1:
0726          * Get RAM shadow from grommy2
0727 669B 31      MOVE 1,G@HWIF+4,@SHADOW
     669C 00  
     669D 01
     669E 51  
     669F 5F  
     66A0 F4
0728          VER1:
0729          * Show major version in p2
0730 66A1 BE      ST  '0',@PAD0
     66A2 5C  
     66A3 30  
0731 66A4 A0      ADD @PAD2,@PAD0
     66A5 5C  
     66A6 5E  
0732 66A7 BC      ST  @PAD0,V@VEROFS+>A        Write to VRAM
     66A8 A0  
     66A9 AA
     66AA 5C  
0733          * Show minor version in p3
0734 66AB BE      ST  '0',@PAD0
     66AC 5C  
     66AD 30  
0735 66AE A0      ADD @PAD3,@PAD0
     66AF 5C  
     66B0 5F  
0736 66B1 BC      ST  @PAD0,V@VEROFS+>C        Write to VRAM
     66B2 A0  
     66B3 AC
     66B4 5C  
0737          * Show build version in p4. The build is two digits from 0 to 99
0738 66B5 86      CLR  @PAD0              Zero fill as the value to divide is 16 bits§
     66B6 5C  
0739 66B7 BC      ST   @PAD4,@PAD1
     66B8 5D  
     66B9 60  
0740 66BA AE      DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
     66BB 5C  
     66BC 0A  
0741 66BD A2      ADD  '0',@PAD0
     66BE 5C  
     66BF 30  
0742 66C0 BC      ST   @PAD0,V@VEROFS+>E      Write to VRAM
     66C1 A0  
     66C2 AE
     66C3 5C  
0743 66C4 A2      ADD  '0',@PAD1          Remainder
     66C5 5D  
     66C6 30  
0744 66C7 BC      ST   @PAD1,V@VEROFS+>F      Write to VRAM
     66C8 A0  
     66C9 AF
     66CA 5D  
0745 66CB 00      RTN
0746          
0747          
0748          *----------------------------------------
0749          * Init command buffer in pad
0750          *----------------------------------------
0751          GINITCMD
0752 66CC 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
     66CD 00  
     66CE 10
     66CF 40  
     66D0 66  
     66D1 E0
0753 66D2 00         RTN
0754          
0755          *----------------------------------------
0756          * Send command to grommy2
0757          *----------------------------------------
0758          GSENDCMD
0759 66D3 BC         ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
     66D4 41  
     66D5 40  
0760 66D6 BA         XOR   >FF,@GCMDBYTE+1
     66D7 41  
     66D8 FF  
0761 66D9 25         MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
     66DA 00  
     66DB 10
     66DC 5F  
     66DD F0
     66DE 40  
0762 66DF 00         RTN
0763          
0764          
0765          GROMMY_DAT
0766 66E0 00         DATA   >00FF,>003F,>0000,>0000
     66E1 FF
     66E2 00  
     66E3 3F
     66E4 00  
     66E5 00
     66E6 00  
     66E7 00
0767 66E8 45         TEXT 'EPGROMMY'
     66E9 50  
     66EA 47  
     66EB 52  
     66EC 4F  
     66ED 4D  
     66EE 4D  
     66EF 59  
0768          
0769          
0770          DENSE_FONT ; Define character cells wihtin 4x8 cell
0771          ; Numnbers 0 and 1
0772 66F0 22          BYTE >22
0773 66F1 56          BYTE >56
0774 66F2 52          BYTE >52
0775 66F3 52          BYTE >52
0776 66F4 52          BYTE >52
0777 66F5 52          BYTE >52
0778 66F6 27          BYTE >27
0779 66F7 00          BYTE >00
0780          ; Define a cell with 2 and 3
0781 66F8 26          BYTE >26
0782 66F9 51          BYTE >51
0783 66FA 11          BYTE >11
0784 66FB 26          BYTE >26
0785 66FC 41          BYTE >41
0786 66FD 41          BYTE >41
0787 66FE 76          BYTE >76
0788 66FF 00          BYTE >00
0789          ; Define a cell with 4 and 5
0790 6700 17          BYTE >17
0791 6701 34          BYTE >34
0792 6702 54          BYTE >54
0793 6703 76          BYTE >76
0794 6704 11          BYTE >11
0795 6705 11          BYTE >11
0796 6706 16          BYTE >16
0797 6707 00          BYTE >00
0798          ; Define a cell with 6 and 7
0799 6708 37          BYTE >37
0800 6709 41          BYTE >41
0801 670A 62          BYTE >62
0802 670B 52          BYTE >52
0803 670C 52          BYTE >52
0804 670D 52          BYTE >52
0805 670E 22          BYTE >22
0806 670F 00          BYTE >00
0807          ; Define a cell with 8 and 9
0808 6710 22          BYTE >22
0809 6711 55          BYTE >55
0810 6712 55          BYTE >55
0811 6713 23          BYTE >23
0812 6714 51          BYTE >51
0813 6715 51          BYTE >51
0814 6716 26          BYTE >26
0815 6717 00          BYTE >00
0816          ; Define a cell with A and B
0817 6718 26          BYTE >26
0818 6719 55          BYTE >55
0819 671A 55          BYTE >55
0820 671B 76          BYTE >76
0821 671C 55          BYTE >55
0822 671D 55          BYTE >55
0823 671E 56          BYTE >56
0824 671F 00          BYTE >00
0825          ; Define a cell with C and D
0826 6720 36          BYTE >36
0827 6721 45          BYTE >45
0828 6722 45          BYTE >45
0829 6723 45          BYTE >45
0830 6724 45          BYTE >45
0831 6725 45          BYTE >45
0832 6726 36          BYTE >36
0833 6727 00          BYTE >00
0834          ; Define a cell with E and F
0835 6728 77          BYTE >77
0836 6729 44          BYTE >44
0837 672A 44          BYTE >44
0838 672B 66          BYTE >66
0839 672C 44          BYTE >44
0840 672D 44          BYTE >44
0841 672E 74          BYTE >74
0842 672F 00          BYTE >00
0843          
0844          * Test code copied from Mini Memory
0845 6730 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
     6731 00  
     6732 10
     6733 40  
     6734 66  
     6735 E0
0846 6736 BC         ST    @>839A,@>8340                Copy command byte
     6737 40  
     6738 80  
     6739 9A
0847 673A BC         ST    @>839A,@>8341                The second byte is its complement
     673B 41  
     673C 80  
     673D 9A
0848 673E BA         XOR   >FF,@>8341
     673F 41  
     6740 FF  
0849 6741 BC         ST    @>839B,@>8342                Copy p2.
     6742 42  
     6743 80  
     6744 9B
0850 6745 25         MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
     6746 00  
     6747 10
     6748 5F  
     6749 F0
     674A 40  
0851 674B 00         RTN
0852          
0853              copy 'bin2hex.gpl'
              > bin2hex.gpl
0001          * bin2gpl.py output to bin2hex.gpl
0002          * Sun Jul 28 10:43:06 2024
0003          * Binary data
0004          BINDATA:
0005 674C 83    DATA >8302
     674D 02
0006 674E D0    DATA >d060
     674F 60
0007 6750 83    DATA >835c
     6751 5C
0008 6752 09    DATA >0941
     6753 41
0009 6754 02    DATA >0221
     6755 21
0010 6756 E0    DATA >e000
     6757 00
0011 6758 DB    DATA >dbc1
     6759 C1
0012 675A FF    DATA >fffe
     675B FE
0013 675C D0    DATA >d060
     675D 60
0014 675E 83    DATA >835c
     675F 5C
0015 6760 02    DATA >0241
     6761 41
0016 6762 0F    DATA >0f00
     6763 00
0017 6764 02    DATA >0221
     6765 21
0018 6766 E0    DATA >e000
     6767 00
0019 6768 DB    DATA >dbc1
     6769 C1
0020 676A FF    DATA >fffe
     676B FE
0021 676C 04    DATA >045b
     676D 5B
0022          BINLEN EQU >22   ; 34
0023          
              > config.gpl
0854          
0855          *----------------------------------------
0856          * VDP setup for module
0857          *----------------------------------------
0858          GVDPSETUP
0859 676E BE      ST    >D0,V@>0300      no sprites
     676F A3  
     6770 00
     6771 D0  
0860 6772 BE      ST    >F5,V@>0380      init color table as white on blue for all chars
     6773 A3  
     6774 80
     6775 F5  
0861 6776 35      MOVE  >001F,V@>0380,V@>0381
     6777 00  
     6778 1F
     6779 A3  
     677A 81
     677B A3  
     677C 80
0862 677D 07      ALL   >20              erase screen
     677E 20  
0863 677F 04      BACK  >F5              screen colors: white on light blue
     6780 F5  
0864 6781 00      RTN
0865          
0866              COPY 'screen.gpl'
              > screen.gpl
0001          * Character definitions
0002 6782 00  GUDG96	BYTE >00,>00,>00,>00,>00,>00,>00,>00 ; Character 96
     6783 00  
     6784 00  
     6785 00  
     6786 00  
     6787 00  
     6788 00  
     6789 00  
0003 678A 00  GUDG97	BYTE >00,>00,>70,>43,>72,>42,>42,>72 ; Character 97
     678B 00  
     678C 70  
     678D 43  
     678E 72  
     678F 42  
     6790 42  
     6791 72  
0004 6792 00  GUDG98	BYTE >00,>28,>08,>A9,>2A,>2E,>2B,>29 ; Character 98
     6793 28  
     6794 08  
     6795 A9  
     6796 2A  
     6797 2E  
     6798 2B  
     6799 29  
0005 679A 00  GUDG99	BYTE >00,>00,>0F,>09,>09,>0E,>08,>08 ; Character 99
     679B 00  
     679C 0F  
     679D 09  
     679E 09  
     679F 0E  
     67A0 08  
     67A1 08  
0006 67A2 00  GUDG100	BYTE >00,>40,>00,>46,>49,>4F,>48,>46 ; Character 100
     67A3 40  
     67A4 00  
     67A5 46  
     67A6 49  
     67A7 4F  
     67A8 48  
     67A9 46  
0007 67AA 00  GUDG101	BYTE >00,>41,>41,>79,>49,>49,>49,>49 ; Character 101
     67AB 41  
     67AC 41  
     67AD 79  
     67AE 49  
     67AF 49  
     67B0 49  
     67B1 49  
0008 67B2 00  GUDG102	BYTE >00,>40,>40,>1C,>10,>0C,>06,>1C ; Character 102
     67B3 40  
     67B4 40  
     67B5 1C  
     67B6 10  
     67B7 0C  
     67B8 06  
     67B9 1C  
0009 67BA 00  GUDG103	BYTE >00,>00,>00,>00,>00,>00,>1C,>3F ; Character 103
     67BB 00  
     67BC 00  
     67BD 00  
     67BE 00  
     67BF 00  
     67C0 1C  
     67C1 3F  
0010 67C2 00  GUDG104	BYTE >00,>00,>00,>00,>00,>00,>00,>3F ; Character 104
     67C3 00  
     67C4 00  
     67C5 00  
     67C6 00  
     67C7 00  
     67C8 00  
     67C9 3F  
0011 67CA 00  GUDG105	BYTE >00,>00,>00,>00,>00,>00,>00,>9C ; Character 105
     67CB 00  
     67CC 00  
     67CD 00  
     67CE 00  
     67CF 00  
     67D0 00  
     67D1 9C  
0012 67D2 00  GUDG106	BYTE >00,>00,>00,>00,>00,>00,>07,>3F ; Character 106
     67D3 00  
     67D4 00  
     67D5 00  
     67D6 00  
     67D7 00  
     67D8 07  
     67D9 3F  
0013 67DA 00  GUDG107	BYTE >00,>00,>00,>00,>00,>00,>00,>F0 ; Character 107
     67DB 00  
     67DC 00  
     67DD 00  
     67DE 00  
     67DF 00  
     67E0 00  
     67E1 F0  
0014 67E2 00  GUDG108	BYTE >00,>00,>00,>00,>00,>00,>06,>9F ; Character 108
     67E3 00  
     67E4 00  
     67E5 00  
     67E6 00  
     67E7 00  
     67E8 06  
     67E9 9F  
0015 67EA 00  GUDG109	BYTE >00,>00,>00,>00,>00,>00,>03,>8F ; Character 109
     67EB 00  
     67EC 00  
     67ED 00  
     67EE 00  
     67EF 00  
     67F0 03  
     67F1 8F  
0016 67F2 00  GUDG110	BYTE >00,>00,>00,>00,>00,>00,>00,>C7 ; Character 110
     67F3 00  
     67F4 00  
     67F5 00  
     67F6 00  
     67F7 00  
     67F8 00  
     67F9 C7  
0017 67FA 00  GUDG111	BYTE >00,>00,>00,>00,>00,>00,>00,>F3 ; Character 111
     67FB 00  
     67FC 00  
     67FD 00  
     67FE 00  
     67FF 00  
     6800 00  
     6801 F3  
0018 6802 00  GUDG112	BYTE >00,>00,>00,>00,>00,>00,>C0,>F1 ; Character 112
     6803 00  
     6804 00  
     6805 00  
     6806 00  
     6807 00  
     6808 C0  
     6809 F1  
0019 680A 00  GUDG113	BYTE >00,>00,>00,>00,>00,>00,>60,>F8 ; Character 113
     680B 00  
     680C 00  
     680D 00  
     680E 00  
     680F 00  
     6810 60  
     6811 F8  
0020 6812 00  GUDG114	BYTE >00,>00,>00,>00,>00,>00,>00,>FC ; Character 114
     6813 00  
     6814 00  
     6815 00  
     6816 00  
     6817 00  
     6818 00  
     6819 FC  
0021 681A 00  GUDG115	BYTE >00,>03,>0F,>1F,>3F,>3F,>7F,>7E ; Character 115
     681B 03  
     681C 0F  
     681D 1F  
     681E 3F  
     681F 3F  
     6820 7F  
     6821 7E  
0022 6822 00  GUDG116	BYTE >00,>F0,>FC,>FE,>FF,>FF,>3F,>3F ; Character 116
     6823 F0  
     6824 FC  
     6825 FE  
     6826 FF  
     6827 FF  
     6828 3F  
     6829 3F  
0023 682A 00  GUDG117	BYTE >00,>00,>00,>00,>00,>80,>80,>80 ; Character 117
     682B 00  
     682C 00  
     682D 00  
     682E 00  
     682F 80  
     6830 80  
     6831 80  
0024 6832 7F  GUDG118	BYTE >7F,>FF,>FF,>FE,>FE,>FE,>FE,>FE ; Character 118
     6833 FF  
     6834 FF  
     6835 FE  
     6836 FE  
     6837 FE  
     6838 FE  
     6839 FE  
0025 683A FF  GUDG119	BYTE >FF,>FF,>FF,>7F,>7F,>7F,>7F,>7F ; Character 119
     683B FF  
     683C FF  
     683D 7F  
     683E 7F  
     683F 7F  
     6840 7F  
     6841 7F  
0026 6842 3F  GUDG120	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>3F,>3F ; Character 120
     6843 3F  
     6844 3F  
     6845 3F  
     6846 3F  
     6847 3F  
     6848 3F  
     6849 3F  
0027 684A BC  GUDG121	BYTE >BC,>FC,>FC,>FD,>FD,>FD,>F9,>C1 ; Character 121
     684B FC  
     684C FC  
     684D FD  
     684E FD  
     684F FD  
     6850 F9  
     6851 C1  
0028 6852 7F  GUDG122	BYTE >7F,>FF,>FF,>FC,>FC,>FC,>FC,>FC ; Character 122
     6853 FF  
     6854 FF  
     6855 FC  
     6856 FC  
     6857 FC  
     6858 FC  
     6859 FC  
0029 685A F8  GUDG123	BYTE >F8,>FC,>FE,>FE,>FE,>FE,>FE,>FE ; Character 123
     685B FC  
     685C FE  
     685D FE  
     685E FE  
     685F FE  
     6860 FE  
     6861 FE  
0030 6862 FF  GUDG124	BYTE >FF,>FF,>FF,>9F,>9F,>9F,>9F,>9F ; Character 124
     6863 FF  
     6864 FF  
     6865 9F  
     6866 9F  
     6867 9F  
     6868 9F  
     6869 9F  
0031 686A DF  GUDG125	BYTE >DF,>FF,>FF,>E7,>C7,>C7,>C7,>C7 ; Character 125
     686B FF  
     686C FF  
     686D E7  
     686E C7  
     686F C7  
     6870 C7  
     6871 C7  
0032 6872 E7  GUDG126	BYTE >E7,>E7,>E7,>F7,>F7,>F7,>F7,>F7 ; Character 126
     6873 E7  
     6874 E7  
     6875 F7  
     6876 F7  
     6877 F7  
     6878 F7  
     6879 F7  
0033 687A FF  GUDG127	BYTE >FF,>FF,>FF,>F3,>F3,>F3,>F3,>F3 ; Character 127
     687B FF  
     687C FF  
     687D F3  
     687E F3  
     687F F3  
     6880 F3  
     6881 F3  
0034 6882 FB  GUDG128	BYTE >FB,>FF,>FF,>FC,>F8,>F8,>F8,>F8 ; Character 128
     6883 FF  
     6884 FF  
     6885 FC  
     6886 F8  
     6887 F8  
     6888 F8  
     6889 F8  
0035 688A FC  GUDG129	BYTE >FC,>FC,>FC,>FE,>FE,>FE,>FE,>FE ; Character 129
     688B FC  
     688C FC  
     688D FE  
     688E FE  
     688F FE  
     6890 FE  
     6891 FE  
0036 6892 FE  GUDG130	BYTE >FE,>FE,>7E,>7E,>7E,>7E,>7E,>3F ; Character 130
     6893 FE  
     6894 7E  
     6895 7E  
     6896 7E  
     6897 7E  
     6898 7E  
     6899 3F  
0037 689A 3F  GUDG131	BYTE >3F,>7F,>7F,>7F,>7E,>7E,>7E,>7E ; Character 131
     689B 7F  
     689C 7F  
     689D 7F  
     689E 7E  
     689F 7E  
     68A0 7E  
     68A1 7E  
0038 68A2 7E  GUDG132	BYTE >7E,>7E,>7E,>00,>00,>00,>00,>01 ; Character 132
     68A3 7E  
     68A4 7E  
     68A5 00  
     68A6 00  
     68A7 00  
     68A8 00  
     68A9 01  
0039 68AA 3F  GUDG133	BYTE >3F,>3F,>3F,>7F,>7F,>FF,>FF,>FE ; Character 133
     68AB 3F  
     68AC 3F  
     68AD 7F  
     68AE 7F  
     68AF FF  
     68B0 FF  
     68B1 FE  
0040 68B2 80  GUDG134	BYTE >80,>80,>80,>80,>00,>00,>00,>00 ; Character 134
     68B3 80  
     68B4 80  
     68B5 80  
     68B6 00  
     68B7 00  
     68B8 00  
     68B9 00  
0041 68BA FE  GUDG135	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FF ; Character 135
     68BB FE  
     68BC FE  
     68BD FE  
     68BE FE  
     68BF FE  
     68C0 FE  
     68C1 FF  
0042 68C2 7F  GUDG136	BYTE >7F,>7F,>7F,>7F,>7F,>7F,>7F,>FF ; Character 136
     68C3 7F  
     68C4 7F  
     68C5 7F  
     68C6 7F  
     68C7 7F  
     68C8 7F  
     68C9 FF  
0043 68CA C1  GUDG137	BYTE >C1,>81,>81,>81,>81,>81,>81,>81 ; Character 137
     68CB 81  
     68CC 81  
     68CD 81  
     68CE 81  
     68CF 81  
     68D0 81  
     68D1 81  
0044 68D2 FC  GUDG138	BYTE >FC,>FC,>FC,>FC,>FC,>FC,>FC,>FC ; Character 138
     68D3 FC  
     68D4 FC  
     68D5 FC  
     68D6 FC  
     68D7 FC  
     68D8 FC  
     68D9 FC  
0045 68DA FE  GUDG139	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FE ; Character 139
     68DB FE  
     68DC FE  
     68DD FE  
     68DE FE  
     68DF FE  
     68E0 FE  
     68E1 FE  
0046 68E2 9F  GUDG140	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>9F,>9F ; Character 140
     68E3 9F  
     68E4 9F  
     68E5 9F  
     68E6 9F  
     68E7 9F  
     68E8 9F  
     68E9 9F  
0047 68EA C7  GUDG141	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>C7,>C7 ; Character 141
     68EB C7  
     68EC C7  
     68ED C7  
     68EE C7  
     68EF C7  
     68F0 C7  
     68F1 C7  
0048 68F2 F7  GUDG142	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>F7,>F7 ; Character 142
     68F3 F7  
     68F4 F7  
     68F5 F7  
     68F6 F7  
     68F7 F7  
     68F8 F7  
     68F9 F7  
0049 68FA F3  GUDG143	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>F3,>F3 ; Character 143
     68FB F3  
     68FC F3  
     68FD F3  
     68FE F3  
     68FF F3  
     6900 F3  
     6901 F3  
0050 6902 F8  GUDG144	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>F8,>F8 ; Character 144
     6903 F8  
     6904 F8  
     6905 F8  
     6906 F8  
     6907 F8  
     6908 F8  
     6909 F8  
0051 690A 3F  GUDG145	BYTE >3F,>3F,>3F,>3F,>1F,>1F,>1F,>1F ; Character 145
     690B 3F  
     690C 3F  
     690D 3F  
     690E 1F  
     690F 1F  
     6910 1F  
     6911 1F  
0052 6912 7E  GUDG146	BYTE >7E,>7E,>7E,>7E,>FC,>FC,>FC,>FC ; Character 146
     6913 7E  
     6914 7E  
     6915 7E  
     6916 FC  
     6917 FC  
     6918 FC  
     6919 FC  
0053 691A 01  GUDG147	BYTE >01,>03,>07,>07,>0F,>0F,>1F,>3F ; Character 147
     691B 03  
     691C 07  
     691D 07  
     691E 0F  
     691F 0F  
     6920 1F  
     6921 3F  
0054 6922 FC  GUDG148	BYTE >FC,>FC,>F8,>F8,>F0,>E0,>E0,>C0 ; Character 148
     6923 FC  
     6924 F8  
     6925 F8  
     6926 F0  
     6927 E0  
     6928 E0  
     6929 C0  
0055 692A 7F  GUDG149	BYTE >7F,>7F,>3F,>00,>FE,>FE,>FF,>7F ; Character 149
     692B 7F  
     692C 3F  
     692D 00  
     692E FE  
     692F FE  
     6930 FF  
     6931 7F  
0056 6932 FF  GUDG150	BYTE >FF,>FF,>7F,>7F,>7F,>7F,>FF,>FE ; Character 150
     6933 FF  
     6934 7F  
     6935 7F  
     6936 7F  
     6937 7F  
     6938 FF  
     6939 FE  
0057 693A 3F  GUDG151	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>00,>00 ; Character 151
     693B 3F  
     693C 3F  
     693D 3F  
     693E 3F  
     693F 3F  
     6940 00  
     6941 00  
0058 6942 81  GUDG152	BYTE >81,>81,>80,>80,>80,>80,>00,>00 ; Character 152
     6943 81  
     6944 80  
     6945 80  
     6946 80  
     6947 80  
     6948 00  
     6949 00  
0059 694A FC  GUDG153	BYTE >FC,>FC,>FF,>FF,>7F,>1F,>00,>00 ; Character 153
     694B FC  
     694C FF  
     694D FF  
     694E 7F  
     694F 1F  
     6950 00  
     6951 00  
0060 6952 FE  GUDG154	BYTE >FE,>FE,>FC,>FC,>F8,>E0,>00,>00 ; Character 154
     6953 FE  
     6954 FC  
     6955 FC  
     6956 F8  
     6957 E0  
     6958 00  
     6959 00  
0061 695A 9F  GUDG155	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>00,>00 ; Character 155
     695B 9F  
     695C 9F  
     695D 9F  
     695E 9F  
     695F 9F  
     6960 00  
     6961 00  
0062 6962 C7  GUDG156	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>00,>00 ; Character 156
     6963 C7  
     6964 C7  
     6965 C7  
     6966 C7  
     6967 C7  
     6968 00  
     6969 00  
0063 696A F7  GUDG157	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>00,>00 ; Character 157
     696B F7  
     696C F7  
     696D F7  
     696E F7  
     696F F7  
     6970 00  
     6971 00  
0064 6972 F3  GUDG158	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>00,>00 ; Character 158
     6973 F3  
     6974 F3  
     6975 F3  
     6976 F3  
     6977 F3  
     6978 00  
     6979 00  
0065 697A F8  GUDG159	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>00,>00 ; Character 159
     697B F8  
     697C F8  
     697D F8  
     697E F8  
     697F F8  
     6980 00  
     6981 00  
0066 6982 FE  GUDG160	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>00,>00 ; Character 160
     6983 FE  
     6984 FE  
     6985 FE  
     6986 FE  
     6987 FE  
     6988 00  
     6989 00  
0067 698A 1F  GUDG161	BYTE >1F,>0F,>0F,>0F,>0F,>1F,>3F,>3F ; Character 161
     698B 0F  
     698C 0F  
     698D 0F  
     698E 0F  
     698F 1F  
     6990 3F  
     6991 3F  
0068 6992 FC  GUDG162	BYTE >FC,>FC,>FC,>FC,>F8,>F8,>F8,>F0 ; Character 162
     6993 FC  
     6994 FC  
     6995 FC  
     6996 F8  
     6997 F8  
     6998 F8  
     6999 F0  
0069 699A 3F  GUDG163	BYTE >3F,>7F,>7F,>7F,>7F,>7F,>00,>00 ; Character 163
     699B 7F  
     699C 7F  
     699D 7F  
     699E 7F  
     699F 7F  
     69A0 00  
     69A1 00  
0070 69A2 80  GUDG164	BYTE >80,>FF,>FF,>FF,>FF,>FF,>00,>00 ; Character 164
     69A3 FF  
     69A4 FF  
     69A5 FF  
     69A6 FF  
     69A7 FF  
     69A8 00  
     69A9 00  
0071 69AA 00  GUDG165	BYTE >00,>00,>80,>80,>80,>80,>00,>00 ; Character 165
     69AB 00  
     69AC 80  
     69AD 80  
     69AE 80  
     69AF 80  
     69B0 00  
     69B1 00  
0072 69B2 3F  GUDG166	BYTE >3F,>0F,>00,>00,>00,>00,>00,>00 ; Character 166
     69B3 0F  
     69B4 00  
     69B5 00  
     69B6 00  
     69B7 00  
     69B8 00  
     69B9 00  
0073 69BA FC  GUDG167	BYTE >FC,>F0,>00,>00,>00,>00,>00,>00 ; Character 167
     69BB F0  
     69BC 00  
     69BD 00  
     69BE 00  
     69BF 00  
     69C0 00  
     69C1 00  
0074 69C2 3F  GUDG168	BYTE >3F,>00,>00,>00,>00,>00,>00,>00 ; Character 168
     69C3 00  
     69C4 00  
     69C5 00  
     69C6 00  
     69C7 00  
     69C8 00  
     69C9 00  
0075 69CA E0  GUDG169	BYTE >E0,>00,>00,>00,>00,>00,>00,>00 ; Character 169
     69CB 00  
     69CC 00  
     69CD 00  
     69CE 00  
     69CF 00  
     69D0 00  
     69D1 00  
0076 69D2 3E  GUDG170	BYTE >3E,>60,>60,>60,>60,>60,>32,>1E ; Character 170
     69D3 60  
     69D4 60  
     69D5 60  
     69D6 60  
     69D7 60  
     69D8 32  
     69D9 1E  
0077 69DA 3E  GUDG171	BYTE >3E,>66,>43,>C3,>43,>62,>76,>3C ; Character 171
     69DB 66  
     69DC 43  
     69DD C3  
     69DE 43  
     69DF 62  
     69E0 76  
     69E1 3C  
0078 69E2 63  GUDG172	BYTE >63,>73,>7B,>6F,>6F,>67,>67,>63 ; Character 172
     69E3 73  
     69E4 7B  
     69E5 6F  
     69E6 6F  
     69E7 67  
     69E8 67  
     69E9 63  
0079 69EA 7C  GUDG173	BYTE >7C,>60,>60,>7C,>60,>60,>60,>60 ; Character 173
     69EB 60  
     69EC 60  
     69ED 7C  
     69EE 60  
     69EF 60  
     69F0 60  
     69F1 60  
0080 69F2 C7  GUDG174	BYTE >C7,>CC,>CC,>CC,>CC,>CC,>CE,>C7 ; Character 174
     69F3 CC  
     69F4 CC  
     69F5 CC  
     69F6 CC  
     69F7 CC  
     69F8 CE  
     69F9 C7  
0081 69FA C0  GUDG175	BYTE >C0,>00,>00,>C0,>E0,>60,>E0,>C0 ; Character 175
     69FB 00  
     69FC 00  
     69FD C0  
     69FE E0  
     69FF 60  
     6A00 E0  
     6A01 C0  
0082 6A02 61  GLINE0_25 BYTE >61,>62,>63,>64,>65,>66,>67,>68,>68,>69,>6A,>6B,>68,>6C,>6D,>6E,>6F,>70,>71,>72,>68,>73,>74,>75
     6A03 62  
     6A04 63  
     6A05 64  
     6A06 65  
     6A07 66  
     6A08 67  
     6A09 68  
     6A0A 68  
     6A0B 69  
     6A0C 6A  
     6A0D 6B  
     6A0E 68  
     6A0F 6C  
     6A10 6D  
     6A11 6E  
     6A12 6F  
     6A13 70  
     6A14 71  
     6A15 72  
     6A16 68  
     6A17 73  
     6A18 74  
     6A19 75  
0083 6A1A 76  GLINE1_25 BYTE >76,>77,>78,>79,>7A,>7B,>78,>7C,>7D,>7E,>7F,>80,>81,>82,>83,>84,>85,>86
     6A1B 77  
     6A1C 78  
     6A1D 79  
     6A1E 7A  
     6A1F 7B  
     6A20 78  
     6A21 7C  
     6A22 7D  
     6A23 7E  
     6A24 7F  
     6A25 80  
     6A26 81  
     6A27 82  
     6A28 83  
     6A29 84  
     6A2A 85  
     6A2B 86  
0084 6A2C 87  GLINE2_24 BYTE >87,>88,>78,>89,>8A,>8B,>78,>8C,>8D,>8E,>8F,>90,>8B,>91,>92,>93,>94
     6A2D 88  
     6A2E 78  
     6A2F 89  
     6A30 8A  
     6A31 8B  
     6A32 78  
     6A33 8C  
     6A34 8D  
     6A35 8E  
     6A36 8F  
     6A37 90  
     6A38 8B  
     6A39 91  
     6A3A 92  
     6A3B 93  
     6A3C 94  
0085 6A3D 95  GLINE3_25 BYTE >95,>96,>97,>98,>99,>9A,>97,>9B,>9C,>9D,>9E,>9F,>A0,>A1,>A2,>A3,>A4,>A5
     6A3E 96  
     6A3F 97  
     6A40 98  
     6A41 99  
     6A42 9A  
     6A43 97  
     6A44 9B  
     6A45 9C  
     6A46 9D  
     6A47 9E  
     6A48 9F  
     6A49 A0  
     6A4A A1  
     6A4B A2  
     6A4C A3  
     6A4D A4  
     6A4E A5  
0086 6A4F A6  GLINE4_9 BYTE >A6,>A7
     6A50 A7  
0087 6A51 A8  GLINE4_28 BYTE >A8,>A9,>AA,>AB,>AC,>AD,>AE,>AF
     6A52 A9  
     6A53 AA  
     6A54 AB  
     6A55 AC  
     6A56 AD  
     6A57 AE  
     6A58 AF  
0088          
0089          G_SCR1
0090 6A59 31      MOVE >0280,G@GUDG96,V@>0B00 ; Copy our screen chars
     6A5A 02  
     6A5B 80
     6A5C AB  
     6A5D 00
     6A5E 67  
     6A5F 82
0091          
0092 6A60 31  	MOVE >0018,G@GLINE0_25,V@>0001
     6A61 00  
     6A62 18
     6A63 A0  
     6A64 01
     6A65 6A  
     6A66 02
0093 6A67 31  	MOVE >0012,G@GLINE1_25,V@>0027
     6A68 00  
     6A69 12
     6A6A A0  
     6A6B 27
     6A6C 6A  
     6A6D 1A
0094 6A6E 31  	MOVE >0011,G@GLINE2_24,V@>0047
     6A6F 00  
     6A70 11
     6A71 A0  
     6A72 47
     6A73 6A  
     6A74 2C
0095 6A75 31  	MOVE >0012,G@GLINE3_25,V@>0067
     6A76 00  
     6A77 12
     6A78 A0  
     6A79 67
     6A7A 6A  
     6A7B 3D
0096 6A7C 31  	MOVE >0002,G@GLINE4_9,V@>0087
     6A7D 00  
     6A7E 02
     6A7F A0  
     6A80 87
     6A81 6A  
     6A82 4F
0097 6A83 31  	MOVE >0008,G@GLINE4_28,V@>0094
     6A84 00  
     6A85 08
     6A86 A0  
     6A87 94
     6A88 6A  
     6A89 51
0098          
0099 6A8A 00      RTN
0100          
