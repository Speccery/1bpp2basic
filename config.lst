XGA99 CROSS-ASSEMBLER   VERSION 3.0.1
              > config.gpl
0001          * config.gpl
0002          * Configurator for GROMMY2
0003          * At this point this is just a demo how to render the generated screen.gpl
0004          * EP 2023-11-26
0005          *
0006          * Compile the GPL code to binary with:
0007          * xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
0008          * output file is config.bin, since the filename ends with g it is treated
0009          * by an emulator such as js99er.net as a GROM file.
0010          *
0011          * This file includes the screen.gpl file at the very end.
0012          *
0013          
0014          LALIGN    EQU >02              Left alignment of text
0015          LALIGN2   EQU >03
0016          LAYOUTVER EQU 5         Row for Version number
0017          LAYOUTBAN EQU 8        Row for selected bank display
0018          VEROFS    EQU 32*LAYOUTVER
0019          VALIDIND  EQU VEROFS-29         ; Indicator for valid command
0020          VRAMDUMPAREA EQU VEROFS+224+32
0021          
0022          * A few variables for the grommy2 config to use.
0023          * I am not sure if these are free to use, but I will try :)
0024          XREG    EQU >832C   ; ** Program text or token pointer (in BASIC?)
0025          YREG    EQU >832E   ; ** Pointer to line number tale (in BASIC)
0026          ZREG    EQU >8330   ; ** Start of line number table pointer (in BASIC)
0027          ; >8332 .. 8337 seem to contain pointers also used by BASIC not GPL
0028          
0029          * Grommy2 command buffer in scratchpad
0030          GCMDBYTE EQU >8340
0031          GCMDP2   EQU >8342
0032          GCMDP3   EQU >8343
0033          GCMDP4   EQU >8344
0034          GCMDP5   EQU >8345
0035          GCMDP6   EQU >8346
0036          GCMDP7   EQU >8347
0037          
0038          BANK    EQU >8350           Active bank
0039          SHADOW  EQU >8351           Shadow enable / disable
0040          PAD0    EQU >835C
0041          PAD1    EQU >835D
0042          PAD2    EQU >835E
0043          PAD3    EQU >835F
0044          PAD4    EQU >8360
0045          PAD5    EQU >8361
0046          INDEX   EQU PAD5
0047          DUMPA   EQU >8362           ; GROM Dump address
0048          VRAMP   EQU >8340           ; VRAM ptr overlays GCMDBYTE
0049          
0050          DSP     EQU >8372           ; GPL data stack pointer
0051          SCANKEY EQU >8375
0052          VDPTIMER EQU >8379          ; Incremented by VDP interrupts
0053          * Hardware interface address
0054          HWIF     EQU >5FF0
0055          
0056          HEXBASECH EQU >E0         ; Base character for hex display
0057          ALIVECH   EQU >DF         ; Placed in top right corner, show we are alive
0058          
0059          
0060 6000 AA  G6000  DATA >AA01             standard header  version 1
     6001 01
0061 6002 00         DATA >0000             # of programs 0
     6003 00
0062 6004 00         DATA >0000             no power up
     6005 00
0063 6006 60         DATA G6010             program
     6007 10
0064 6008 00         DATA >0000             DSRs
     6009 00
0065 600A 00         DATA >0000             subprograms
     600B 00
0066 600C 00         DATA >0000
     600D 00
0067 600E 00         DATA >0000
     600F 00
0068          
0069 6010 00  G6010  DATA >0000         * No next program
     6011 00
0070 6012 60         DATA GPROG
     6013 2A
0071 6014 0E         STRI 'GROMMY2 CONFIG'
     6015 47  
     6016 52  
     6017 4F  
     6018 4D  
     6019 4D  
     601A 59  
     601B 32  
     601C 20  
     601D 43  
     601E 4F  
     601F 4E  
     6020 46  
     6021 49  
     6022 47  
0072          
0073          GVREGS
0074 6023 E0      BYTE  >E0              VDP registers values: standard mode
0075 6024 00      BYTE  >00              screen image at >0000
0076 6025 0E      BYTE  >0E              color table at >0380
0077 6026 01      BYTE  >01              char patterns at >0800
0078 6027 06      BYTE  >06              sprite attributes at >0300
0079 6028 00      BYTE  >00              sprite patterns at >0000
0080 6029 F5      BYTE  >F5              text/screen colors: white / light blue
0081          
0082          GPROG
0083 602A 86      CLR   @>8374
     602B 74  
0084 602C BF      DST   >0900,@>834A     load upper case chars 32->
     602D 4A  
     602E 09  
     602F 00
0085 6030 06      CALL  G@>0018
     6031 00  
     6032 18
0086          * Setup roughly as with mini memory
0087 6033 39      MOVE >0007,G@GVREGS,#>01    Set VDP Regs
     6034 00  
     6035 07
     6036 01  
     6037 60  
     6038 23
0088 6039 86      CLR   V@>0800          clear charpats 0-31
     603A A8  
     603B 00
0089 603C 35      MOVE  >00FF,V@>0800,V@>0801
     603D 00  
     603E FF
     603F A8  
     6040 01
     6041 A8  
     6042 00
0090          
0091 6043 BE      ST    >7E,@>8373       init subroutine stack
     6044 73  
     6045 7E  
0092 6046 87      DCLR  @>8322           clear error code
     6047 22  
0093 6048 87      DCLR  @>8348           clear flags
     6049 48  
0094          
0095 604A 87      DCLR   @DUMPA
     604B 62  
0096 604C 86      CLR    @BANK           Actually init from grommy2
     604D 50  
0097 604E 86      CLR    @SHADOW         Actually init from grommy2
     604F 51  
0098          
0099 6050 87      DCLR   @XREG
     6051 2C  
0100 6052 87      DCLR   @YREG
     6053 2E  
0101 6054 87      DCLR   @ZREG
     6055 30  
0102          
0103 6056 06      CALL G@GVDPSETUP
     6057 67  
     6058 A9
0104          
0105 6059 06      CALL G@G_SCR1       ; Setup the screen which was automatically generated
     605A 6A  
     605B 94
0106          * Setup additional chars E0..EF as numbers 0..9 and A..F
0107          * 0x980 = hex(0x800+ord('0')*8)
0108          * 0xa08 = hex(0x800+ord('A')*8)
0109          * 0xf00 = hex(0x800+0xe0*8)
0110          * 0xf50 = hex(0x800+0xea*8)
0111          CHSRC1 EQU >800+(8*'0')
0112          CHSRC2 EQU >800+(8*'A')
0113          CHOFS1 EQU >800+(8*HEXBASECH)
0114          CHOFS2 EQU >800+(8*(HEXBASECH+10))
0115 605C 35      MOVE 10*8,V@CHSRC1,V@CHOFS1  * 10 number patterns
     605D 00  
     605E 50
     605F AF  
     6060 0F
     6061 00
     6062 A9  
     6063 80
0116 6064 35      MOVE  6*8,V@CHSRC2,V@CHOFS2
     6065 00  
     6066 30
     6067 AF  
     6068 0F
     6069 50
     606A AA  
     606B 08
0117          * Set the colors for these characters.
0118 606C BE      ST   >A5,V@>39C
     606D A3  
     606E 9C
     606F A5  
0119 6070 BE      ST   >A5,V@>39D
     6071 A3  
     6072 9D
     6073 A5  
0120          * Make the fonts "bold"
0121 6074 BF      DST  >F00,@VRAMP
     6075 40  
     6076 0F  
     6077 00
0122 6078 BC  !   ST   V@0(@VRAMP),@PAD0
     6079 5C  
     607A E0  
     607B 00
     607C 40
0123 607D E6      SRL  1,@PAD0
     607E 5C  
     607F 01  
0124 6080 B4      OR   V@0(@VRAMP),@PAD0
     6081 5C  
     6082 E0  
     6083 00
     6084 40
0125 6085 BC      ST  @PAD0,V@0(@VRAMP)
     6086 E0  
     6087 00
     6088 40
     6089 5C  
0126 608A 91      DINC @VRAMP
     608B 40  
0127 608C D7      DCEQ >F80,@VRAMP
     608D 40  
     608E 0F  
     608F 80
0128 6090 40      BR   -!
     6091 78  
0129          * Copy the fonts to make inverse duplicates
0130 6092 35      MOVE >80,V@>F00,V@>F80
     6093 00  
     6094 80
     6095 AF  
     6096 0F
     6097 80
     6098 AF  
     6099 0F
     609A 00
0131 609B BE      ST   >5A,V@>39E
     609C A3  
     609D 9E
     609E 5A  
0132 609F BE      ST   >5A,V@>39F
     60A0 A3  
     60A1 9F
     60A2 5A  
0133          
0134          SCREEN1:
0135          * Use the FMT token to add some strings on the screen
0136 60A3 08      FMT
0137 60A4 FF      COL LALIGN
     60A5 02  
0138 60A6 FE      ROW LAYOUTVER
     60A7 05  
0139 60A8 1D      HTEX 'VERSION 0.0.00 BANK 0 SHADOW 0'
     60A9 56  
     60AA 45  
     60AB 52  
     60AC 53  
     60AD 49  
     60AE 4F  
     60AF 4E  
     60B0 20  
     60B1 30  
     60B2 2E  
     60B3 30  
     60B4 2E  
     60B5 30  
     60B6 30  
     60B7 20  
     60B8 42  
     60B9 41  
     60BA 4E  
     60BB 4B  
     60BC 20  
     60BD 30  
     60BE 20  
     60BF 53  
     60C0 48  
     60C1 41  
     60C2 44  
     60C3 4F  
     60C4 57  
     60C5 20  
     60C6 30  
0140 60C7 A0      ROW+ >01
0141 60C8 FF      COL LALIGN
     60C9 02  
0142 60CA 19      HTEX 'SELECT GROM BANK FOR READS'
     60CB 53  
     60CC 45  
     60CD 4C  
     60CE 45  
     60CF 43  
     60D0 54  
     60D1 20  
     60D2 47  
     60D3 52  
     60D4 4F  
     60D5 4D  
     60D6 20  
     60D7 42  
     60D8 41  
     60D9 4E  
     60DA 4B  
     60DB 20  
     60DC 46  
     60DD 4F  
     60DE 52  
     60DF 20  
     60E0 52  
     60E1 45  
     60E2 41  
     60E3 44  
     60E4 53  
0143 60E5 A0      ROW+ >01
0144 60E6 FF      COL LALIGN2
     60E7 03  
0145 60E8 1A      HTEX '0 USER BANK 0 / SYSTEM BANK'
     60E9 30  
     60EA 20  
     60EB 55  
     60EC 53  
     60ED 45  
     60EE 52  
     60EF 20  
     60F0 42  
     60F1 41  
     60F2 4E  
     60F3 4B  
     60F4 20  
     60F5 30  
     60F6 20  
     60F7 2F  
     60F8 20  
     60F9 53  
     60FA 59  
     60FB 53  
     60FC 54  
     60FD 45  
     60FE 4D  
     60FF 20  
     6100 42  
     6101 41  
     6102 4E  
     6103 4B  
0146 6104 A0      ROW+ >01
0147 6105 FF      COL LALIGN2
     6106 03  
0148 6107 0C      HTEX '1 USER BANK 1'
     6108 31  
     6109 20  
     610A 55  
     610B 53  
     610C 45  
     610D 52  
     610E 20  
     610F 42  
     6110 41  
     6111 4E  
     6112 4B  
     6113 20  
     6114 31  
0149 6115 A0      ROW+ >01
0150 6116 FF      COL LALIGN2
     6117 03  
0151 6118 0C      HTEX '2 USER BANK 2'
     6119 32  
     611A 20  
     611B 55  
     611C 53  
     611D 45  
     611E 52  
     611F 20  
     6120 42  
     6121 41  
     6122 4E  
     6123 4B  
     6124 20  
     6125 32  
0152 6126 A0      ROW+ >01
0153 6127 FF      COL LALIGN2
     6128 03  
0154 6129 0C      HTEX '3 USER BANK 3'
     612A 33  
     612B 20  
     612C 55  
     612D 53  
     612E 45  
     612F 52  
     6130 20  
     6131 42  
     6132 41  
     6133 4E  
     6134 4B  
     6135 20  
     6136 33  
0155 6137 A0      ROW+ >01
0156 6138 FF      COL LALIGN2
     6139 03  
0157 613A 0A      HTEX '4 GRAM BANK'
     613B 34  
     613C 20  
     613D 47  
     613E 52  
     613F 41  
     6140 4D  
     6141 20  
     6142 42  
     6143 41  
     6144 4E  
     6145 4B  
0158          
0159 6146 A1      ROW+ >02
0160 6147 FF      COL LALIGN
     6148 02  
0161 6149 09      HTEX 'SHADOW RAM'
     614A 53  
     614B 48  
     614C 41  
     614D 44  
     614E 4F  
     614F 57  
     6150 20  
     6151 52  
     6152 41  
     6153 4D  
0162 6154 A0      ROW+ >01
0163 6155 FF      COL LALIGN2
     6156 03  
0164 6157 15      HTEX '5 ENABLE     6 DISABLE'
     6158 35  
     6159 20  
     615A 45  
     615B 4E  
     615C 41  
     615D 42  
     615E 4C  
     615F 45  
     6160 20  
     6161 20  
     6162 20  
     6163 20  
     6164 20  
     6165 36  
     6166 20  
     6167 44  
     6168 49  
     6169 53  
     616A 41  
     616B 42  
     616C 4C  
     616D 45  
0165          
0166 616E A1      ROW+ >02
0167 616F FF      COL LALIGN
     6170 02  
0168 6171 16      HTEX 'FLASH GRAM TO USER BANK'
     6172 46  
     6173 4C  
     6174 41  
     6175 53  
     6176 48  
     6177 20  
     6178 47  
     6179 52  
     617A 41  
     617B 4D  
     617C 20  
     617D 54  
     617E 4F  
     617F 20  
     6180 55  
     6181 53  
     6182 45  
     6183 52  
     6184 20  
     6185 42  
     6186 41  
     6187 4E  
     6188 4B  
0169 6189 A0      ROW+ >01
0170 618A FF      COL LALIGN2
     618B 03  
0171 618C 19      HTEX '7 BK0  8 BK1  9 BK2  E BK3'
     618D 37  
     618E 20  
     618F 42  
     6190 4B  
     6191 30  
     6192 20  
     6193 20  
     6194 38  
     6195 20  
     6196 42  
     6197 4B  
     6198 31  
     6199 20  
     619A 20  
     619B 39  
     619C 20  
     619D 42  
     619E 4B  
     619F 32  
     61A0 20  
     61A1 20  
     61A2 45  
     61A3 20  
     61A4 42  
     61A5 4B  
     61A6 33  
0172          
0173 61A7 A1      ROW+ >02
0174 61A8 FF      COL LALIGN
     61A9 02  
0175 61AA 15      HTEX 'COPY GROM BANK TO GRAM'
     61AB 43  
     61AC 4F  
     61AD 50  
     61AE 59  
     61AF 20  
     61B0 47  
     61B1 52  
     61B2 4F  
     61B3 4D  
     61B4 20  
     61B5 42  
     61B6 41  
     61B7 4E  
     61B8 4B  
     61B9 20  
     61BA 54  
     61BB 4F  
     61BC 20  
     61BD 47  
     61BE 52  
     61BF 41  
     61C0 4D  
0176 61C1 A0      ROW+ >01
0177 61C2 FF      COL LALIGN2
     61C3 03  
0178 61C4 19      HTEX 'A BK0  B BK1  C BK2  D BK3'
     61C5 41  
     61C6 20  
     61C7 42  
     61C8 4B  
     61C9 30  
     61CA 20  
     61CB 20  
     61CC 42  
     61CD 20  
     61CE 42  
     61CF 4B  
     61D0 31  
     61D1 20  
     61D2 20  
     61D3 43  
     61D4 20  
     61D5 42  
     61D6 4B  
     61D7 32  
     61D8 20  
     61D9 20  
     61DA 44  
     61DB 20  
     61DC 42  
     61DD 4B  
     61DE 33  
0179          
0180 61DF A1      ROW+ >02
0181 61E0 FF      COL LALIGN
     61E1 02  
0182 61E2 15      HTEX 'M MORE...  P PAGING...'
     61E3 4D  
     61E4 20  
     61E5 4D  
     61E6 4F  
     61E7 52  
     61E8 45  
     61E9 2E  
     61EA 2E  
     61EB 2E  
     61EC 20  
     61ED 20  
     61EE 50  
     61EF 20  
     61F0 50  
     61F1 41  
     61F2 47  
     61F3 49  
     61F4 4E  
     61F5 47  
     61F6 2E  
     61F7 2E  
     61F8 2E  
0183          
0184 61F9 FB      FEND
0185          
0186          * Pattern address of character ALIVECH
0187          PATADR EQU >0800+(8*ALIVECH)
0188          * Test a couple of chars
0189          *    MOVE 64,G@DENSE_FONT,V@PATADR-64
0190          *    ST >F7,V@0
0191          *    ST >F8,V@1
0192          *    ST >F9,V@2
0193          *    ST >FA,V@3
0194          *    ST >FB,V@4
0195          *    ST >FC,V@5
0196          *    ST >FD,V@6
0197          *    ST >FE,V@7
0198          
0199 61FA 06      CALL  SHOW_VERSION      ; Get version, bank, shadow info
     61FB 66  
     61FC A2
0200 61FD 05      B     GUPDATE           ; update screen
     61FE 62  
     61FF B3
0201          MAINSEL:
0202 6200 06      CALL  CLEARVALID
     6201 65  
     6202 75
0203          GWAIT
0204 6203 03      SCAN
0205 6204 62      BS    MGOTKEY
     6205 10  
0206          * We did not get a key. Animate something.
0207 6206 BE      ST    ALIVECH,V@>001F      Write char FF to top right corner
     6207 A0  
     6208 1F
     6209 DF  
0208 620A 90      INC   V@PATADR
     620B AE  
     620C F8
0209 620D 05      B    G@GWAIT          wait for the user to press a key
     620E 62  
     620F 03
0210          
0211          MGOTKEY:
0212 6210 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     6211 A0  
     6212 82
     6213 75  
0213 6214 CE      CGT   '0'-1,@SCANKEY       greater than >= 0
     6215 75  
     6216 2F  
0214 6217 42      BR    GG01              no skip forward
     6218 AD  
0215 6219 CE      CGT   '9',@SCANKEY        Key greater than '9'?
     621A 75  
     621B 39  
0216 621C 62      BS    CHECK_ABC             ; Yes: skip forward
     621D 37  
0217 621E A6      SUB   '0',@SCANKEY
     621F 75  
     6220 30  
0218 6221 8A      CASE  @SCANKEY
     6222 75  
0219 6223 42      BR    MKEY0
     6224 69  
0220 6225 42      BR    MKEY1
     6226 69  
0221 6227 42      BR    MKEY2
     6228 69  
0222 6229 42      BR    MKEY3
     622A 69  
0223 622B 42      BR    MKEY4
     622C 74  
0224 622D 42      BR    MKEY5
     622E 5A  
0225 622F 42      BR    MKEY6
     6230 65  
0226 6231 42      BR    MKEY7
     6232 7C  
0227 6233 42      BR    MKEY8
     6234 7C  
0228 6235 42      BR    MKEY9
     6236 7C  
0229          
0230          CHECK_ABC
0231          ; Commands A,B, C,D,E,M,P
0232 6237 D6      CEQ   'M',@SCANKEY
     6238 75  
     6239 4D  
0233 623A 62      BS    DUMPSCREEN
     623B EC  
0234 623C D6      CEQ   'P',@SCANKEY
     623D 75  
     623E 50  
0235 623F 66      BS    PAGINGSCREEN
     6240 66  
0236 6241 CE      CGT   'A'-1,@SCANKEY
     6242 75  
     6243 40  
0237 6244 42      BR    GG01
     6245 AD  
0238 6246 CE      CGT   'E',@SCANKEY
     6247 75  
     6248 45  
0239 6249 62      BS    GG01
     624A AD  
0240 624B A6      SUB   'A',@SCANKEY
     624C 75  
     624D 41  
0241 624E 8A      CASE  @SCANKEY
     624F 75  
0242 6250 42      BR    MKEYA
     6251 90  
0243 6252 42      BR    MKEYB
     6253 90  
0244 6254 42      BR    MKEYC
     6255 90  
0245 6256 42      BR    MKEYD
     6257 90  
0246 6258 42      BR    MKEYE
     6259 8B  
0247          
0248          MKEY5:
0249 625A BE      ST  1,@SHADOW
     625B 51  
     625C 01  
0250          SHADOWSET
0251 625D BC      ST  @SHADOW,@GCMDP2    ; Set parameter 2
     625E 42  
     625F 51  
0252 6260 BE      ST  3,@GCMDBYTE         ; Command 3 shadow enable/disable
     6261 40  
     6262 03  
0253 6263 42      BR  ISSUECMD
     6264 A0  
0254          MKEY6:
0255 6265 86      CLR @SHADOW
     6266 51  
0256 6267 42      BR  SHADOWSET
     6268 5D  
0257          MKEY0
0258          MKEY1
0259          MKEY2
0260          MKEY3
0261 6269 BC      ST   @SCANKEY,@BANK
     626A 50  
     626B 75  
0262 626C BC      ST   @SCANKEY,@GCMDP2    ; Set parameter 2
     626D 42  
     626E 75  
0263          BANKSEL
0264 626F BE      ST   1,@GCMDBYTE         ; Command 1 select bank for reads
     6270 40  
     6271 01  
0265 6272 42      BR  ISSUECMD
     6273 A0  
0266          MKEY4
0267 6274 BC      ST   @SCANKEY,@BANK
     6275 50  
     6276 75  
0268 6277 BE      ST   8,@GCMDP2           ; GRAM bank is 8
     6278 42  
     6279 08  
0269 627A 42      BR   BANKSEL
     627B 6F  
0270          
0271          MKEY7  ; User bank 0
0272          MKEY8  ; User bank 1
0273          MKEY9  ; User bank 2
0274 627C A6      SUB 7,@SCANKEY      ; becomes 0,1,2
     627D 75  
     627E 07  
0275 627F BC      ST  @SCANKEY,@GCMDP2
     6280 42  
     6281 75  
0276          GRAM2FLASH
0277 6282 BE      ST   >3F,@GCMDP3        ; Bit mask: flash entire bank
     6283 43  
     6284 3F  
0278 6285 BE      ST   4,@GCMDBYTE
     6286 40  
     6287 04  
0279 6288 05      B   ISSUECMD
     6289 62  
     628A A0
0280          MKEYE:                       ; Flash GRAM to user bank 3
0281 628B BE      ST   >03,@GCMDP2        ; User bank 3
     628C 42  
     628D 03  
0282 628E 42      BR   GRAM2FLASH
     628F 82  
0283          
0284          MKEYA                       ; Copy bank 0 to GRAM
0285          MKEYB
0286          MKEYC
0287          MKEYD
0288 6290 BC      ST    @SCANKEY,@GCMDP2
     6291 42  
     6292 75  
0289          COPY2GRAM:
0290 6293 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6294 A0  
     6295 83
     6296 2A  
0291 6297 BE      ST    2,@GCMDBYTE
     6298 40  
     6299 02  
0292 629A 42      BR    ISSUECMD
     629B A0  
0293          
0294          ISSUECMD1:                  ; Clear last 4 parameter bytes
0295 629C 87      DCLR  @GCMDBYTE+4
     629D 44  
0296 629E 87      DCLR  @GCMDBYTE+6
     629F 46  
0297          ISSUECMD:
0298 62A0 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     62A1 00  
     62A2 08
     62A3 48  
     62A4 67  
     62A5 23
0299 62A6 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     62A7 A0  
     62A8 83
     62A9 2A  
0300 62AA 06      CALL  GSENDCMD          ; Send command to HW
     62AB 67  
     62AC 0E
0301          
0302          GG01:
0303 62AD D6      CEQ   >0F,@SCANKEY       is it Fctn-9?
     62AE 75  
     62AF 0F  
0304 62B0 42      BR    G@GCONT2         no: GCONT2
     62B1 B3  
0305 62B2 0B      EXIT                   yes: reset the TI-99/4A
0306          
0307          GCONT2
0308          * Update screen to reflect current status
0309          GUPDATE
0310          * Status of Shadow RAM enable/disable
0311 62B3 BE      ST  '0',@PAD0
     62B4 5C  
     62B5 30  
0312 62B6 A0      ADD @SHADOW,@PAD0
     62B7 5C  
     62B8 51  
0313 62B9 BC      ST  @PAD0,V@VEROFS+>1F        Write to VRAM
     62BA A0  
     62BB BF
     62BC 5C  
0314          * Status of selected bank
0315 62BD BE      ST  '0',@PAD0
     62BE 5C  
     62BF 30  
0316 62C0 A0      ADD @BANK,@PAD0
     62C1 5C  
     62C2 50  
0317 62C3 BC      ST  @PAD0,V@VEROFS+>16  ; Write to VRAM
     62C4 A0  
     62C5 B6
     62C6 5C  
0318          
0319          
0320          * Start update GROM read bank. First erase bank markings.
0321          BANKOFS EQU (32*LAYOUTBAN)+4
0322 62C7 BE      ST ' ',V@BANKOFS
     62C8 A1  
     62C9 04
     62CA 20  
0323 62CB BE      ST ' ',V@BANKOFS+>20
     62CC A1  
     62CD 24
     62CE 20  
0324 62CF BE      ST ' ',V@BANKOFS+>40
     62D0 A1  
     62D1 44
     62D2 20  
0325 62D3 BE      ST ' ',V@BANKOFS+>60
     62D4 A1  
     62D5 64
     62D6 20  
0326 62D7 BE      ST ' ',V@BANKOFS+>80
     62D8 A1  
     62D9 84
     62DA 20  
0327 62DB 87      DCLR @PAD0
     62DC 5C  
0328 62DD BC      ST   @BANK,@PAD3        Copy to low byte the bank #
     62DE 5F  
     62DF 50  
0329 62E0 E3      DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
     62E1 5E  
     62E2 00  
     62E3 05
0330 62E4 BE      ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
     62E5 E1  
     62E6 04
     62E7 5E
     62E8 2A  
0331          * End update GROM read bank.
0332 62E9 05      B   G@MAINSEL
     62EA 62  
     62EB 00
0333          
0334          *----------------------------------------
0335          * Second screen with a few features.
0336          *----------------------------------------
0337          DUMPSCREEN:
0338 62EC BE      ST   ' ',V@VEROFS
     62ED A0  
     62EE A0
     62EF 20  
0339 62F0 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     62F1 02  
     62F2 5F
     62F3 A0  
     62F4 A1
     62F5 A0  
     62F6 A0
0340 62F7 08      FMT
0341 62F8 FF      COL LALIGN
     62F9 02  
0342 62FA FE      ROW LAYOUTVER
     62FB 05  
0343 62FC 1A      HTEX '1 DEC 2 INC DUMP ADDR 3 RET'
     62FD 31  
     62FE 20  
     62FF 44  
     6300 45  
     6301 43  
     6302 20  
     6303 32  
     6304 20  
     6305 49  
     6306 4E  
     6307 43  
     6308 20  
     6309 44  
     630A 55  
     630B 4D  
     630C 50  
     630D 20  
     630E 41  
     630F 44  
     6310 44  
     6311 52  
     6312 20  
     6313 33  
     6314 20  
     6315 52  
     6316 45  
     6317 54  
0344 6318 A0      ROW+ >01
0345 6319 FF      COL LALIGN
     631A 02  
0346 631B 12      HTEX '4 FILL GRAM WITH FF'
     631C 34  
     631D 20  
     631E 46  
     631F 49  
     6320 4C  
     6321 4C  
     6322 20  
     6323 47  
     6324 52  
     6325 41  
     6326 4D  
     6327 20  
     6328 57  
     6329 49  
     632A 54  
     632B 48  
     632C 20  
     632D 46  
     632E 46  
0347 632F A0      ROW+ >01
0348 6330 FF      COL LALIGN
     6331 02  
0349 6332 1B      HTEX '5 COPY 24K GROM 8000 TO GRAM'
     6333 35  
     6334 20  
     6335 43  
     6336 4F  
     6337 50  
     6338 59  
     6339 20  
     633A 32  
     633B 34  
     633C 4B  
     633D 20  
     633E 47  
     633F 52  
     6340 4F  
     6341 4D  
     6342 20  
     6343 38  
     6344 30  
     6345 30  
     6346 30  
     6347 20  
     6348 54  
     6349 4F  
     634A 20  
     634B 47  
     634C 52  
     634D 41  
     634E 4D  
0350 634F A0      ROW+ >01
0351 6350 FF      COL LALIGN
     6351 02  
0352 6352 0E      HTEX '6 ARM EXECUTE X'
     6353 36  
     6354 20  
     6355 41  
     6356 52  
     6357 4D  
     6358 20  
     6359 45  
     635A 58  
     635B 45  
     635C 43  
     635D 55  
     635E 54  
     635F 45  
     6360 20  
     6361 58  
0353 6362 A0      ROW+ >01
0354 6363 FF      COL LALIGN
     6364 02  
0355 6365 11      HTEX '7 ARM EXECUTE 4000'
     6366 37  
     6367 20  
     6368 41  
     6369 52  
     636A 4D  
     636B 20  
     636C 45  
     636D 58  
     636E 45  
     636F 43  
     6370 55  
     6371 54  
     6372 45  
     6373 20  
     6374 34  
     6375 30  
     6376 30  
     6377 30  
0356 6378 A0      ROW+ >01
0357 6379 FF      COL LALIGN
     637A 02  
0358 637B 18      HTEX '0 BURN FIRMWARE FROM GRAM'
     637C 30  
     637D 20  
     637E 42  
     637F 55  
     6380 52  
     6381 4E  
     6382 20  
     6383 46  
     6384 49  
     6385 52  
     6386 4D  
     6387 57  
     6388 41  
     6389 52  
     638A 45  
     638B 20  
     638C 46  
     638D 52  
     638E 4F  
     638F 4D  
     6390 20  
     6391 47  
     6392 52  
     6393 41  
     6394 4D  
0359 6395 A0      ROW+ >01
0360 6396 FF      COL LALIGN
     6397 02  
0361 6398 18      HTEX 'X Y Z: EDIT VAR X, Y OR Z'
     6399 58  
     639A 20  
     639B 59  
     639C 20  
     639D 5A  
     639E 3A  
     639F 20  
     63A0 45  
     63A1 44  
     63A2 49  
     63A3 54  
     63A4 20  
     63A5 56  
     63A6 41  
     63A7 52  
     63A8 20  
     63A9 58  
     63AA 2C  
     63AB 20  
     63AC 59  
     63AD 20  
     63AE 4F  
     63AF 52  
     63B0 20  
     63B1 5A  
0362 63B2 FB      FEND
0363          
0364 63B3 31      MOVE BINLEN,G@BINDATA,@>8300 ; Move assembly code in place
     63B4 00  
     63B5 22
     63B6 00  
     63B7 67  
     63B8 87
0365          
0366          * ; test characters on last line
0367          *     ST  HEXBASECH,@PAD0
0368          *     DST 32*23,@VRAMP          * Beginning of last row
0369          * !   ST  @PAD0,V@0(@VRAMP)
0370          *     DINC @VRAMP
0371          *     INC @PAD0
0372          *     CZ  @PAD0
0373          *     BR  -!
0374          
0375          
0376          ; First test in units of frame count (VDPTIMER)
0377          ; Test runs for 4 frames.
0378          ;   GPL with original HEXOUT: 119 ticks
0379          ;   GPL call to GPL HEXOUT routine issuing XML >F0:  55 ticks
0380          ;   Replace GPL call with XML >F0: 47 ticks
0381          ;   All GPL with new hex characters, no gap between '9' and 'A': 87 ticks
0382          ;     This also handles two characers at a time. But still slow.
0388          
0389 63B9 05      B  SKIPBENCH
     63BA 63  
     63BB D6
0390          ; Run benchmark
0391 63BC BE      ST    4,@XREG               ; Loop counter
     63BD 2C  
     63BE 04  
0392 63BF BC      ST    @VDPTIMER,@XREG+1     ; Read timer
     63C0 2D  
     63C1 79  
0393 63C2 06  !   CALL  G@DODUMP
     63C3 64  
     63C4 13
0394 63C5 A3      DADD  8,@DUMPA
     63C6 62  
     63C7 00  
     63C8 08
0395 63C9 92      DEC   @XREG
     63CA 2C  
0396 63CB 8E      CZ    @XREG
     63CC 2C  
0397 63CD 43      BR   -!
     63CE C2  
0398 63CF BC      ST    @VDPTIMER,@XREG       ; Read timer
     63D0 2C  
     63D1 79  
0399 63D2 A7      DSUB  4*10,@DUMPA
     63D3 62  
     63D4 00  
     63D5 28
0400          SKIPBENCH:
0401 63D6 05      B     MAKEDUMP      ; NOP
     63D7 63  
     63D8 D9
0402          
0403          MAKEDUMP:
0404 63D9 BD      DST  @YREG,@DUMPA
     63DA 62  
     63DB 2E  
0405 63DC 06      CALL G@DODUMP
     63DD 64  
     63DE 13
0406 63DF 06      CALL  CLEARVALID
     63E0 65  
     63E1 75
0407          ; Wait for keypress
0408          KW1:
0409 63E2 03      SCAN
0410 63E3 63      BS    DGOTKEY
     63E4 EB  
0411 63E5 90      INC   V@PATADR
     63E6 AE  
     63E7 F8
0412 63E8 05      B     KW1
     63E9 63  
     63EA E2
0413          DGOTKEY:
0414 63EB BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     63EC A0  
     63ED 82
     63EE 75  
0415 63EF CE      CGT   'X'-1,@SCANKEY    ; Key >= 'X'
     63F0 75  
     63F1 57  
0416 63F2 64      BS    XYZ               ; Yes: go to XYZ
     63F3 6B  
0417 63F4 CE      CGT   '0'-1,@SCANKEY
     63F5 75  
     63F6 2F  
0418 63F7 43      BR    KW1               ; Key less than zero -> loop
     63F8 E2  
0419 63F9 CE      CGT   '7',@SCANKEY      ; Key over '7' -> loop
     63FA 75  
     63FB 37  
0420 63FC 63      BS    KW1
     63FD E2  
0421 63FE A6      SUB   '0',@SCANKEY
     63FF 75  
     6400 30  
0422 6401 8A      CASE  @SCANKEY
     6402 75  
0423 6403 44      BR    DKEY0
     6404 F1  
0424 6405 44      BR    DKEY1
     6406 D5  
0425 6407 44      BR    DKEY2
     6408 DC  
0426 6409 44      BR    DKEY3
     640A E3  
0427 640B 45      BR    DKEY4
     640C 10  
0428 640D 45      BR    DKEY5
     640E 2F  
0429 640F 45      BR    DKEY6
     6410 4E  
0430 6411 45      BR    DKEY7
     6412 6F  
0431          
0432          DODUMP:
0433 6413 BF      DST   VRAMDUMPAREA,@VRAMP
     6414 40  
     6415 01  
     6416 A0
0434 6417 86      CLR   @PAD2             ; Row counter
     6418 5E  
0435 6419 BE      ST    '*',V@VALIDIND
     641A A0  
     641B 83
     641C 2A  
0436          DUMP2:
0437 641D BE      ST    ' ',V@>FFFF(VRAMP)    ; setup VRAM address in case assembly used
     641E EF  
     641F FF
     6420 FF
     6421 40
     6422 20  
0438 6423 BC      ST    @DUMPA,@PAD0      ; Hi byte off address
     6424 5C  
     6425 62  
0001 6426 0F      XML >F0
     6427 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0440 6428 A3      DADD  2,@VRAMP
     6429 40  
     642A 00  
     642B 02
0441 642C BC      ST    @DUMPA+1,@PAD0    ; Lo byte off address
     642D 5C  
     642E 63  
0001 642F 0F      XML >F0
     6430 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0443 6431 BE      ST    ':',V@2(@VRAMP)
     6432 E0  
     6433 02
     6434 40
     6435 3A  
0444 6436 A3      DADD  3,@VRAMP
     6437 40  
     6438 00  
     6439 03
0445 643A 86      CLR   @PAD1             ; column counter
     643B 5D  
0446          ; Dump 8 bytes from from 16 bit ptr  DUMPA
0447          DUMP1:
0448 643C 33      MOVE  1,G@0(@DUMPA),@PAD0    ; Read from GROM pointed to by DUMPA
     643D 00  
     643E 01
     643F 5C  
     6440 00  
     6441 00
     6442 62
0001 6443 0F      XML >F0
     6444 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0450 6445 BE      ST    ' ',V@2(@VRAMP)
     6446 E0  
     6447 02
     6448 40
     6449 20  
0451 644A A3      DADD  3,@VRAMP
     644B 40  
     644C 00  
     644D 03
0452 644E 91      DINC  @DUMPA
     644F 62  
0453 6450 90      INC   @PAD1
     6451 5D  
0454 6452 D6      CEQ   8,@PAD1           ; 8 columns - are we done?
     6453 5D  
     6454 08  
0455 6455 44      BR    DUMP1             ; No: jump to dump1
     6456 3C  
0456          ; Advance VRAM pointer, we add and mask to bring pointer to beginning
0457          ; of next line.
0458 6457 A3      DADD  >1F,@VRAMP
     6458 40  
     6459 00  
     645A 1F
0459 645B B3      DAND  >0FE0,@VRAMP
     645C 40  
     645D 0F  
     645E E0
0460 645F 90      INC   @PAD2             ; inc Row
     6460 5E  
0461 6461 D6      CEQ   8,@PAD2           ; Done with 8 rows?
     6462 5E  
     6463 08  
0462 6464 44      BR    DUMP2             ; No: jump to dump2
     6465 1D  
0463 6466 A7      DSUB  8*8,@DUMPA           ; Undo the incs in the loop above
     6467 62  
     6468 00  
     6469 40
0464 646A 00      RTN
0465          
0466          ; Check if we have button X Y Z pressed
0467          XYZ:
0468 646B CE      CGT   'Z',@SCANKEY    ; Above Z?
     646C 75  
     646D 5A  
0469 646E 63      BS    KW1             ; Yes: KW1
     646F E2  
0470          ; Ok now we need to ask the user for a value and store it to X, Y or Z register.
0471          ; Show the current value of the variable after character code
0472 6470 BF      DST   VEROFS-29,@VRAMP ; Location in VRAM
     6471 40  
     6472 00  
     6473 83
0473 6474 BC      ST    @SCANKEY,@PAD3
     6475 5F  
     6476 75  
0474 6477 A6      SUB   'X',@PAD3       ; Now pad is 0,1,2 for X,Y,Z
     6478 5F  
     6479 58  
0475 647A E2      SLL   1,@PAD3         ; Multiply by 2
     647B 5F  
     647C 01  
0476 647D 86      CLR   @PAD2           ; clear high byte
     647E 5E  
0477 647F A3      DADD  XREG,@PAD2       ; Add address of XREG, now PAD1:PAD2 is a pointer to value
     6480 5E  
     6481 83  
     6482 2C
0478          
0479 6483 BC      ST    @0(@PAD2),@PAD0  ; Hi byte of reg
     6484 5C  
     6485 CF  
     6486 7D
     6487 00
     6488 5E
0001 6489 0F      XML >F0
     648A F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0481 648B A3      DADD  2,@VRAMP
     648C 40  
     648D 00  
     648E 02
0482 648F BC      ST    @1(@PAD2),@PAD0  ; Lo byte of reg
     6490 5C  
     6491 CF  
     6492 7D
     6493 01
     6494 5E
0001 6495 0F      XML >F0
     6496 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0484 6497 A7      DSUB  2,@VRAMP          ; Point to beginning of hex digits
     6498 40  
     6499 00  
     649A 02
0485 649B BE      ST    4,@PAD4           ; 4 digits to edit, VRAMP points to them
     649C 60  
     649D 04  
0486 649E 06      CALL  EDITHEX           ; go and edit them
     649F 65  
     64A0 86
0487          ; YREG is used as dump addres. If it changed, refresh screen.
0488 64A1 D5      DCEQ  @YREG,@DUMPA
     64A2 62  
     64A3 2E  
0489 64A4 43      BR    MAKEDUMP
     64A5 D9  
0490 64A6 05      B     G@KW1
     64A7 63  
     64A8 E2
0491          
0492          
0493          
0494          ASKCONFIRM:
0495          ; Ask for confirmation. Clear a few rows to clarify
0496 64A9 BE      ST   ' ',V@VEROFS
     64AA A0  
     64AB A0
     64AC 20  
0497 64AD 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64AE 02  
     64AF 5F
     64B0 A0  
     64B1 A1
     64B2 A0  
     64B3 A0
0498 64B4 08      FMT
0499 64B5 FF      COL LALIGN
     64B6 02  
0500 64B7 FE      ROW LAYOUTVER
     64B8 05  
0501 64B9 15      HTEX '!!PRESS 1 TO CONFIRM!!'
     64BA 21  
     64BB 21  
     64BC 50  
     64BD 52  
     64BE 45  
     64BF 53  
     64C0 53  
     64C1 20  
     64C2 31  
     64C3 20  
     64C4 54  
     64C5 4F  
     64C6 20  
     64C7 43  
     64C8 4F  
     64C9 4E  
     64CA 46  
     64CB 49  
     64CC 52  
     64CD 4D  
     64CE 21  
     64CF 21  
0502 64D0 FB      FEND
0503          WAIT0:
0504 64D1 03      SCAN
0505 64D2 44      BR    WAIT0
     64D3 D1  
0506 64D4 00      RTN
0507          
0508          DKEY1:
0509 64D5 A7      DSUB  64,@YREG
     64D6 2E  
     64D7 00  
     64D8 40
0510 64D9 05      B     MAKEDUMP
     64DA 63  
     64DB D9
0511          DKEY2:
0512 64DC A3      DADD  64,@YREG
     64DD 2E  
     64DE 00  
     64DF 40
0513 64E0 05      B     MAKEDUMP
     64E1 63  
     64E2 D9
0514          DKEY3:
0515 64E3 BE      ST   ' ',V@VEROFS
     64E4 A0  
     64E5 A0
     64E6 20  
0516 64E7 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64E8 02  
     64E9 5F
     64EA A0  
     64EB A1
     64EC A0  
     64ED A0
0517 64EE 05      B     SCREEN1
     64EF 60  
     64F0 A3
0518          DKEY0:      ; Burn to Flash
0519 64F1 06      CALL  G@ASKCONFIRM
     64F2 64  
     64F3 A9
0520 64F4 D6      CEQ   '1',@SCANKEY       is the key one?
     64F5 75  
     64F6 31  
0521 64F7 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     64F8 EC  
0522          ; Yes, continue to Flash the MCU
0523 64F9 04      BACK  >F3              screen colors: white on some other color
     64FA F3  
0524 64FB BE      ST    'F',V@VALIDIND    ; Command valid indicator
     64FC A0  
     64FD 83
     64FE 46  
0525 64FF BE      ST    6,@GCMDBYTE
     6500 40  
     6501 06  
0526 6502 BF      DST   >1234,@GCMDBYTE+2
     6503 42  
     6504 12  
     6505 34
0527 6506 87      DCLR  @GCMDBYTE+4
     6507 44  
0528 6508 87      DCLR  @GCMDBYTE+6
     6509 46  
0529 650A 06      CALL  ISSUECMD
     650B 62  
     650C A0
0530          ; We probably do not return from this call... GROMMY might be in a funny state
0531 650D 05      B     G@MAKEDUMP
     650E 63  
     650F D9
0532          
0533          DKEY4:      ; Command to fill GRAM with >FF, all 24K
0534 6510 BF      DST   >FFFF,@PAD2   ; Fill value, 2 bytes
     6511 5E  
     6512 FF  
     6513 FF
0535 6514 BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6515 A0  
     6516 83
     6517 2A  
0536 6518 87      DCLR  @PAD4
     6519 60  
0537 651A 2D  !   MOVE  2,@PAD2,G@0(@PAD4)    ; store to grom
     651B 00  
     651C 02
     651D 00  
     651E 00
     651F 60
     6520 5E  
0538 6521 95      DINCT @PAD4
     6522 60  
0539 6523 D7      DCEQ  >6000,@PAD4
     6524 60  
     6525 60  
     6526 00
0540 6527 45      BR    -!
     6528 1A  
0541 6529 06      CALL  CLEARVALID
     652A 65  
     652B 75
0542 652C 05      B     MAKEDUMP
     652D 63  
     652E D9
0543          
0544          DKEY5:
0545 652F BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6530 A0  
     6531 83
     6532 2A  
0546 6533 21      MOVE >2000,G@>8000,G@>0000
     6534 20  
     6535 00
     6536 00  
     6537 00
     6538 80  
     6539 00
0547 653A 21      MOVE >2000,G@>A000,G@>2000
     653B 20  
     653C 00
     653D 20  
     653E 00
     653F A0  
     6540 00
0548 6541 21      MOVE >2000,G@>C000,G@>4000
     6542 20  
     6543 00
     6544 40  
     6545 00
     6546 C0  
     6547 00
0549 6548 06      CALL  CLEARVALID
     6549 65  
     654A 75
0550 654B 05      B     MAKEDUMP
     654C 63  
     654D D9
0551          
0552          DKEY6:      ; ARM execute at address X
0553 654E BD      DST   @XREG,@PAD0
     654F 5C  
     6550 2C  
0554 6551 B6      OR    >0100,@PAD0
     6552 5C  
     6553 00  
0555 6554 BD      DST   @PAD0,@GCMDBYTE+2   ; thumb bit high
     6555 42  
     6556 5C  
0556          DKEY6ASK:
0557 6557 06      CALL  G@ASKCONFIRM
     6558 64  
     6559 A9
0558 655A D6      CEQ   '1',@SCANKEY       is the key one?
     655B 75  
     655C 31  
0559 655D 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     655E EC  
0560 655F BE      ST    'F',V@VALIDIND    ; Command valid indicator
     6560 A0  
     6561 83
     6562 46  
0561 6563 BE      ST    7,@GCMDBYTE
     6564 40  
     6565 07  
0562 6566 87      DCLR  @GCMDBYTE+4
     6567 44  
0563 6568 87      DCLR  @GCMDBYTE+6
     6569 46  
0564 656A 06      CALL  ISSUECMD
     656B 62  
     656C A0
0565          ; We probably do not return from this call... GROMMY might be in a funny state
0566 656D 43      BR    MAKEDUMP
     656E D9  
0567          
0568          DKEY7:
0569 656F BF      DST   >0140,@GCMDBYTE+2  ; ARM has different byte order
     6570 42  
     6571 01  
     6572 40
0570 6573 45      BR    DKEY6ASK
     6574 57  
0571          
0572          *----------------------------------------
0573          CLEARVALID:
0574 6575 BE      ST    ' ',V@VALIDIND
     6576 A0  
     6577 83
     6578 20  
0575 6579 BE      ST    ' ',V@VALIDIND+1
     657A A0  
     657B 84
     657C 20  
0576 657D BE      ST    ' ',V@VALIDIND+2
     657E A0  
     657F 85
     6580 20  
0577 6581 BE      ST    ' ',V@VALIDIND+3
     6582 A0  
     6583 86
     6584 20  
0578 6585 00      RTN
0579          
0580          *----------------------------------------
0581          * Edit HEX
0582          * Number already displayed with E0..EF or F0..FF.
0583          * Parameters:
0584          *   VRAMP points to the screen area.
0585          *   PAD2:PAD3 points to the value.
0586          *   PAD4 number of digits to edit. Must be even.
0587          *----------------------------------------
0588          EDITHEX:
0589 6586 86      CLR  @INDEX   ; current digit index
     6587 61  
0590          EWAIT:
0591 6588 03      SCAN
0592 6589 65      BS   EGOTKEY
     658A A7  
0593          ; No key. Flash the cursor pointed at VRAMP by copying bit 4 of frame counter
0594          ; to the character code.
0595 658B BC      ST   @VDPTIMER,@PAD0
     658C 5C  
     658D 79  
0596 658E B2      AND  >10,@PAD0
     658F 5C  
     6590 10  
0597 6591 BC      ST   V@0(@VRAMP),@PAD1
     6592 5D  
     6593 E0  
     6594 00
     6595 40
0598 6596 B2      AND  >EF,@PAD1
     6597 5D  
     6598 EF  
0599 6599 B4      OR   @PAD1,@PAD0
     659A 5C  
     659B 5D  
0600 659C BC      ST  @PAD0,V@0(@VRAMP)
     659D E0  
     659E 00
     659F 40
     65A0 5C  
0601 65A1 90      INC   V@PATADR
     65A2 AE  
     65A3 F8
0602 65A4 05      B    EWAIT
     65A5 65  
     65A6 88
0603          
0604          EGOTKEY:    ; We received a key. If it is '0' - '9' or 'A'-'F' it is a hex digit, thus edit.
0605 65A7 CE      CGT   '0'-1,@SCANKEY       ; greater than >= 0
     65A8 75  
     65A9 2F  
0606 65AA 45      BR    ENODIGIT             ; No -> ENODIGIT
     65AB E6  
0607 65AC CE      CGT   '9',@SCANKEY         ; Key greater than '9'?
     65AD 75  
     65AE 39  
0608 65AF 65      BS    CHECKAF
     65B0 D6  
0609 65B1 A6      SUB   '0',@SCANKEY         ; Here we have '0'-'9' make it 0-9
     65B2 75  
     65B3 30  
0610          GOTDIGIT:
0611 65B4 A2      ADD   HEXBASECH,@SCANKEY
     65B5 75  
     65B6 E0  
0612 65B7 BC      ST    @SCANKEY,V@0(@VRAMP)  ; Store digit into VRAM.
     65B8 E0  
     65B9 00
     65BA 40
     65BB 75  
0613 65BC 91      DINC  @VRAMP
     65BD 40  
0614 65BE 90      INC   @INDEX
     65BF 61  
0615 65C0 D4      CEQ   @INDEX,@PAD4          ; Index=number of digitss?
     65C1 60  
     65C2 61  
0616 65C3 45      BR    EWAIT                 ; No: get back to waiting next key
     65C4 88  
0617 65C5 06      CALL  BACK2BEGIN
     65C6 65  
     65C7 CB
0618 65C8 05      B     EWAIT                 ; Wait for next keypress
     65C9 65  
     65CA 88
0619          
0620          BACK2BEGIN:
0621 65CB B2      AND   >EF,V@0(VRAMP)        ; Yes: make sure no cursor show here.
     65CC E0  
     65CD 00
     65CE 40
     65CF EF  
0622 65D0 A4      SUB   @INDEX,@VRAMP+1       ; Yes: Reset VRAMP back to beginning of number (BUGBUG: carry not handled!)
     65D1 41  
     65D2 61  
0623 65D3 86      CLR   @INDEX                ; Reset index
     65D4 61  
0624 65D5 00      RTN
0625          
0626          CHECKAF:                        ; Check if we have 'A'..'F'
0627 65D6 CE      CGT   'A'-1,@SCANKEY        ; >= 'A' ?
     65D7 75  
     65D8 40  
0628 65D9 45      BR    ENODIGIT              ; no: -> ENODIGIT
     65DA E6  
0629 65DB CE      CGT   'F',@SCANKEY          ; >= 'F' ?
     65DC 75  
     65DD 46  
0630 65DE 65      BS    ENODIGIT              ; Yes: -> ENODIGIT
     65DF E6  
0631 65E0 A6      SUB   'A'-10,@SCANKEY       ; Make 'A' into 10
     65E1 75  
     65E2 37  
0632 65E3 05      B     GOTDIGIT              ; Display etc.
     65E4 65  
     65E5 B4
0633          
0634          ENODIGIT:                       ; Here we do not have digit 0-9, A-F
0635 65E6 D6      CEQ    13,@SCANKEY          ; Is it enter?
     65E7 75  
     65E8 0D  
0636 65E9 45      BR     EWAIT                ; No: get next key
     65EA 88  
0637          ; Here we have the digits in VRAM. Decode the number.
0638 65EB 06      CALL   BACK2BEGIN           ; Reset VRAMP to beginning of number
     65EC 65  
     65ED CB
0639 65EE BC  !   ST     V@0(@VRAMP),@PAD0    ; Get first digit
     65EF 5C  
     65F0 E0  
     65F1 00
     65F2 40
0640 65F3 B2      AND    >0F,@PAD0            ; Low 4 bits are the hex digit
     65F4 5C  
     65F5 0F  
0641 65F6 E2      SLL    4,@PAD0
     65F7 5C  
     65F8 04  
0642 65F9 BC      ST     V@1(VRAMP),@PAD1     ; Get second digit
     65FA 5D  
     65FB E0  
     65FC 01
     65FD 40
0643 65FE B2      AND    >0F,@PAD1
     65FF 5D  
     6600 0F  
0644 6601 B4      OR     @PAD1,@PAD0          ; Now PAD0 has the byte.
     6602 5C  
     6603 5D  
0645 6604 BC      ST     @PAD0,@0(@PAD2)      ; Store byte
     6605 CF  
     6606 7D
     6607 00
     6608 5E
     6609 5C  
0646 660A 94      INCT   @INDEX
     660B 61  
0647 660C 91      DINC   @PAD2
     660D 5E  
0648 660E 95      DINCT  @VRAMP
     660F 40  
0649 6610 D4      CEQ    @INDEX,@PAD4         ; Are we at the end, INDEX==COUNT?
     6611 60  
     6612 61  
0650 6613 45      BR     -!                   ; No, continue
     6614 EE  
0651 6615 A4      SUB    @INDEX,@PAD3         ; Reset PAD2:PAD3 pointer (BUGBUG no carry)
     6616 5F  
     6617 61  
0652 6618 06      CALL   BACK2BEGIN           ; Reset VRAMP
     6619 65  
     661A CB
0653 661B 00      RTN                         ; Done
0654          
0655          
0656          *----------------------------------------
0657          * Display in HEX the byte in PAD0
0658          *----------------------------------------
0659          HEXOUT:
0660 661C 0F    XML >F0       ; Jump via >8300
     661D F0  
0661 661E 00    RTN
0662          
0663          HEXOUT1:
0664 661F BC      ST   @PAD0,@PAD4
     6620 60  
     6621 5C  
0665 6622 E6      SRL   >04,@PAD4       isolate first nibble
     6623 60  
     6624 04  
0666 6625 CE      CGT   >09,@PAD4       greater than 9?
     6626 60  
     6627 09  
0667 6628 66      BS    HEX1            yes
     6629 2F  
0668 662A A2      ADD   >30,@PAD4       no: make it char 0-9
     662B 60  
     662C 30  
0669 662D 46      BR    HEX2
     662E 32  
0670 662F A2  HEX1: ADD   >37,@PAD4      yes: make it char A-F
     6630 60  
     6631 37  
0671          HEX2:
0672          ; Output first hex digit (most significant digit)
0673 6632 BC      ST    @PAD4,V@0(@VRAMP)
     6633 E0  
     6634 00
     6635 40
     6636 60  
0674          ; Work on 2nd digit
0675 6637 BC      ST    @PAD0,@PAD4     copy number
     6638 60  
     6639 5C  
0676 663A B2      AND   >0F,@PAD4       isolate second nibble
     663B 60  
     663C 0F  
0677 663D CE      CGT   >09,@PAD4       greater than 9?
     663E 60  
     663F 09  
0678 6640 66      BS    HEX3          yes
     6641 47  
0679 6642 A2      ADD   >30,@PAD4       no: make it char 0-9
     6643 60  
     6644 30  
0680 6645 46      BR    HEX4
     6646 4A  
0681 6647 A2  HEX3  ADD   >37,@PAD4       yes: make it char A-F
     6648 60  
     6649 37  
0682          HEX4:
0683          ; Output 2nd hex digit (least significant digit)
0684 664A BC      ST    @PAD4,V@1(@VRAMP)
     664B E0  
     664C 01
     664D 40
     664E 60  
0685 664F 00      RTN
0686          
0687          * Use the new hex characters which do not have a gap between 9 and A
0688          HEXOUT2:
0689 6650 BC      ST   @PAD0,@PAD4
     6651 60  
     6652 5C  
0690 6653 BC      ST   @PAD0,@PAD5
     6654 61  
     6655 5C  
0691 6656 E6      SRL  >04,@PAD4       isolate first nibble
     6657 60  
     6658 04  
0692 6659 B2      AND  >0F,@PAD5
     665A 61  
     665B 0F  
0693          TWINHEXBC EQU   (HEXBASECH * 256) + HEXBASECH
0694 665C A3      DADD TWINHEXBC,@PAD4
     665D 60  
     665E E0  
     665F E0
0695 6660 BD      DST  @PAD4,V@0(VRAMP)
     6661 E0  
     6662 00
     6663 40
     6664 60  
0696 6665 01      RTNC
0697          
0698          *----------------------------------------
0699          * Screen used to select paging features
0700          *----------------------------------------
0701          PAGINGSCREEN:
0702 6666 BE      ST   ' ',V@VEROFS
     6667 A0  
     6668 A0
     6669 20  
0703 666A 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     666B 02  
     666C 5F
     666D A0  
     666E A1
     666F A0  
     6670 A0
0704 6671 08      FMT
0705 6672 FF      COL LALIGN
     6673 02  
0706 6674 FE      ROW LAYOUTVER
     6675 05  
0707 6676 1A      HTEX '1 DEC 2 INC DUMP ADDR 3 RET'
     6677 31  
     6678 20  
     6679 44  
     667A 45  
     667B 43  
     667C 20  
     667D 32  
     667E 20  
     667F 49  
     6680 4E  
     6681 43  
     6682 20  
     6683 44  
     6684 55  
     6685 4D  
     6686 50  
     6687 20  
     6688 41  
     6689 44  
     668A 44  
     668B 52  
     668C 20  
     668D 33  
     668E 20  
     668F 52  
     6690 45  
     6691 54  
0708 6692 A0      ROW+ >01
0709 6693 FF      COL LALIGN
     6694 02  
0710 6695 FB      FEND
0711          
0712          PKEYWAIT:
0713 6696 03      SCAN
0714 6697 66      BS    PGOTKEY
     6698 9F  
0715 6699 90      INC   V@PATADR
     669A AE  
     669B F8
0716 669C 05      B     PKEYWAIT
     669D 66  
     669E 96
0717          PGOTKEY:
0718 669F 05      B     SCREEN1
     66A0 60  
     66A1 A3
0719          
0720          
0721          
0722          *----------------------------------------
0723          * Read grommy2 version, update on screen.
0724          * Also read and set bank & shadow values.
0725          *----------------------------------------
0726          SHOW_VERSION
0727 66A2 06      CALL G@GINITCMD
     66A3 67  
     66A4 07
0728 66A5 06      CALL G@GSENDCMD
     66A6 67  
     66A7 0E
0729          * Check result of command - did we get OK?
0730 66A8 31      MOVE 2,G@HWIF,@PAD0
     66A9 00  
     66AA 02
     66AB 5C  
     66AC 5F  
     66AD F0
0731 66AE D7      DCEQ >4F4B,@PAD0        ; did we get OK?
     66AF 5C  
     66B0 4F  
     66B1 4B
0732 66B2 66      BS   VER_OK             ; Yes: go to VER_OK
     66B3 BF  
0733          ** No grommy2 detected. Put in dummy data.
0734 66B4 87      DCLR @PAD2              ; Major and minor zero
     66B5 5E  
0735 66B6 BE      ST   99,@PAD4           ; Build 99
     66B7 60  
     66B8 63  
0736 66B9 86      CLR  @SHADOW
     66BA 51  
0737 66BB 86      CLR  @BANK
     66BC 50  
0738 66BD 46      BR   VER1
     66BE DC  
0739          VER_OK:     ; grommy responded, read data
0740          * Copy values from GROM IF to pad
0741 66BF 31      MOVE 3,G@HWIF+8,@PAD2
     66C0 00  
     66C1 03
     66C2 5E  
     66C3 5F  
     66C4 F8
0742          * Get active bank from grommy2
0743 66C5 31      MOVE 1,G@HWIF+3,@BANK
     66C6 00  
     66C7 01
     66C8 50  
     66C9 5F  
     66CA F3
0744 66CB B2      AND  >0F,@BANK
     66CC 50  
     66CD 0F  
0745 66CE D6      CEQ  8,@BANK            ; Is GRAM bank 8 selected?
     66CF 50  
     66D0 08  
0746 66D1 46      BR   NOGRAM1            ; No, we're good
     66D2 D6  
0747 66D3 BE      ST   3,@BANK            ; yes, convert to 3 here
     66D4 50  
     66D5 03  
0748          NOGRAM1:
0749          * Get RAM shadow from grommy2
0750 66D6 31      MOVE 1,G@HWIF+4,@SHADOW
     66D7 00  
     66D8 01
     66D9 51  
     66DA 5F  
     66DB F4
0751          VER1:
0752          * Show major version in p2
0753 66DC BE      ST  '0',@PAD0
     66DD 5C  
     66DE 30  
0754 66DF A0      ADD @PAD2,@PAD0
     66E0 5C  
     66E1 5E  
0755 66E2 BC      ST  @PAD0,V@VEROFS+>A        Write to VRAM
     66E3 A0  
     66E4 AA
     66E5 5C  
0756          * Show minor version in p3
0757 66E6 BE      ST  '0',@PAD0
     66E7 5C  
     66E8 30  
0758 66E9 A0      ADD @PAD3,@PAD0
     66EA 5C  
     66EB 5F  
0759 66EC BC      ST  @PAD0,V@VEROFS+>C        Write to VRAM
     66ED A0  
     66EE AC
     66EF 5C  
0760          * Show build version in p4. The build is two digits from 0 to 99
0761 66F0 86      CLR  @PAD0              Zero fill as the value to divide is 16 bits§
     66F1 5C  
0762 66F2 BC      ST   @PAD4,@PAD1
     66F3 5D  
     66F4 60  
0763 66F5 AE      DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
     66F6 5C  
     66F7 0A  
0764 66F8 A2      ADD  '0',@PAD0
     66F9 5C  
     66FA 30  
0765 66FB BC      ST   @PAD0,V@VEROFS+>E      Write to VRAM
     66FC A0  
     66FD AE
     66FE 5C  
0766 66FF A2      ADD  '0',@PAD1          Remainder
     6700 5D  
     6701 30  
0767 6702 BC      ST   @PAD1,V@VEROFS+>F      Write to VRAM
     6703 A0  
     6704 AF
     6705 5D  
0768 6706 00      RTN
0769          
0770          
0771          *----------------------------------------
0772          * Init command buffer in pad
0773          *----------------------------------------
0774          GINITCMD
0775 6707 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
     6708 00  
     6709 10
     670A 40  
     670B 67  
     670C 1B
0776 670D 00         RTN
0777          
0778          *----------------------------------------
0779          * Send command to grommy2
0780          *----------------------------------------
0781          GSENDCMD
0782 670E BC         ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
     670F 41  
     6710 40  
0783 6711 BA         XOR   >FF,@GCMDBYTE+1
     6712 41  
     6713 FF  
0784 6714 25         MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
     6715 00  
     6716 10
     6717 5F  
     6718 F0
     6719 40  
0785 671A 00         RTN
0786          
0787          
0788          GROMMY_DAT
0789 671B 00         DATA   >00FF,>003F,>0000,>0000
     671C FF
     671D 00  
     671E 3F
     671F 00  
     6720 00
     6721 00  
     6722 00
0790 6723 45         TEXT 'EPGROMMY'
     6724 50  
     6725 47  
     6726 52  
     6727 4F  
     6728 4D  
     6729 4D  
     672A 59  
0791          
0792          
0793          DENSE_FONT ; Define character cells wihtin 4x8 cell
0794          ; Numnbers 0 and 1
0795 672B 22          BYTE >22
0796 672C 56          BYTE >56
0797 672D 52          BYTE >52
0798 672E 52          BYTE >52
0799 672F 52          BYTE >52
0800 6730 52          BYTE >52
0801 6731 27          BYTE >27
0802 6732 00          BYTE >00
0803          ; Define a cell with 2 and 3
0804 6733 26          BYTE >26
0805 6734 51          BYTE >51
0806 6735 11          BYTE >11
0807 6736 26          BYTE >26
0808 6737 41          BYTE >41
0809 6738 41          BYTE >41
0810 6739 76          BYTE >76
0811 673A 00          BYTE >00
0812          ; Define a cell with 4 and 5
0813 673B 17          BYTE >17
0814 673C 34          BYTE >34
0815 673D 54          BYTE >54
0816 673E 76          BYTE >76
0817 673F 11          BYTE >11
0818 6740 11          BYTE >11
0819 6741 16          BYTE >16
0820 6742 00          BYTE >00
0821          ; Define a cell with 6 and 7
0822 6743 37          BYTE >37
0823 6744 41          BYTE >41
0824 6745 62          BYTE >62
0825 6746 52          BYTE >52
0826 6747 52          BYTE >52
0827 6748 52          BYTE >52
0828 6749 22          BYTE >22
0829 674A 00          BYTE >00
0830          ; Define a cell with 8 and 9
0831 674B 22          BYTE >22
0832 674C 55          BYTE >55
0833 674D 55          BYTE >55
0834 674E 23          BYTE >23
0835 674F 51          BYTE >51
0836 6750 51          BYTE >51
0837 6751 26          BYTE >26
0838 6752 00          BYTE >00
0839          ; Define a cell with A and B
0840 6753 26          BYTE >26
0841 6754 55          BYTE >55
0842 6755 55          BYTE >55
0843 6756 76          BYTE >76
0844 6757 55          BYTE >55
0845 6758 55          BYTE >55
0846 6759 56          BYTE >56
0847 675A 00          BYTE >00
0848          ; Define a cell with C and D
0849 675B 36          BYTE >36
0850 675C 45          BYTE >45
0851 675D 45          BYTE >45
0852 675E 45          BYTE >45
0853 675F 45          BYTE >45
0854 6760 45          BYTE >45
0855 6761 36          BYTE >36
0856 6762 00          BYTE >00
0857          ; Define a cell with E and F
0858 6763 77          BYTE >77
0859 6764 44          BYTE >44
0860 6765 44          BYTE >44
0861 6766 66          BYTE >66
0862 6767 44          BYTE >44
0863 6768 44          BYTE >44
0864 6769 74          BYTE >74
0865 676A 00          BYTE >00
0866          
0867          * Test code copied from Mini Memory
0868 676B 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
     676C 00  
     676D 10
     676E 40  
     676F 67  
     6770 1B
0869 6771 BC         ST    @>839A,@>8340                Copy command byte
     6772 40  
     6773 80  
     6774 9A
0870 6775 BC         ST    @>839A,@>8341                The second byte is its complement
     6776 41  
     6777 80  
     6778 9A
0871 6779 BA         XOR   >FF,@>8341
     677A 41  
     677B FF  
0872 677C BC         ST    @>839B,@>8342                Copy p2.
     677D 42  
     677E 80  
     677F 9B
0873 6780 25         MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
     6781 00  
     6782 10
     6783 5F  
     6784 F0
     6785 40  
0874 6786 00         RTN
0875          
0876              copy 'bin2hex.gpl'
              > bin2hex.gpl
0001          * bin2gpl.py output to bin2hex.gpl
0002          * Sat Aug 10 18:25:22 2024
0003          * Binary data
0004          BINDATA:
0005 6787 83    DATA >8302
     6788 02
0006 6789 D0    DATA >d060
     678A 60
0007 678B 83    DATA >835c
     678C 5C
0008 678D 09    DATA >0941
     678E 41
0009 678F 02    DATA >0221
     6790 21
0010 6791 E0    DATA >e000
     6792 00
0011 6793 DB    DATA >dbc1
     6794 C1
0012 6795 FF    DATA >fffe
     6796 FE
0013 6797 D0    DATA >d060
     6798 60
0014 6799 83    DATA >835c
     679A 5C
0015 679B 02    DATA >0241
     679C 41
0016 679D 0F    DATA >0f00
     679E 00
0017 679F 02    DATA >0221
     67A0 21
0018 67A1 E0    DATA >e000
     67A2 00
0019 67A3 DB    DATA >dbc1
     67A4 C1
0020 67A5 FF    DATA >fffe
     67A6 FE
0021 67A7 04    DATA >045b
     67A8 5B
0022          BINLEN EQU >22   ; 34
0023          
              > config.gpl
0877          
0878          *----------------------------------------
0879          * VDP setup for module
0880          *----------------------------------------
0881          GVDPSETUP
0882 67A9 BE      ST    >D0,V@>0300      no sprites
     67AA A3  
     67AB 00
     67AC D0  
0883 67AD BE      ST    >F5,V@>0380      init color table as white on blue for all chars
     67AE A3  
     67AF 80
     67B0 F5  
0884 67B1 35      MOVE  >001F,V@>0380,V@>0381
     67B2 00  
     67B3 1F
     67B4 A3  
     67B5 81
     67B6 A3  
     67B7 80
0885 67B8 07      ALL   >20              erase screen
     67B9 20  
0886 67BA 04      BACK  >F5              screen colors: white on light blue
     67BB F5  
0887 67BC 00      RTN
0888          
0889              COPY 'screen.gpl'
              > screen.gpl
0001          * Character definitions
0002 67BD 00  GUDG96	BYTE >00,>00,>00,>00,>00,>00,>00,>00 ; Character 96
     67BE 00  
     67BF 00  
     67C0 00  
     67C1 00  
     67C2 00  
     67C3 00  
     67C4 00  
0003 67C5 00  GUDG97	BYTE >00,>00,>70,>43,>72,>42,>42,>72 ; Character 97
     67C6 00  
     67C7 70  
     67C8 43  
     67C9 72  
     67CA 42  
     67CB 42  
     67CC 72  
0004 67CD 00  GUDG98	BYTE >00,>28,>08,>A9,>2A,>2E,>2B,>29 ; Character 98
     67CE 28  
     67CF 08  
     67D0 A9  
     67D1 2A  
     67D2 2E  
     67D3 2B  
     67D4 29  
0005 67D5 00  GUDG99	BYTE >00,>00,>0F,>09,>09,>0E,>08,>08 ; Character 99
     67D6 00  
     67D7 0F  
     67D8 09  
     67D9 09  
     67DA 0E  
     67DB 08  
     67DC 08  
0006 67DD 00  GUDG100	BYTE >00,>40,>00,>46,>49,>4F,>48,>46 ; Character 100
     67DE 40  
     67DF 00  
     67E0 46  
     67E1 49  
     67E2 4F  
     67E3 48  
     67E4 46  
0007 67E5 00  GUDG101	BYTE >00,>41,>41,>79,>49,>49,>49,>49 ; Character 101
     67E6 41  
     67E7 41  
     67E8 79  
     67E9 49  
     67EA 49  
     67EB 49  
     67EC 49  
0008 67ED 00  GUDG102	BYTE >00,>40,>40,>1C,>10,>0C,>06,>1C ; Character 102
     67EE 40  
     67EF 40  
     67F0 1C  
     67F1 10  
     67F2 0C  
     67F3 06  
     67F4 1C  
0009 67F5 00  GUDG103	BYTE >00,>00,>00,>00,>00,>00,>1C,>3F ; Character 103
     67F6 00  
     67F7 00  
     67F8 00  
     67F9 00  
     67FA 00  
     67FB 1C  
     67FC 3F  
0010 67FD 00  GUDG104	BYTE >00,>00,>00,>00,>00,>00,>00,>3F ; Character 104
     67FE 00  
     67FF 00  
     6800 00  
     6801 00  
     6802 00  
     6803 00  
     6804 3F  
0011 6805 00  GUDG105	BYTE >00,>00,>00,>00,>00,>00,>00,>9C ; Character 105
     6806 00  
     6807 00  
     6808 00  
     6809 00  
     680A 00  
     680B 00  
     680C 9C  
0012 680D 00  GUDG106	BYTE >00,>00,>00,>00,>00,>00,>07,>3F ; Character 106
     680E 00  
     680F 00  
     6810 00  
     6811 00  
     6812 00  
     6813 07  
     6814 3F  
0013 6815 00  GUDG107	BYTE >00,>00,>00,>00,>00,>00,>00,>F0 ; Character 107
     6816 00  
     6817 00  
     6818 00  
     6819 00  
     681A 00  
     681B 00  
     681C F0  
0014 681D 00  GUDG108	BYTE >00,>00,>00,>00,>00,>00,>06,>9F ; Character 108
     681E 00  
     681F 00  
     6820 00  
     6821 00  
     6822 00  
     6823 06  
     6824 9F  
0015 6825 00  GUDG109	BYTE >00,>00,>00,>00,>00,>00,>03,>8F ; Character 109
     6826 00  
     6827 00  
     6828 00  
     6829 00  
     682A 00  
     682B 03  
     682C 8F  
0016 682D 00  GUDG110	BYTE >00,>00,>00,>00,>00,>00,>00,>C7 ; Character 110
     682E 00  
     682F 00  
     6830 00  
     6831 00  
     6832 00  
     6833 00  
     6834 C7  
0017 6835 00  GUDG111	BYTE >00,>00,>00,>00,>00,>00,>00,>F3 ; Character 111
     6836 00  
     6837 00  
     6838 00  
     6839 00  
     683A 00  
     683B 00  
     683C F3  
0018 683D 00  GUDG112	BYTE >00,>00,>00,>00,>00,>00,>C0,>F1 ; Character 112
     683E 00  
     683F 00  
     6840 00  
     6841 00  
     6842 00  
     6843 C0  
     6844 F1  
0019 6845 00  GUDG113	BYTE >00,>00,>00,>00,>00,>00,>60,>F8 ; Character 113
     6846 00  
     6847 00  
     6848 00  
     6849 00  
     684A 00  
     684B 60  
     684C F8  
0020 684D 00  GUDG114	BYTE >00,>00,>00,>00,>00,>00,>00,>FC ; Character 114
     684E 00  
     684F 00  
     6850 00  
     6851 00  
     6852 00  
     6853 00  
     6854 FC  
0021 6855 00  GUDG115	BYTE >00,>03,>0F,>1F,>3F,>3F,>7F,>7E ; Character 115
     6856 03  
     6857 0F  
     6858 1F  
     6859 3F  
     685A 3F  
     685B 7F  
     685C 7E  
0022 685D 00  GUDG116	BYTE >00,>F0,>FC,>FE,>FF,>FF,>3F,>3F ; Character 116
     685E F0  
     685F FC  
     6860 FE  
     6861 FF  
     6862 FF  
     6863 3F  
     6864 3F  
0023 6865 00  GUDG117	BYTE >00,>00,>00,>00,>00,>80,>80,>80 ; Character 117
     6866 00  
     6867 00  
     6868 00  
     6869 00  
     686A 80  
     686B 80  
     686C 80  
0024 686D 7F  GUDG118	BYTE >7F,>FF,>FF,>FE,>FE,>FE,>FE,>FE ; Character 118
     686E FF  
     686F FF  
     6870 FE  
     6871 FE  
     6872 FE  
     6873 FE  
     6874 FE  
0025 6875 FF  GUDG119	BYTE >FF,>FF,>FF,>7F,>7F,>7F,>7F,>7F ; Character 119
     6876 FF  
     6877 FF  
     6878 7F  
     6879 7F  
     687A 7F  
     687B 7F  
     687C 7F  
0026 687D 3F  GUDG120	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>3F,>3F ; Character 120
     687E 3F  
     687F 3F  
     6880 3F  
     6881 3F  
     6882 3F  
     6883 3F  
     6884 3F  
0027 6885 BC  GUDG121	BYTE >BC,>FC,>FC,>FD,>FD,>FD,>F9,>C1 ; Character 121
     6886 FC  
     6887 FC  
     6888 FD  
     6889 FD  
     688A FD  
     688B F9  
     688C C1  
0028 688D 7F  GUDG122	BYTE >7F,>FF,>FF,>FC,>FC,>FC,>FC,>FC ; Character 122
     688E FF  
     688F FF  
     6890 FC  
     6891 FC  
     6892 FC  
     6893 FC  
     6894 FC  
0029 6895 F8  GUDG123	BYTE >F8,>FC,>FE,>FE,>FE,>FE,>FE,>FE ; Character 123
     6896 FC  
     6897 FE  
     6898 FE  
     6899 FE  
     689A FE  
     689B FE  
     689C FE  
0030 689D FF  GUDG124	BYTE >FF,>FF,>FF,>9F,>9F,>9F,>9F,>9F ; Character 124
     689E FF  
     689F FF  
     68A0 9F  
     68A1 9F  
     68A2 9F  
     68A3 9F  
     68A4 9F  
0031 68A5 DF  GUDG125	BYTE >DF,>FF,>FF,>E7,>C7,>C7,>C7,>C7 ; Character 125
     68A6 FF  
     68A7 FF  
     68A8 E7  
     68A9 C7  
     68AA C7  
     68AB C7  
     68AC C7  
0032 68AD E7  GUDG126	BYTE >E7,>E7,>E7,>F7,>F7,>F7,>F7,>F7 ; Character 126
     68AE E7  
     68AF E7  
     68B0 F7  
     68B1 F7  
     68B2 F7  
     68B3 F7  
     68B4 F7  
0033 68B5 FF  GUDG127	BYTE >FF,>FF,>FF,>F3,>F3,>F3,>F3,>F3 ; Character 127
     68B6 FF  
     68B7 FF  
     68B8 F3  
     68B9 F3  
     68BA F3  
     68BB F3  
     68BC F3  
0034 68BD FB  GUDG128	BYTE >FB,>FF,>FF,>FC,>F8,>F8,>F8,>F8 ; Character 128
     68BE FF  
     68BF FF  
     68C0 FC  
     68C1 F8  
     68C2 F8  
     68C3 F8  
     68C4 F8  
0035 68C5 FC  GUDG129	BYTE >FC,>FC,>FC,>FE,>FE,>FE,>FE,>FE ; Character 129
     68C6 FC  
     68C7 FC  
     68C8 FE  
     68C9 FE  
     68CA FE  
     68CB FE  
     68CC FE  
0036 68CD FE  GUDG130	BYTE >FE,>FE,>7E,>7E,>7E,>7E,>7E,>3F ; Character 130
     68CE FE  
     68CF 7E  
     68D0 7E  
     68D1 7E  
     68D2 7E  
     68D3 7E  
     68D4 3F  
0037 68D5 3F  GUDG131	BYTE >3F,>7F,>7F,>7F,>7E,>7E,>7E,>7E ; Character 131
     68D6 7F  
     68D7 7F  
     68D8 7F  
     68D9 7E  
     68DA 7E  
     68DB 7E  
     68DC 7E  
0038 68DD 7E  GUDG132	BYTE >7E,>7E,>7E,>00,>00,>00,>00,>01 ; Character 132
     68DE 7E  
     68DF 7E  
     68E0 00  
     68E1 00  
     68E2 00  
     68E3 00  
     68E4 01  
0039 68E5 3F  GUDG133	BYTE >3F,>3F,>3F,>7F,>7F,>FF,>FF,>FE ; Character 133
     68E6 3F  
     68E7 3F  
     68E8 7F  
     68E9 7F  
     68EA FF  
     68EB FF  
     68EC FE  
0040 68ED 80  GUDG134	BYTE >80,>80,>80,>80,>00,>00,>00,>00 ; Character 134
     68EE 80  
     68EF 80  
     68F0 80  
     68F1 00  
     68F2 00  
     68F3 00  
     68F4 00  
0041 68F5 FE  GUDG135	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FF ; Character 135
     68F6 FE  
     68F7 FE  
     68F8 FE  
     68F9 FE  
     68FA FE  
     68FB FE  
     68FC FF  
0042 68FD 7F  GUDG136	BYTE >7F,>7F,>7F,>7F,>7F,>7F,>7F,>FF ; Character 136
     68FE 7F  
     68FF 7F  
     6900 7F  
     6901 7F  
     6902 7F  
     6903 7F  
     6904 FF  
0043 6905 C1  GUDG137	BYTE >C1,>81,>81,>81,>81,>81,>81,>81 ; Character 137
     6906 81  
     6907 81  
     6908 81  
     6909 81  
     690A 81  
     690B 81  
     690C 81  
0044 690D FC  GUDG138	BYTE >FC,>FC,>FC,>FC,>FC,>FC,>FC,>FC ; Character 138
     690E FC  
     690F FC  
     6910 FC  
     6911 FC  
     6912 FC  
     6913 FC  
     6914 FC  
0045 6915 FE  GUDG139	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FE ; Character 139
     6916 FE  
     6917 FE  
     6918 FE  
     6919 FE  
     691A FE  
     691B FE  
     691C FE  
0046 691D 9F  GUDG140	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>9F,>9F ; Character 140
     691E 9F  
     691F 9F  
     6920 9F  
     6921 9F  
     6922 9F  
     6923 9F  
     6924 9F  
0047 6925 C7  GUDG141	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>C7,>C7 ; Character 141
     6926 C7  
     6927 C7  
     6928 C7  
     6929 C7  
     692A C7  
     692B C7  
     692C C7  
0048 692D F7  GUDG142	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>F7,>F7 ; Character 142
     692E F7  
     692F F7  
     6930 F7  
     6931 F7  
     6932 F7  
     6933 F7  
     6934 F7  
0049 6935 F3  GUDG143	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>F3,>F3 ; Character 143
     6936 F3  
     6937 F3  
     6938 F3  
     6939 F3  
     693A F3  
     693B F3  
     693C F3  
0050 693D F8  GUDG144	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>F8,>F8 ; Character 144
     693E F8  
     693F F8  
     6940 F8  
     6941 F8  
     6942 F8  
     6943 F8  
     6944 F8  
0051 6945 3F  GUDG145	BYTE >3F,>3F,>3F,>3F,>1F,>1F,>1F,>1F ; Character 145
     6946 3F  
     6947 3F  
     6948 3F  
     6949 1F  
     694A 1F  
     694B 1F  
     694C 1F  
0052 694D 7E  GUDG146	BYTE >7E,>7E,>7E,>7E,>FC,>FC,>FC,>FC ; Character 146
     694E 7E  
     694F 7E  
     6950 7E  
     6951 FC  
     6952 FC  
     6953 FC  
     6954 FC  
0053 6955 01  GUDG147	BYTE >01,>03,>07,>07,>0F,>0F,>1F,>3F ; Character 147
     6956 03  
     6957 07  
     6958 07  
     6959 0F  
     695A 0F  
     695B 1F  
     695C 3F  
0054 695D FC  GUDG148	BYTE >FC,>FC,>F8,>F8,>F0,>E0,>E0,>C0 ; Character 148
     695E FC  
     695F F8  
     6960 F8  
     6961 F0  
     6962 E0  
     6963 E0  
     6964 C0  
0055 6965 7F  GUDG149	BYTE >7F,>7F,>3F,>00,>FE,>FE,>FF,>7F ; Character 149
     6966 7F  
     6967 3F  
     6968 00  
     6969 FE  
     696A FE  
     696B FF  
     696C 7F  
0056 696D FF  GUDG150	BYTE >FF,>FF,>7F,>7F,>7F,>7F,>FF,>FE ; Character 150
     696E FF  
     696F 7F  
     6970 7F  
     6971 7F  
     6972 7F  
     6973 FF  
     6974 FE  
0057 6975 3F  GUDG151	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>00,>00 ; Character 151
     6976 3F  
     6977 3F  
     6978 3F  
     6979 3F  
     697A 3F  
     697B 00  
     697C 00  
0058 697D 81  GUDG152	BYTE >81,>81,>80,>80,>80,>80,>00,>00 ; Character 152
     697E 81  
     697F 80  
     6980 80  
     6981 80  
     6982 80  
     6983 00  
     6984 00  
0059 6985 FC  GUDG153	BYTE >FC,>FC,>FF,>FF,>7F,>1F,>00,>00 ; Character 153
     6986 FC  
     6987 FF  
     6988 FF  
     6989 7F  
     698A 1F  
     698B 00  
     698C 00  
0060 698D FE  GUDG154	BYTE >FE,>FE,>FC,>FC,>F8,>E0,>00,>00 ; Character 154
     698E FE  
     698F FC  
     6990 FC  
     6991 F8  
     6992 E0  
     6993 00  
     6994 00  
0061 6995 9F  GUDG155	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>00,>00 ; Character 155
     6996 9F  
     6997 9F  
     6998 9F  
     6999 9F  
     699A 9F  
     699B 00  
     699C 00  
0062 699D C7  GUDG156	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>00,>00 ; Character 156
     699E C7  
     699F C7  
     69A0 C7  
     69A1 C7  
     69A2 C7  
     69A3 00  
     69A4 00  
0063 69A5 F7  GUDG157	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>00,>00 ; Character 157
     69A6 F7  
     69A7 F7  
     69A8 F7  
     69A9 F7  
     69AA F7  
     69AB 00  
     69AC 00  
0064 69AD F3  GUDG158	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>00,>00 ; Character 158
     69AE F3  
     69AF F3  
     69B0 F3  
     69B1 F3  
     69B2 F3  
     69B3 00  
     69B4 00  
0065 69B5 F8  GUDG159	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>00,>00 ; Character 159
     69B6 F8  
     69B7 F8  
     69B8 F8  
     69B9 F8  
     69BA F8  
     69BB 00  
     69BC 00  
0066 69BD FE  GUDG160	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>00,>00 ; Character 160
     69BE FE  
     69BF FE  
     69C0 FE  
     69C1 FE  
     69C2 FE  
     69C3 00  
     69C4 00  
0067 69C5 1F  GUDG161	BYTE >1F,>0F,>0F,>0F,>0F,>1F,>3F,>3F ; Character 161
     69C6 0F  
     69C7 0F  
     69C8 0F  
     69C9 0F  
     69CA 1F  
     69CB 3F  
     69CC 3F  
0068 69CD FC  GUDG162	BYTE >FC,>FC,>FC,>FC,>F8,>F8,>F8,>F0 ; Character 162
     69CE FC  
     69CF FC  
     69D0 FC  
     69D1 F8  
     69D2 F8  
     69D3 F8  
     69D4 F0  
0069 69D5 3F  GUDG163	BYTE >3F,>7F,>7F,>7F,>7F,>7F,>00,>00 ; Character 163
     69D6 7F  
     69D7 7F  
     69D8 7F  
     69D9 7F  
     69DA 7F  
     69DB 00  
     69DC 00  
0070 69DD 80  GUDG164	BYTE >80,>FF,>FF,>FF,>FF,>FF,>00,>00 ; Character 164
     69DE FF  
     69DF FF  
     69E0 FF  
     69E1 FF  
     69E2 FF  
     69E3 00  
     69E4 00  
0071 69E5 00  GUDG165	BYTE >00,>00,>80,>80,>80,>80,>00,>00 ; Character 165
     69E6 00  
     69E7 80  
     69E8 80  
     69E9 80  
     69EA 80  
     69EB 00  
     69EC 00  
0072 69ED 3F  GUDG166	BYTE >3F,>0F,>00,>00,>00,>00,>00,>00 ; Character 166
     69EE 0F  
     69EF 00  
     69F0 00  
     69F1 00  
     69F2 00  
     69F3 00  
     69F4 00  
0073 69F5 FC  GUDG167	BYTE >FC,>F0,>00,>00,>00,>00,>00,>00 ; Character 167
     69F6 F0  
     69F7 00  
     69F8 00  
     69F9 00  
     69FA 00  
     69FB 00  
     69FC 00  
0074 69FD 3F  GUDG168	BYTE >3F,>00,>00,>00,>00,>00,>00,>00 ; Character 168
     69FE 00  
     69FF 00  
     6A00 00  
     6A01 00  
     6A02 00  
     6A03 00  
     6A04 00  
0075 6A05 E0  GUDG169	BYTE >E0,>00,>00,>00,>00,>00,>00,>00 ; Character 169
     6A06 00  
     6A07 00  
     6A08 00  
     6A09 00  
     6A0A 00  
     6A0B 00  
     6A0C 00  
0076 6A0D 3E  GUDG170	BYTE >3E,>60,>60,>60,>60,>60,>32,>1E ; Character 170
     6A0E 60  
     6A0F 60  
     6A10 60  
     6A11 60  
     6A12 60  
     6A13 32  
     6A14 1E  
0077 6A15 3E  GUDG171	BYTE >3E,>66,>43,>C3,>43,>62,>76,>3C ; Character 171
     6A16 66  
     6A17 43  
     6A18 C3  
     6A19 43  
     6A1A 62  
     6A1B 76  
     6A1C 3C  
0078 6A1D 63  GUDG172	BYTE >63,>73,>7B,>6F,>6F,>67,>67,>63 ; Character 172
     6A1E 73  
     6A1F 7B  
     6A20 6F  
     6A21 6F  
     6A22 67  
     6A23 67  
     6A24 63  
0079 6A25 7C  GUDG173	BYTE >7C,>60,>60,>7C,>60,>60,>60,>60 ; Character 173
     6A26 60  
     6A27 60  
     6A28 7C  
     6A29 60  
     6A2A 60  
     6A2B 60  
     6A2C 60  
0080 6A2D C7  GUDG174	BYTE >C7,>CC,>CC,>CC,>CC,>CC,>CE,>C7 ; Character 174
     6A2E CC  
     6A2F CC  
     6A30 CC  
     6A31 CC  
     6A32 CC  
     6A33 CE  
     6A34 C7  
0081 6A35 C0  GUDG175	BYTE >C0,>00,>00,>C0,>E0,>60,>E0,>C0 ; Character 175
     6A36 00  
     6A37 00  
     6A38 C0  
     6A39 E0  
     6A3A 60  
     6A3B E0  
     6A3C C0  
0082 6A3D 61  GLINE0_25 BYTE >61,>62,>63,>64,>65,>66,>67,>68,>68,>69,>6A,>6B,>68,>6C,>6D,>6E,>6F,>70,>71,>72,>68,>73,>74,>75
     6A3E 62  
     6A3F 63  
     6A40 64  
     6A41 65  
     6A42 66  
     6A43 67  
     6A44 68  
     6A45 68  
     6A46 69  
     6A47 6A  
     6A48 6B  
     6A49 68  
     6A4A 6C  
     6A4B 6D  
     6A4C 6E  
     6A4D 6F  
     6A4E 70  
     6A4F 71  
     6A50 72  
     6A51 68  
     6A52 73  
     6A53 74  
     6A54 75  
0083 6A55 76  GLINE1_25 BYTE >76,>77,>78,>79,>7A,>7B,>78,>7C,>7D,>7E,>7F,>80,>81,>82,>83,>84,>85,>86
     6A56 77  
     6A57 78  
     6A58 79  
     6A59 7A  
     6A5A 7B  
     6A5B 78  
     6A5C 7C  
     6A5D 7D  
     6A5E 7E  
     6A5F 7F  
     6A60 80  
     6A61 81  
     6A62 82  
     6A63 83  
     6A64 84  
     6A65 85  
     6A66 86  
0084 6A67 87  GLINE2_24 BYTE >87,>88,>78,>89,>8A,>8B,>78,>8C,>8D,>8E,>8F,>90,>8B,>91,>92,>93,>94
     6A68 88  
     6A69 78  
     6A6A 89  
     6A6B 8A  
     6A6C 8B  
     6A6D 78  
     6A6E 8C  
     6A6F 8D  
     6A70 8E  
     6A71 8F  
     6A72 90  
     6A73 8B  
     6A74 91  
     6A75 92  
     6A76 93  
     6A77 94  
0085 6A78 95  GLINE3_25 BYTE >95,>96,>97,>98,>99,>9A,>97,>9B,>9C,>9D,>9E,>9F,>A0,>A1,>A2,>A3,>A4,>A5
     6A79 96  
     6A7A 97  
     6A7B 98  
     6A7C 99  
     6A7D 9A  
     6A7E 97  
     6A7F 9B  
     6A80 9C  
     6A81 9D  
     6A82 9E  
     6A83 9F  
     6A84 A0  
     6A85 A1  
     6A86 A2  
     6A87 A3  
     6A88 A4  
     6A89 A5  
0086 6A8A A6  GLINE4_9 BYTE >A6,>A7
     6A8B A7  
0087 6A8C A8  GLINE4_28 BYTE >A8,>A9,>AA,>AB,>AC,>AD,>AE,>AF
     6A8D A9  
     6A8E AA  
     6A8F AB  
     6A90 AC  
     6A91 AD  
     6A92 AE  
     6A93 AF  
0088          
0089          G_SCR1
0090 6A94 31      MOVE >0280,G@GUDG96,V@>0B00 ; Copy our screen chars
     6A95 02  
     6A96 80
     6A97 AB  
     6A98 00
     6A99 67  
     6A9A BD
0091          
0092 6A9B 31  	MOVE >0018,G@GLINE0_25,V@>0001
     6A9C 00  
     6A9D 18
     6A9E A0  
     6A9F 01
     6AA0 6A  
     6AA1 3D
0093 6AA2 31  	MOVE >0012,G@GLINE1_25,V@>0027
     6AA3 00  
     6AA4 12
     6AA5 A0  
     6AA6 27
     6AA7 6A  
     6AA8 55
0094 6AA9 31  	MOVE >0011,G@GLINE2_24,V@>0047
     6AAA 00  
     6AAB 11
     6AAC A0  
     6AAD 47
     6AAE 6A  
     6AAF 67
0095 6AB0 31  	MOVE >0012,G@GLINE3_25,V@>0067
     6AB1 00  
     6AB2 12
     6AB3 A0  
     6AB4 67
     6AB5 6A  
     6AB6 78
0096 6AB7 31  	MOVE >0002,G@GLINE4_9,V@>0087
     6AB8 00  
     6AB9 02
     6ABA A0  
     6ABB 87
     6ABC 6A  
     6ABD 8A
0097 6ABE 31  	MOVE >0008,G@GLINE4_28,V@>0094
     6ABF 00  
     6AC0 08
     6AC1 A0  
     6AC2 94
     6AC3 6A  
     6AC4 8C
0098          
0099 6AC5 00      RTN
0100          
