XGA99 CROSS-ASSEMBLER   VERSION 3.0.1
              > config.gpl
0001          * config.gpl
0002          * Configurator for GROMMY2
0003          * At this point this is just a demo how to render the generated screen.gpl
0004          * EP 2023-11-26
0005          *
0006          * Compile the GPL code to binary with:
0007          * xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
0008          * output file is config.bin, since the filename ends with g it is treated
0009          * by an emulator such as js99er.net as a GROM file.
0010          *
0011          * This file includes the screen.gpl file at the very end.
0012          *
0013          
0014          LALIGN    EQU >02              Left alignment of text
0015          LALIGN2   EQU >03
0016          LAYOUTVER EQU 5         Row for Version number
0017          LAYOUTBAN EQU 8        Row for selected bank display
0018          VEROFS    EQU 32*LAYOUTVER
0019          VALIDIND  EQU VEROFS-29         ; Indicator for valid command
0020          VRAMDUMPAREA EQU VEROFS+224+32
0021          
0022          * A few variables for the grommy2 config to use.
0023          * I am not sure if these are free to use, but I will try :)
0024          XREG    EQU >832C   ; ** Program text or token pointer (in BASIC?)
0025          YREG    EQU >832E   ; ** Pointer to line number tale (in BASIC)
0026          ZREG    EQU >8330   ; ** Start of line number table pointer (in BASIC)
0027          ; >8332 .. 8337 seem to contain pointers also used by BASIC not GPL
0028          
0029          * Grommy2 command buffer in scratchpad
0030          GCMDBYTE EQU >8340
0031          GCMDP2   EQU >8342
0032          GCMDP3   EQU >8343
0033          GCMDP4   EQU >8344
0034          GCMDP5   EQU >8345
0035          GCMDP6   EQU >8346
0036          GCMDP7   EQU >8347
0037          
0038          BANK    EQU >8350           Active bank
0039          SHADOW  EQU >8351           Shadow enable / disable
0040          PAD0    EQU >835C
0041          PAD1    EQU >835D
0042          PAD2    EQU >835E
0043          PAD3    EQU >835F
0044          PAD4    EQU >8360
0045          PAD5    EQU >8361
0046          INDEX   EQU PAD5
0047          DUMPA   EQU >8362           ; GROM Dump address
0048          VRAMP   EQU >8340           ; VRAM ptr overlays GCMDBYTE
0049          
0050          DSP     EQU >8372           ; GPL data stack pointer
0051          SCANKEY EQU >8375
0052          VDPTIMER EQU >8379          ; Incremented by VDP interrupts
0053          * Hardware interface address
0054          HWIF     EQU >5FF0
0055          
0056          HEXBASECH EQU >E0         ; Base character for hex display
0057          ALIVECH   EQU >DF         ; Placed in top right corner, show we are alive
0058          
0059          
0060 6000 AA  G6000  DATA >AA01             standard header  version 1
     6001 01
0061 6002 00         DATA >0000             # of programs 0
     6003 00
0062 6004 00         DATA >0000             no power up
     6005 00
0063 6006 60         DATA G6010             program
     6007 10
0064 6008 00         DATA >0000             DSRs
     6009 00
0065 600A 00         DATA >0000             subprograms
     600B 00
0066 600C 00         DATA >0000
     600D 00
0067 600E 00         DATA >0000
     600F 00
0068          
0069 6010 00  G6010  DATA >0000         * No next program
     6011 00
0070 6012 60         DATA GPROG
     6013 2A
0071 6014 0E         STRI 'GROMMY2 CONFIG'
     6015 47  
     6016 52  
     6017 4F  
     6018 4D  
     6019 4D  
     601A 59  
     601B 32  
     601C 20  
     601D 43  
     601E 4F  
     601F 4E  
     6020 46  
     6021 49  
     6022 47  
0072          
0073          GVREGS
0074 6023 E0      BYTE  >E0              VDP registers values: standard mode
0075 6024 00      BYTE  >00              screen image at >0000
0076 6025 0E      BYTE  >0E              color table at >0380
0077 6026 01      BYTE  >01              char patterns at >0800
0078 6027 06      BYTE  >06              sprite attributes at >0300
0079 6028 00      BYTE  >00              sprite patterns at >0000
0080 6029 F5      BYTE  >F5              text/screen colors: white / light blue
0081          
0082          GPROG
0083 602A 86      CLR   @>8374
     602B 74  
0084 602C BF      DST   >0900,@>834A     load upper case chars 32->
     602D 4A  
     602E 09  
     602F 00
0085 6030 06      CALL  G@>0018
     6031 00  
     6032 18
0086          * Setup roughly as with mini memory
0087 6033 39      MOVE >0007,G@GVREGS,#>01    Set VDP Regs
     6034 00  
     6035 07
     6036 01  
     6037 60  
     6038 23
0088 6039 86      CLR   V@>0800          clear charpats 0-31
     603A A8  
     603B 00
0089 603C 35      MOVE  >00FF,V@>0800,V@>0801
     603D 00  
     603E FF
     603F A8  
     6040 01
     6041 A8  
     6042 00
0090          
0091 6043 BE      ST    >7E,@>8373       init subroutine stack
     6044 73  
     6045 7E  
0092 6046 87      DCLR  @>8322           clear error code
     6047 22  
0093 6048 87      DCLR  @>8348           clear flags
     6049 48  
0094          
0095 604A 87      DCLR   @DUMPA
     604B 62  
0096 604C 86      CLR    @BANK           Actually init from grommy2
     604D 50  
0097 604E 86      CLR    @SHADOW         Actually init from grommy2
     604F 51  
0098          
0099 6050 87      DCLR   @XREG
     6051 2C  
0100 6052 87      DCLR   @YREG
     6053 2E  
0101 6054 87      DCLR   @ZREG
     6055 30  
0102          
0103 6056 06      CALL G@GVDPSETUP
     6057 67  
     6058 68
0104          
0105 6059 06      CALL G@G_SCR1       ; Setup the screen which was automatically generated
     605A 6A  
     605B 53
0106          * Setup additional chars E0..EF as numbers 0..9 and A..F
0107          * 0x980 = hex(0x800+ord('0')*8)
0108          * 0xa08 = hex(0x800+ord('A')*8)
0109          * 0xf00 = hex(0x800+0xe0*8)
0110          * 0xf50 = hex(0x800+0xea*8)
0111          CHSRC1 EQU >800+(8*'0')
0112          CHSRC2 EQU >800+(8*'A')
0113          CHOFS1 EQU >800+(8*HEXBASECH)
0114          CHOFS2 EQU >800+(8*(HEXBASECH+10))
0115 605C 35      MOVE 10*8,V@CHSRC1,V@CHOFS1  * 10 number patterns
     605D 00  
     605E 50
     605F AF  
     6060 0F
     6061 00
     6062 A9  
     6063 80
0116 6064 35      MOVE  6*8,V@CHSRC2,V@CHOFS2
     6065 00  
     6066 30
     6067 AF  
     6068 0F
     6069 50
     606A AA  
     606B 08
0117          * Set the colors for these characters.
0118 606C BE      ST   >A5,V@>39C
     606D A3  
     606E 9C
     606F A5  
0119 6070 BE      ST   >A5,V@>39D
     6071 A3  
     6072 9D
     6073 A5  
0120          * Make the fonts "bold"
0121 6074 BF      DST  >F00,@VRAMP
     6075 40  
     6076 0F  
     6077 00
0122 6078 BC  !   ST   V@0(@VRAMP),@PAD0
     6079 5C  
     607A E0  
     607B 00
     607C 40
0123 607D E6      SRL  1,@PAD0
     607E 5C  
     607F 01  
0124 6080 B4      OR   V@0(@VRAMP),@PAD0
     6081 5C  
     6082 E0  
     6083 00
     6084 40
0125 6085 BC      ST  @PAD0,V@0(@VRAMP)
     6086 E0  
     6087 00
     6088 40
     6089 5C  
0126 608A 91      DINC @VRAMP
     608B 40  
0127 608C D7      DCEQ >F80,@VRAMP
     608D 40  
     608E 0F  
     608F 80
0128 6090 40      BR   -!
     6091 78  
0129          * Copy the fonts to make inverse duplicates
0130 6092 35      MOVE >80,V@>F00,V@>F80
     6093 00  
     6094 80
     6095 AF  
     6096 0F
     6097 80
     6098 AF  
     6099 0F
     609A 00
0131 609B BE      ST   >5A,V@>39E
     609C A3  
     609D 9E
     609E 5A  
0132 609F BE      ST   >5A,V@>39F
     60A0 A3  
     60A1 9F
     60A2 5A  
0133          
0134          SCREEN1:
0135          * Use the FMT token to add some strings on the screen
0136 60A3 08      FMT
0137 60A4 FF      COL LALIGN
     60A5 02  
0138 60A6 FE      ROW LAYOUTVER
     60A7 05  
0139 60A8 1D      HTEX 'VERSION 0.0.00 BANK 0 SHADOW 0'
     60A9 56  
     60AA 45  
     60AB 52  
     60AC 53  
     60AD 49  
     60AE 4F  
     60AF 4E  
     60B0 20  
     60B1 30  
     60B2 2E  
     60B3 30  
     60B4 2E  
     60B5 30  
     60B6 30  
     60B7 20  
     60B8 42  
     60B9 41  
     60BA 4E  
     60BB 4B  
     60BC 20  
     60BD 30  
     60BE 20  
     60BF 53  
     60C0 48  
     60C1 41  
     60C2 44  
     60C3 4F  
     60C4 57  
     60C5 20  
     60C6 30  
0140 60C7 A0      ROW+ >01
0141 60C8 FF      COL LALIGN
     60C9 02  
0142 60CA 19      HTEX 'SELECT GROM BANK FOR READS'
     60CB 53  
     60CC 45  
     60CD 4C  
     60CE 45  
     60CF 43  
     60D0 54  
     60D1 20  
     60D2 47  
     60D3 52  
     60D4 4F  
     60D5 4D  
     60D6 20  
     60D7 42  
     60D8 41  
     60D9 4E  
     60DA 4B  
     60DB 20  
     60DC 46  
     60DD 4F  
     60DE 52  
     60DF 20  
     60E0 52  
     60E1 45  
     60E2 41  
     60E3 44  
     60E4 53  
0143 60E5 A0      ROW+ >01
0144 60E6 FF      COL LALIGN2
     60E7 03  
0145 60E8 0C      HTEX '0 SYSTEM BANK'
     60E9 30  
     60EA 20  
     60EB 53  
     60EC 59  
     60ED 53  
     60EE 54  
     60EF 45  
     60F0 4D  
     60F1 20  
     60F2 42  
     60F3 41  
     60F4 4E  
     60F5 4B  
0146 60F6 A0      ROW+ >01
0147 60F7 FF      COL LALIGN2
     60F8 03  
0148 60F9 0C      HTEX '1 USER BANK 1'
     60FA 31  
     60FB 20  
     60FC 55  
     60FD 53  
     60FE 45  
     60FF 52  
     6100 20  
     6101 42  
     6102 41  
     6103 4E  
     6104 4B  
     6105 20  
     6106 31  
0149 6107 A0      ROW+ >01
0150 6108 FF      COL LALIGN2
     6109 03  
0151 610A 0C      HTEX '2 USER BANK 2'
     610B 32  
     610C 20  
     610D 55  
     610E 53  
     610F 45  
     6110 52  
     6111 20  
     6112 42  
     6113 41  
     6114 4E  
     6115 4B  
     6116 20  
     6117 32  
0152 6118 A0      ROW+ >01
0153 6119 FF      COL LALIGN2
     611A 03  
0154 611B 0A      HTEX '3 GRAM BANK'
     611C 33  
     611D 20  
     611E 47  
     611F 52  
     6120 41  
     6121 4D  
     6122 20  
     6123 42  
     6124 41  
     6125 4E  
     6126 4B  
0155          
0156 6127 A1      ROW+ >02
0157 6128 FF      COL LALIGN
     6129 02  
0158 612A 09      HTEX 'SHADOW RAM'
     612B 53  
     612C 48  
     612D 41  
     612E 44  
     612F 4F  
     6130 57  
     6131 20  
     6132 52  
     6133 41  
     6134 4D  
0159 6135 A0      ROW+ >01
0160 6136 FF      COL LALIGN2
     6137 03  
0161 6138 15      HTEX '4 ENABLE     5 DISABLE'
     6139 34  
     613A 20  
     613B 45  
     613C 4E  
     613D 41  
     613E 42  
     613F 4C  
     6140 45  
     6141 20  
     6142 20  
     6143 20  
     6144 20  
     6145 20  
     6146 35  
     6147 20  
     6148 44  
     6149 49  
     614A 53  
     614B 41  
     614C 42  
     614D 4C  
     614E 45  
0162          
0163 614F A1      ROW+ >02
0164 6150 FF      COL LALIGN
     6151 02  
0165 6152 16      HTEX 'FLASH GRAM TO USER BANK'
     6153 46  
     6154 4C  
     6155 41  
     6156 53  
     6157 48  
     6158 20  
     6159 47  
     615A 52  
     615B 41  
     615C 4D  
     615D 20  
     615E 54  
     615F 4F  
     6160 20  
     6161 55  
     6162 53  
     6163 45  
     6164 52  
     6165 20  
     6166 42  
     6167 41  
     6168 4E  
     6169 4B  
0166 616A A0      ROW+ >01
0167 616B FF      COL LALIGN2
     616C 03  
0168 616D 14      HTEX '6 BANK 1     7 BANK 2'
     616E 36  
     616F 20  
     6170 42  
     6171 41  
     6172 4E  
     6173 4B  
     6174 20  
     6175 31  
     6176 20  
     6177 20  
     6178 20  
     6179 20  
     617A 20  
     617B 37  
     617C 20  
     617D 42  
     617E 41  
     617F 4E  
     6180 4B  
     6181 20  
     6182 32  
0169          
0170 6183 A1      ROW+ >02
0171 6184 FF      COL LALIGN
     6185 02  
0172 6186 14      HTEX 'COPY ROM BANK TO GRAM'
     6187 43  
     6188 4F  
     6189 50  
     618A 59  
     618B 20  
     618C 52  
     618D 4F  
     618E 4D  
     618F 20  
     6190 42  
     6191 41  
     6192 4E  
     6193 4B  
     6194 20  
     6195 54  
     6196 4F  
     6197 20  
     6198 47  
     6199 52  
     619A 41  
     619B 4D  
0173 619C A0      ROW+ >01
0174 619D FF      COL LALIGN2
     619E 03  
0175 619F 16      HTEX 'A COPY FROM SYSTEM BANK'
     61A0 41  
     61A1 20  
     61A2 43  
     61A3 4F  
     61A4 50  
     61A5 59  
     61A6 20  
     61A7 46  
     61A8 52  
     61A9 4F  
     61AA 4D  
     61AB 20  
     61AC 53  
     61AD 59  
     61AE 53  
     61AF 54  
     61B0 45  
     61B1 4D  
     61B2 20  
     61B3 42  
     61B4 41  
     61B5 4E  
     61B6 4B  
0176 61B7 A0      ROW+ >01
0177 61B8 FF      COL LALIGN2
     61B9 03  
0178 61BA 16      HTEX 'B COPY FROM USER BANK 1'
     61BB 42  
     61BC 20  
     61BD 43  
     61BE 4F  
     61BF 50  
     61C0 59  
     61C1 20  
     61C2 46  
     61C3 52  
     61C4 4F  
     61C5 4D  
     61C6 20  
     61C7 55  
     61C8 53  
     61C9 45  
     61CA 52  
     61CB 20  
     61CC 42  
     61CD 41  
     61CE 4E  
     61CF 4B  
     61D0 20  
     61D1 31  
0179 61D2 A0      ROW+ >01
0180 61D3 FF      COL LALIGN2
     61D4 03  
0181 61D5 16      HTEX 'C COPY FROM USER BANK 2'
     61D6 43  
     61D7 20  
     61D8 43  
     61D9 4F  
     61DA 50  
     61DB 59  
     61DC 20  
     61DD 46  
     61DE 52  
     61DF 4F  
     61E0 4D  
     61E1 20  
     61E2 55  
     61E3 53  
     61E4 45  
     61E5 52  
     61E6 20  
     61E7 42  
     61E8 41  
     61E9 4E  
     61EA 4B  
     61EB 20  
     61EC 32  
0182          
0183 61ED A0      ROW+ >01
0184 61EE FF      COL LALIGN
     61EF 02  
0185 61F0 08      HTEX '9 MORE...'
     61F1 39  
     61F2 20  
     61F3 4D  
     61F4 4F  
     61F5 52  
     61F6 45  
     61F7 2E  
     61F8 2E  
     61F9 2E  
0186          
0187 61FA FB      FEND
0188          
0189          * Pattern address of character ALIVECH
0190          PATADR EQU >0800+(8*ALIVECH)
0191          * Test a couple of chars
0192          *    MOVE 64,G@DENSE_FONT,V@PATADR-64
0193          *    ST >F7,V@0
0194          *    ST >F8,V@1
0195          *    ST >F9,V@2
0196          *    ST >FA,V@3
0197          *    ST >FB,V@4
0198          *    ST >FC,V@5
0199          *    ST >FD,V@6
0200          *    ST >FE,V@7
0201          
0202 61FB 06      CALL  SHOW_VERSION      ; Get version, bank, shadow info
     61FC 66  
     61FD 61
0203 61FE 05      B     GUPDATE           ; update screen
     61FF 62  
     6200 B8
0204          MAINSEL:
0205 6201 06      CALL  CLEARVALID
     6202 65  
     6203 70
0206          GWAIT
0207 6204 03      SCAN
0208 6205 62      BS    GOTKEY
     6206 11  
0209          * We did not get a key. Animate something.
0210 6207 BE      ST    ALIVECH,V@>001F      Write char FF to top right corner
     6208 A0  
     6209 1F
     620A DF  
0211 620B 90      INC   V@PATADR
     620C AE  
     620D F8
0212 620E 05      B    G@GWAIT          wait for the user to press a key
     620F 62  
     6210 04
0213          
0214          
0215          GOTKEY:
0216 6211 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     6212 A0  
     6213 82
     6214 75  
0217 6215 CE      CGT   '0'-1,@SCANKEY       greater than >= 0
     6216 75  
     6217 2F  
0218 6218 42      BR    GG01              no skip forward
     6219 B2  
0219 621A CE      CGT   '9',@SCANKEY        Key greater than '9'?
     621B 75  
     621C 39  
0220 621D 62      BS    CHECK_ABC             ; Yes: skip forward
     621E 38  
0221 621F A6      SUB   '0',@SCANKEY
     6220 75  
     6221 30  
0222 6222 8A      CASE  @SCANKEY
     6223 75  
0223 6224 42      BR    KEY0
     6225 5C  
0224 6226 42      BR    KEY1
     6227 5C  
0225 6228 42      BR    KEY2
     6229 5C  
0226 622A 42      BR    KEY3
     622B 67  
0227 622C 42      BR    KEY4
     622D 4D  
0228 622E 42      BR    KEY5
     622F 58  
0229 6230 42      BR    KEY6
     6231 6F  
0230 6232 42      BR    KEY7
     6233 7A  
0231 6234 42      BR    KEY8
     6235 7F  
0232 6236 42      BR    KEY9
     6237 88  
0233          CHECK_ABC
0234          ; Commands A,B and C
0235 6238 CE      CGT   'A'-1,@SCANKEY
     6239 75  
     623A 40  
0236 623B 42      BR    GG01
     623C B2  
0237 623D CE      CGT   'C',@SCANKEY
     623E 75  
     623F 43  
0238 6240 62      BS    GG01
     6241 B2  
0239 6242 A6      SUB   'A',@SCANKEY
     6243 75  
     6244 41  
0240 6245 8A      CASE  @SCANKEY
     6246 75  
0241 6247 42      BR    KEYA
     6248 8B  
0242 6249 42      BR    KEYB
     624A 97  
0243 624B 42      BR    KEYC
     624C 9C  
0244          
0245          KEY4:
0246 624D BE      ST  1,@SHADOW
     624E 51  
     624F 01  
0247          SHADOWSET
0248 6250 BC      ST  @SHADOW,@GCMDP2    ; Set parameter 2
     6251 42  
     6252 51  
0249 6253 BE      ST  3,@GCMDBYTE         ; Command 3 shadow enable/disable
     6254 40  
     6255 03  
0250 6256 42      BR  ISSUECMD
     6257 A5  
0251          KEY5:
0252 6258 86      CLR @SHADOW
     6259 51  
0253 625A 42      BR  SHADOWSET
     625B 50  
0254          KEY0
0255          KEY1
0256          KEY2
0257 625C BC      ST   @SCANKEY,@BANK
     625D 50  
     625E 75  
0258 625F BC      ST   @SCANKEY,@GCMDP2    ; Set parameter 2
     6260 42  
     6261 75  
0259          BANKSEL
0260 6262 BE      ST   1,@GCMDBYTE         ; Command 1 select bank for reads
     6263 40  
     6264 01  
0261 6265 42      BR  ISSUECMD
     6266 A5  
0262          KEY3
0263 6267 BC      ST   @SCANKEY,@BANK
     6268 50  
     6269 75  
0264 626A BE      ST   8,@GCMDP2           ; GRAM bank is 8
     626B 42  
     626C 08  
0265 626D 42      BR   BANKSEL
     626E 62  
0266          
0267          KEY6:                       ; Flash GRAM to user bank 1
0268 626F BE      ST   >01,@GCMDP2        ; User bank 1
     6270 42  
     6271 01  
0269          GRAM2FLASH
0270 6272 BE      ST   >3F,@GCMDP3        ; Bit mask: flash entire bank
     6273 43  
     6274 3F  
0271 6275 BE      ST   4,@GCMDBYTE
     6276 40  
     6277 04  
0272 6278 42      BR  ISSUECMD
     6279 A5  
0273          KEY7:                       ; Flash GRAM to user bank 2
0274 627A BE      ST   >02,@GCMDP2        ; User bank 2
     627B 42  
     627C 02  
0275 627D 42      BR   GRAM2FLASH
     627E 72  
0276          KEY8
0277 627F BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6280 A0  
     6281 83
     6282 2A  
0278 6283 06      CALL  SHOW_VERSION
     6284 66  
     6285 61
0279 6286 42      BR    MAINSEL
     6287 01  
0280          KEY9:
0281 6288 05      B   DUMPSCREEN
     6289 62  
     628A ED
0282          
0283          KEYA:                       ; Copy bank 0 to GRAM
0284 628B BE      ST    0,@GCMDP2
     628C 42  
     628D 00  
0285          COPY2GRAM:
0286 628E BE      ST    '*',V@VALIDIND    ; Command valid indicator
     628F A0  
     6290 83
     6291 2A  
0287 6292 BE      ST    2,@GCMDBYTE
     6293 40  
     6294 02  
0288 6295 42      BR    ISSUECMD
     6296 A5  
0289          KEYB:
0290 6297 BE      ST    1,@GCMDP2
     6298 42  
     6299 01  
0291 629A 42      BR    COPY2GRAM
     629B 8E  
0292          KEYC:
0293 629C BE      ST    2,@GCMDP2
     629D 42  
     629E 02  
0294 629F 42      BR    COPY2GRAM
     62A0 8E  
0295          
0296          ISSUECMD1:                  ; Clear last 4 parameter bytes
0297 62A1 87      DCLR  @GCMDBYTE+4
     62A2 44  
0298 62A3 87      DCLR  @GCMDBYTE+6
     62A4 46  
0299          ISSUECMD:
0300 62A5 31      MOVE  8,G@GROMMY_DAT+8,@GCMDBYTE+8  ; Unlock string
     62A6 00  
     62A7 08
     62A8 48  
     62A9 66  
     62AA E2
0301 62AB BE      ST    '*',V@VALIDIND    ; Command valid indicator
     62AC A0  
     62AD 83
     62AE 2A  
0302 62AF 06      CALL  GSENDCMD          ; Send command to HW
     62B0 66  
     62B1 CD
0303          
0304          GG01:
0305 62B2 D6      CEQ   >0F,@SCANKEY       is it Fctn-9?
     62B3 75  
     62B4 0F  
0306 62B5 42      BR    G@GCONT2         no: GCONT2
     62B6 B8  
0307 62B7 0B      EXIT                   yes: reset the TI-99/4A
0308          
0309          GCONT2
0310          * Update screen to reflect current status
0311          GUPDATE
0312          * Status of Shadow RAM enable/disable
0313 62B8 BE      ST  '0',@PAD0
     62B9 5C  
     62BA 30  
0314 62BB A0      ADD @SHADOW,@PAD0
     62BC 5C  
     62BD 51  
0315 62BE BC      ST  @PAD0,V@VEROFS+>1F        Write to VRAM
     62BF A0  
     62C0 BF
     62C1 5C  
0316          * Status of selected bank
0317 62C2 BE      ST  '0',@PAD0
     62C3 5C  
     62C4 30  
0318 62C5 A0      ADD @BANK,@PAD0
     62C6 5C  
     62C7 50  
0319 62C8 BC      ST  @PAD0,V@VEROFS+>16  ; Write to VRAM
     62C9 A0  
     62CA B6
     62CB 5C  
0320          
0321          
0322          * Start update GROM read bank. First erase bank markings.
0323          BANKOFS EQU (32*LAYOUTBAN)+4
0324 62CC BE      ST ' ',V@BANKOFS
     62CD A1  
     62CE 04
     62CF 20  
0325 62D0 BE      ST ' ',V@BANKOFS+>20
     62D1 A1  
     62D2 24
     62D3 20  
0326 62D4 BE      ST ' ',V@BANKOFS+>40
     62D5 A1  
     62D6 44
     62D7 20  
0327 62D8 BE      ST ' ',V@BANKOFS+>60
     62D9 A1  
     62DA 64
     62DB 20  
0328 62DC 87      DCLR @PAD0
     62DD 5C  
0329 62DE BC      ST   @BANK,@PAD3        Copy to low byte the bank #
     62DF 5F  
     62E0 50  
0330 62E1 E3      DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
     62E2 5E  
     62E3 00  
     62E4 05
0331 62E5 BE      ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
     62E6 E1  
     62E7 04
     62E8 5E
     62E9 2A  
0332          * End update GROM read bank.
0333 62EA 05      B   G@MAINSEL
     62EB 62  
     62EC 01
0334          
0335          *----------------------------------------
0336          * Second screen with a few features.
0337          *----------------------------------------
0338          DUMPSCREEN:
0339 62ED BE      ST   ' ',V@VEROFS
     62EE A0  
     62EF A0
     62F0 20  
0340 62F1 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     62F2 02  
     62F3 5F
     62F4 A0  
     62F5 A1
     62F6 A0  
     62F7 A0
0341 62F8 08      FMT
0342 62F9 FF      COL LALIGN
     62FA 02  
0343 62FB FE      ROW LAYOUTVER
     62FC 05  
0344 62FD 1A      HTEX '1 DEC 2 INC DUMP ADDR 3 RET'
     62FE 31  
     62FF 20  
     6300 44  
     6301 45  
     6302 43  
     6303 20  
     6304 32  
     6305 20  
     6306 49  
     6307 4E  
     6308 43  
     6309 20  
     630A 44  
     630B 55  
     630C 4D  
     630D 50  
     630E 20  
     630F 41  
     6310 44  
     6311 44  
     6312 52  
     6313 20  
     6314 33  
     6315 20  
     6316 52  
     6317 45  
     6318 54  
0345 6319 A0      ROW+ >01
0346 631A FF      COL LALIGN
     631B 02  
0347 631C 12      HTEX '4 FILL GRAM WITH FF'
     631D 34  
     631E 20  
     631F 46  
     6320 49  
     6321 4C  
     6322 4C  
     6323 20  
     6324 47  
     6325 52  
     6326 41  
     6327 4D  
     6328 20  
     6329 57  
     632A 49  
     632B 54  
     632C 48  
     632D 20  
     632E 46  
     632F 46  
0348 6330 A0      ROW+ >01
0349 6331 FF      COL LALIGN
     6332 02  
0350 6333 1B      HTEX '5 COPY 24K GROM 8000 TO GRAM'
     6334 35  
     6335 20  
     6336 43  
     6337 4F  
     6338 50  
     6339 59  
     633A 20  
     633B 32  
     633C 34  
     633D 4B  
     633E 20  
     633F 47  
     6340 52  
     6341 4F  
     6342 4D  
     6343 20  
     6344 38  
     6345 30  
     6346 30  
     6347 30  
     6348 20  
     6349 54  
     634A 4F  
     634B 20  
     634C 47  
     634D 52  
     634E 41  
     634F 4D  
0351 6350 A0      ROW+ >01
0352 6351 FF      COL LALIGN
     6352 02  
0353 6353 0E      HTEX '6 ARM EXECUTE X'
     6354 36  
     6355 20  
     6356 41  
     6357 52  
     6358 4D  
     6359 20  
     635A 45  
     635B 58  
     635C 45  
     635D 43  
     635E 55  
     635F 54  
     6360 45  
     6361 20  
     6362 58  
0354 6363 A0      ROW+ >01
0355 6364 FF      COL LALIGN
     6365 02  
0356 6366 11      HTEX '7 ARM EXECUTE 4000'
     6367 37  
     6368 20  
     6369 41  
     636A 52  
     636B 4D  
     636C 20  
     636D 45  
     636E 58  
     636F 45  
     6370 43  
     6371 55  
     6372 54  
     6373 45  
     6374 20  
     6375 34  
     6376 30  
     6377 30  
     6378 30  
0357 6379 A0      ROW+ >01
0358 637A FF      COL LALIGN
     637B 02  
0359 637C 18      HTEX '0 BURN FIRMWARE FROM GRAM'
     637D 30  
     637E 20  
     637F 42  
     6380 55  
     6381 52  
     6382 4E  
     6383 20  
     6384 46  
     6385 49  
     6386 52  
     6387 4D  
     6388 57  
     6389 41  
     638A 52  
     638B 45  
     638C 20  
     638D 46  
     638E 52  
     638F 4F  
     6390 4D  
     6391 20  
     6392 47  
     6393 52  
     6394 41  
     6395 4D  
0360 6396 A0      ROW+ >01
0361 6397 FF      COL LALIGN
     6398 02  
0362 6399 18      HTEX 'X Y Z: EDIT VAR X, Y OR Z'
     639A 58  
     639B 20  
     639C 59  
     639D 20  
     639E 5A  
     639F 3A  
     63A0 20  
     63A1 45  
     63A2 44  
     63A3 49  
     63A4 54  
     63A5 20  
     63A6 56  
     63A7 41  
     63A8 52  
     63A9 20  
     63AA 58  
     63AB 2C  
     63AC 20  
     63AD 59  
     63AE 20  
     63AF 4F  
     63B0 52  
     63B1 20  
     63B2 5A  
0363 63B3 FB      FEND
0364          
0365 63B4 31      MOVE BINLEN,G@BINDATA,@>8300 ; Move assembly code in place
     63B5 00  
     63B6 22
     63B7 00  
     63B8 67  
     63B9 46
0366          
0367          * ; test characters on last line
0368          *     ST  HEXBASECH,@PAD0
0369          *     DST 32*23,@VRAMP          * Beginning of last row
0370          * !   ST  @PAD0,V@0(@VRAMP)
0371          *     DINC @VRAMP
0372          *     INC @PAD0
0373          *     CZ  @PAD0
0374          *     BR  -!
0375          
0376          
0377          ; First test in units of frame count (VDPTIMER)
0378          ; Test runs for 4 frames.
0379          ;   GPL with original HEXOUT: 119 ticks
0380          ;   GPL call to GPL HEXOUT routine issuing XML >F0:  55 ticks
0381          ;   Replace GPL call with XML >F0: 47 ticks
0382          ;   All GPL with new hex characters, no gap between '9' and 'A': 87 ticks
0383          ;     This also handles two characers at a time. But still slow.
0389          
0390          **    B  SKIPBENCH
0391          ; Run benchmark
0392 63BA BE      ST    4,@XREG               ; Loop counter
     63BB 2C  
     63BC 04  
0393 63BD BC      ST    @VDPTIMER,@XREG+1     ; Read timer
     63BE 2D  
     63BF 79  
0394 63C0 06  !   CALL  G@DODUMP
     63C1 64  
     63C2 0E
0395 63C3 A3      DADD  8,@DUMPA
     63C4 62  
     63C5 00  
     63C6 08
0396 63C7 92      DEC   @XREG
     63C8 2C  
0397 63C9 8E      CZ    @XREG
     63CA 2C  
0398 63CB 43      BR   -!
     63CC C0  
0399 63CD BC      ST    @VDPTIMER,@XREG       ; Read timer
     63CE 2C  
     63CF 79  
0400 63D0 A7      DSUB  4*10,@DUMPA
     63D1 62  
     63D2 00  
     63D3 28
0401          ** SKIPBENCH:
0402          
0403          MAKEDUMP:
0404 63D4 BD      DST  @YREG,@DUMPA
     63D5 62  
     63D6 2E  
0405 63D7 06      CALL G@DODUMP
     63D8 64  
     63D9 0E
0406 63DA 06      CALL  CLEARVALID
     63DB 65  
     63DC 70
0407          ; Wait for keypress
0408          KW1:
0409 63DD 03      SCAN
0410 63DE 63      BS    DGOTKEY
     63DF E6  
0411 63E0 90      INC   V@PATADR
     63E1 AE  
     63E2 F8
0412 63E3 05      B     KW1
     63E4 63  
     63E5 DD
0413          DGOTKEY:
0414 63E6 BC      ST    @SCANKEY,V@VEROFS-30  ; Make key visible.
     63E7 A0  
     63E8 82
     63E9 75  
0415 63EA CE      CGT   'X'-1,@SCANKEY    ; Key >= 'X'
     63EB 75  
     63EC 57  
0416 63ED 64      BS    XYZ               ; Yes: go to XYZ
     63EE 66  
0417 63EF CE      CGT   '0'-1,@SCANKEY
     63F0 75  
     63F1 2F  
0418 63F2 43      BR    KW1               ; Key less than zero -> loop
     63F3 DD  
0419 63F4 CE      CGT   '7',@SCANKEY      ; Key over '7' -> loop
     63F5 75  
     63F6 37  
0420 63F7 63      BS    KW1
     63F8 DD  
0421 63F9 A6      SUB   '0',@SCANKEY
     63FA 75  
     63FB 30  
0422 63FC 8A      CASE  @SCANKEY
     63FD 75  
0423 63FE 44      BR    DKEY0
     63FF EC  
0424 6400 44      BR    DKEY1
     6401 D0  
0425 6402 44      BR    DKEY2
     6403 D7  
0426 6404 44      BR    DKEY3
     6405 DE  
0427 6406 45      BR    DKEY4
     6407 0B  
0428 6408 45      BR    DKEY5
     6409 2A  
0429 640A 45      BR    DKEY6
     640B 49  
0430 640C 45      BR    DKEY7
     640D 6A  
0431          
0432          DODUMP:
0433 640E BF      DST   VRAMDUMPAREA,@VRAMP
     640F 40  
     6410 01  
     6411 A0
0434 6412 86      CLR   @PAD2             ; Row counter
     6413 5E  
0435 6414 BE      ST    '*',V@VALIDIND
     6415 A0  
     6416 83
     6417 2A  
0436          DUMP2:
0437 6418 BE      ST    ' ',V@>FFFF(VRAMP)    ; setup VRAM address in case assembly used
     6419 EF  
     641A FF
     641B FF
     641C 40
     641D 20  
0438 641E BC      ST    @DUMPA,@PAD0      ; Hi byte off address
     641F 5C  
     6420 62  
0001 6421 0F      XML >F0
     6422 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0440 6423 A3      DADD  2,@VRAMP
     6424 40  
     6425 00  
     6426 02
0441 6427 BC      ST    @DUMPA+1,@PAD0    ; Lo byte off address
     6428 5C  
     6429 63  
0001 642A 0F      XML >F0
     642B F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0443 642C BE      ST    ':',V@2(@VRAMP)
     642D E0  
     642E 02
     642F 40
     6430 3A  
0444 6431 A3      DADD  3,@VRAMP
     6432 40  
     6433 00  
     6434 03
0445 6435 86      CLR   @PAD1             ; column counter
     6436 5D  
0446          ; Dump 8 bytes from from 16 bit ptr  DUMPA
0447          DUMP1:
0448 6437 33      MOVE  1,G@0(@DUMPA),@PAD0    ; Read from GROM pointed to by DUMPA
     6438 00  
     6439 01
     643A 5C  
     643B 00  
     643C 00
     643D 62
0001 643E 0F      XML >F0
     643F F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0450 6440 BE      ST    ' ',V@2(@VRAMP)
     6441 E0  
     6442 02
     6443 40
     6444 20  
0451 6445 A3      DADD  3,@VRAMP
     6446 40  
     6447 00  
     6448 03
0452 6449 91      DINC  @DUMPA
     644A 62  
0453 644B 90      INC   @PAD1
     644C 5D  
0454 644D D6      CEQ   8,@PAD1           ; 8 columns - are we done?
     644E 5D  
     644F 08  
0455 6450 44      BR    DUMP1             ; No: jump to dump1
     6451 37  
0456          ; Advance VRAM pointer, we add and mask to bring pointer to beginning
0457          ; of next line.
0458 6452 A3      DADD  >1F,@VRAMP
     6453 40  
     6454 00  
     6455 1F
0459 6456 B3      DAND  >0FE0,@VRAMP
     6457 40  
     6458 0F  
     6459 E0
0460 645A 90      INC   @PAD2             ; inc Row
     645B 5E  
0461 645C D6      CEQ   8,@PAD2           ; Done with 8 rows?
     645D 5E  
     645E 08  
0462 645F 44      BR    DUMP2             ; No: jump to dump2
     6460 18  
0463 6461 A7      DSUB  8*8,@DUMPA           ; Undo the incs in the loop above
     6462 62  
     6463 00  
     6464 40
0464 6465 00      RTN
0465          
0466          ; Check if we have button X Y Z pressed
0467          XYZ:
0468 6466 CE      CGT   'Z',@SCANKEY    ; Above Z?
     6467 75  
     6468 5A  
0469 6469 63      BS    KW1             ; Yes: KW1
     646A DD  
0470          ; Ok now we need to ask the user for a value and store it to X, Y or Z register.
0471          ; Show the current value of the variable after character code
0472 646B BF      DST   VEROFS-29,@VRAMP ; Location in VRAM
     646C 40  
     646D 00  
     646E 83
0473 646F BC      ST    @SCANKEY,@PAD3
     6470 5F  
     6471 75  
0474 6472 A6      SUB   'X',@PAD3       ; Now pad is 0,1,2 for X,Y,Z
     6473 5F  
     6474 58  
0475 6475 E2      SLL   1,@PAD3         ; Multiply by 2
     6476 5F  
     6477 01  
0476 6478 86      CLR   @PAD2           ; clear high byte
     6479 5E  
0477 647A A3      DADD  XREG,@PAD2       ; Add address of XREG, now PAD1:PAD2 is a pointer to value
     647B 5E  
     647C 83  
     647D 2C
0478          
0479 647E BC      ST    @0(@PAD2),@PAD0  ; Hi byte of reg
     647F 5C  
     6480 CF  
     6481 7D
     6482 00
     6483 5E
0001 6484 0F      XML >F0
     6485 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0481 6486 A3      DADD  2,@VRAMP
     6487 40  
     6488 00  
     6489 02
0482 648A BC      ST    @1(@PAD2),@PAD0  ; Lo byte of reg
     648B 5C  
     648C CF  
     648D 7D
     648E 01
     648F 5E
0001 6490 0F      XML >F0
     6491 F0  
0002              ;;;; CALL  HEXOUT1
0003              ;;; CALL  HEXOUT2
0484 6492 A7      DSUB  2,@VRAMP          ; Point to beginning of hex digits
     6493 40  
     6494 00  
     6495 02
0485 6496 BE      ST    4,@PAD4           ; 4 digits to edit, VRAMP points to them
     6497 60  
     6498 04  
0486 6499 06      CALL  EDITHEX           ; go and edit them
     649A 65  
     649B 81
0487          ; YREG is used as dump addres. If it changed, refresh screen.
0488 649C D5      DCEQ  @YREG,@DUMPA
     649D 62  
     649E 2E  
0489 649F 43      BR    MAKEDUMP
     64A0 D4  
0490 64A1 05      B     G@KW1
     64A2 63  
     64A3 DD
0491          
0492          
0493          
0494          ASKCONFIRM:
0495          ; Ask for confirmation. Clear a few rows to clarify
0496 64A4 BE      ST   ' ',V@VEROFS
     64A5 A0  
     64A6 A0
     64A7 20  
0497 64A8 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64A9 02  
     64AA 5F
     64AB A0  
     64AC A1
     64AD A0  
     64AE A0
0498 64AF 08      FMT
0499 64B0 FF      COL LALIGN
     64B1 02  
0500 64B2 FE      ROW LAYOUTVER
     64B3 05  
0501 64B4 15      HTEX '!!PRESS 1 TO CONFIRM!!'
     64B5 21  
     64B6 21  
     64B7 50  
     64B8 52  
     64B9 45  
     64BA 53  
     64BB 53  
     64BC 20  
     64BD 31  
     64BE 20  
     64BF 54  
     64C0 4F  
     64C1 20  
     64C2 43  
     64C3 4F  
     64C4 4E  
     64C5 46  
     64C6 49  
     64C7 52  
     64C8 4D  
     64C9 21  
     64CA 21  
0502 64CB FB      FEND
0503          WAIT0:
0504 64CC 03      SCAN
0505 64CD 44      BR    WAIT0
     64CE CC  
0506 64CF 00      RTN
0507          
0508          DKEY1:
0509 64D0 A7      DSUB  64,@YREG
     64D1 2E  
     64D2 00  
     64D3 40
0510 64D4 05      B     MAKEDUMP
     64D5 63  
     64D6 D4
0511          DKEY2:
0512 64D7 A3      DADD  64,@YREG
     64D8 2E  
     64D9 00  
     64DA 40
0513 64DB 05      B     MAKEDUMP
     64DC 63  
     64DD D4
0514          DKEY3:
0515 64DE BE      ST   ' ',V@VEROFS
     64DF A0  
     64E0 A0
     64E1 20  
0516 64E2 35      MOVE 768-VEROFS-1,V@VEROFS,V@VEROFS+1   ; Clear screen bottom
     64E3 02  
     64E4 5F
     64E5 A0  
     64E6 A1
     64E7 A0  
     64E8 A0
0517 64E9 05      B     SCREEN1
     64EA 60  
     64EB A3
0518          DKEY0:      ; Burn to Flash
0519 64EC 06      CALL  G@ASKCONFIRM
     64ED 64  
     64EE A4
0520 64EF D6      CEQ   '1',@SCANKEY       is the key one?
     64F0 75  
     64F1 31  
0521 64F2 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     64F3 ED  
0522          ; Yes, continue to Flash the MCU
0523 64F4 04      BACK  >F3              screen colors: white on some other color
     64F5 F3  
0524 64F6 BE      ST    'F',V@VALIDIND    ; Command valid indicator
     64F7 A0  
     64F8 83
     64F9 46  
0525 64FA BE      ST    6,@GCMDBYTE
     64FB 40  
     64FC 06  
0526 64FD BF      DST   >1234,@GCMDBYTE+2
     64FE 42  
     64FF 12  
     6500 34
0527 6501 87      DCLR  @GCMDBYTE+4
     6502 44  
0528 6503 87      DCLR  @GCMDBYTE+6
     6504 46  
0529 6505 06      CALL  ISSUECMD
     6506 62  
     6507 A5
0530          ; We probably do not return from this call... GROMMY might be in a funny state
0531 6508 05      B     G@MAKEDUMP
     6509 63  
     650A D4
0532          
0533          DKEY4:      ; Command to fill GRAM with >FF, all 24K
0534 650B BF      DST   >FFFF,@PAD2   ; Fill value, 2 bytes
     650C 5E  
     650D FF  
     650E FF
0535 650F BE      ST    '*',V@VALIDIND    ; Command valid indicator
     6510 A0  
     6511 83
     6512 2A  
0536 6513 87      DCLR  @PAD4
     6514 60  
0537 6515 2D  !   MOVE  2,@PAD2,G@0(@PAD4)    ; store to grom
     6516 00  
     6517 02
     6518 00  
     6519 00
     651A 60
     651B 5E  
0538 651C 95      DINCT @PAD4
     651D 60  
0539 651E D7      DCEQ  >6000,@PAD4
     651F 60  
     6520 60  
     6521 00
0540 6522 45      BR    -!
     6523 15  
0541 6524 06      CALL  CLEARVALID
     6525 65  
     6526 70
0542 6527 05      B     MAKEDUMP
     6528 63  
     6529 D4
0543          
0544          DKEY5:
0545 652A BE      ST    '*',V@VALIDIND    ; Command valid indicator
     652B A0  
     652C 83
     652D 2A  
0546 652E 21      MOVE >2000,G@>8000,G@>0000
     652F 20  
     6530 00
     6531 00  
     6532 00
     6533 80  
     6534 00
0547 6535 21      MOVE >2000,G@>A000,G@>2000
     6536 20  
     6537 00
     6538 20  
     6539 00
     653A A0  
     653B 00
0548 653C 21      MOVE >2000,G@>C000,G@>4000
     653D 20  
     653E 00
     653F 40  
     6540 00
     6541 C0  
     6542 00
0549 6543 06      CALL  CLEARVALID
     6544 65  
     6545 70
0550 6546 05      B     MAKEDUMP
     6547 63  
     6548 D4
0551          
0552          DKEY6:      ; ARM execute at address X
0553 6549 BD      DST   @XREG,@PAD0
     654A 5C  
     654B 2C  
0554 654C B6      OR    >0100,@PAD0
     654D 5C  
     654E 00  
0555 654F BD      DST   @PAD0,@GCMDBYTE+2   ; thumb bit high
     6550 42  
     6551 5C  
0556          DKEY6ASK:
0557 6552 06      CALL  G@ASKCONFIRM
     6553 64  
     6554 A4
0558 6555 D6      CEQ   '1',@SCANKEY       is the key one?
     6556 75  
     6557 31  
0559 6558 42      BR    G@DUMPSCREEN       no: DUMPSCREEN
     6559 ED  
0560 655A BE      ST    'F',V@VALIDIND    ; Command valid indicator
     655B A0  
     655C 83
     655D 46  
0561 655E BE      ST    7,@GCMDBYTE
     655F 40  
     6560 07  
0562 6561 87      DCLR  @GCMDBYTE+4
     6562 44  
0563 6563 87      DCLR  @GCMDBYTE+6
     6564 46  
0564 6565 06      CALL  ISSUECMD
     6566 62  
     6567 A5
0565          ; We probably do not return from this call... GROMMY might be in a funny state
0566 6568 43      BR    MAKEDUMP
     6569 D4  
0567          
0568          DKEY7:
0569 656A BF      DST   >0140,@GCMDBYTE+2  ; ARM has different byte order
     656B 42  
     656C 01  
     656D 40
0570 656E 45      BR    DKEY6ASK
     656F 52  
0571          
0572          *----------------------------------------
0573          CLEARVALID:
0574 6570 BE      ST    ' ',V@VALIDIND
     6571 A0  
     6572 83
     6573 20  
0575 6574 BE      ST    ' ',V@VALIDIND+1
     6575 A0  
     6576 84
     6577 20  
0576 6578 BE      ST    ' ',V@VALIDIND+2
     6579 A0  
     657A 85
     657B 20  
0577 657C BE      ST    ' ',V@VALIDIND+3
     657D A0  
     657E 86
     657F 20  
0578 6580 00      RTN
0579          
0580          *----------------------------------------
0581          * Edit HEX
0582          * Number already dsiplayed with E0..EF or F0..FF.
0583          * Parameters:
0584          *   VRAMP points to the screen area.
0585          *   PAD2:PAD3 points to the value.
0586          *   PAD4 number of digits to edit. Must be even.
0587          *----------------------------------------
0588          EDITHEX:
0589 6581 86      CLR  @INDEX   ; current digit index
     6582 61  
0590          EWAIT:
0591 6583 03      SCAN
0592 6584 65      BS   EGOTKEY
     6585 A2  
0593          ; No key. Flash the cursor pointed at VRAMP by copying bit 4 of frame counter
0594          ; to the character code.
0595 6586 BC      ST   @VDPTIMER,@PAD0
     6587 5C  
     6588 79  
0596 6589 B2      AND  >10,@PAD0
     658A 5C  
     658B 10  
0597 658C BC      ST   V@0(@VRAMP),@PAD1
     658D 5D  
     658E E0  
     658F 00
     6590 40
0598 6591 B2      AND  >EF,@PAD1
     6592 5D  
     6593 EF  
0599 6594 B4      OR   @PAD1,@PAD0
     6595 5C  
     6596 5D  
0600 6597 BC      ST  @PAD0,V@0(@VRAMP)
     6598 E0  
     6599 00
     659A 40
     659B 5C  
0601 659C 90      INC   V@PATADR
     659D AE  
     659E F8
0602 659F 05      B    EWAIT
     65A0 65  
     65A1 83
0603          
0604          EGOTKEY:    ; We received a key. If it is '0' - '9' or 'A'-'F' it is a hex digit, thus edit.
0605 65A2 CE      CGT   '0'-1,@SCANKEY       ; greater than >= 0
     65A3 75  
     65A4 2F  
0606 65A5 45      BR    ENODIGIT             ; No -> ENODIGIT
     65A6 E1  
0607 65A7 CE      CGT   '9',@SCANKEY         ; Key greater than '9'?
     65A8 75  
     65A9 39  
0608 65AA 65      BS    CHECKAF
     65AB D1  
0609 65AC A6      SUB   '0',@SCANKEY         ; Here we have '0'-'9' make it 0-9
     65AD 75  
     65AE 30  
0610          GOTDIGIT:
0611 65AF A2      ADD   HEXBASECH,@SCANKEY
     65B0 75  
     65B1 E0  
0612 65B2 BC      ST    @SCANKEY,V@0(@VRAMP)  ; Store digit into VRAM.
     65B3 E0  
     65B4 00
     65B5 40
     65B6 75  
0613 65B7 91      DINC  @VRAMP
     65B8 40  
0614 65B9 90      INC   @INDEX
     65BA 61  
0615 65BB D4      CEQ   @INDEX,@PAD4          ; Index=number of digitss?
     65BC 60  
     65BD 61  
0616 65BE 45      BR    EWAIT                 ; No: get back to waiting next key
     65BF 83  
0617 65C0 06      CALL  BACK2BEGIN
     65C1 65  
     65C2 C6
0618 65C3 05      B     EWAIT                 ; Wait for next keypress
     65C4 65  
     65C5 83
0619          
0620          BACK2BEGIN:
0621 65C6 B2      AND   >EF,V@0(VRAMP)        ; Yes: make sure no cursor show here.
     65C7 E0  
     65C8 00
     65C9 40
     65CA EF  
0622 65CB A4      SUB   @INDEX,@VRAMP+1       ; Yes: Reset VRAMP back to beginning of number (BUGBUG: carry not handled!)
     65CC 41  
     65CD 61  
0623 65CE 86      CLR   @INDEX                ; Reset index
     65CF 61  
0624 65D0 00      RTN
0625          
0626          CHECKAF:                        ; Check if we have 'A'..'F'
0627 65D1 CE      CGT   'A'-1,@SCANKEY        ; >= 'A' ?
     65D2 75  
     65D3 40  
0628 65D4 45      BR    ENODIGIT              ; no: -> ENODIGIT
     65D5 E1  
0629 65D6 CE      CGT   'F',@SCANKEY          ; >= 'F' ?
     65D7 75  
     65D8 46  
0630 65D9 65      BS    ENODIGIT              ; Yes: -> ENODIGIT
     65DA E1  
0631 65DB A6      SUB   'A'-10,@SCANKEY       ; Make 'A' into 10
     65DC 75  
     65DD 37  
0632 65DE 05      B     GOTDIGIT              ; Display etc.
     65DF 65  
     65E0 AF
0633          
0634          ENODIGIT:                       ; Here we do not have digit 0-9, A-F
0635 65E1 D6      CEQ    13,@SCANKEY          ; Is it enter?
     65E2 75  
     65E3 0D  
0636 65E4 45      BR     EWAIT                ; No: get next key
     65E5 83  
0637          ; Here we have the digits in VRAM. Decode the number.
0638 65E6 06      CALL   BACK2BEGIN           ; Reset VRAMP to beginning of number
     65E7 65  
     65E8 C6
0639 65E9 BC  !   ST     V@0(@VRAMP),@PAD0    ; Get first digit
     65EA 5C  
     65EB E0  
     65EC 00
     65ED 40
0640 65EE B2      AND    >0F,@PAD0            ; Low 4 bits are the hex digit
     65EF 5C  
     65F0 0F  
0641 65F1 E2      SLL    4,@PAD0
     65F2 5C  
     65F3 04  
0642 65F4 BC      ST     V@1(VRAMP),@PAD1     ; Get second digit
     65F5 5D  
     65F6 E0  
     65F7 01
     65F8 40
0643 65F9 B2      AND    >0F,@PAD1
     65FA 5D  
     65FB 0F  
0644 65FC B4      OR     @PAD1,@PAD0          ; Now PAD0 has the byte.
     65FD 5C  
     65FE 5D  
0645 65FF BC      ST     @PAD0,@0(@PAD2)      ; Store byte
     6600 CF  
     6601 7D
     6602 00
     6603 5E
     6604 5C  
0646 6605 94      INCT   @INDEX
     6606 61  
0647 6607 91      DINC   @PAD2
     6608 5E  
0648 6609 95      DINCT  @VRAMP
     660A 40  
0649 660B D4      CEQ    @INDEX,@PAD4         ; Are we at the end, INDEX==COUNT?
     660C 60  
     660D 61  
0650 660E 45      BR     -!                   ; No, continue
     660F E9  
0651 6610 A4      SUB    @INDEX,@PAD3         ; Reset PAD2:PAD3 pointer (BUGBUG no carry)
     6611 5F  
     6612 61  
0652 6613 06      CALL   BACK2BEGIN           ; Reset VRAMP
     6614 65  
     6615 C6
0653 6616 00      RTN                         ; Done
0654          
0655          
0656          *----------------------------------------
0657          * Display in HEX the byte in PAD0
0658          *----------------------------------------
0659          HEXOUT:
0660 6617 0F    XML >F0       ; Jump via >8300
     6618 F0  
0661 6619 00    RTN
0662          
0663          HEXOUT1:
0664 661A BC      ST   @PAD0,@PAD4
     661B 60  
     661C 5C  
0665 661D E6      SRL   >04,@PAD4       isolate first nibble
     661E 60  
     661F 04  
0666 6620 CE      CGT   >09,@PAD4       greater than 9?
     6621 60  
     6622 09  
0667 6623 66      BS    HEX1            yes
     6624 2A  
0668 6625 A2      ADD   >30,@PAD4       no: make it char 0-9
     6626 60  
     6627 30  
0669 6628 46      BR    HEX2
     6629 2D  
0670 662A A2  HEX1: ADD   >37,@PAD4      yes: make it char A-F
     662B 60  
     662C 37  
0671          HEX2:
0672          ; Output first hex digit (most significant digit)
0673 662D BC      ST    @PAD4,V@0(@VRAMP)
     662E E0  
     662F 00
     6630 40
     6631 60  
0674          ; Work on 2nd digit
0675 6632 BC      ST    @PAD0,@PAD4     copy number
     6633 60  
     6634 5C  
0676 6635 B2      AND   >0F,@PAD4       isolate second nibble
     6636 60  
     6637 0F  
0677 6638 CE      CGT   >09,@PAD4       greater than 9?
     6639 60  
     663A 09  
0678 663B 66      BS    HEX3          yes
     663C 42  
0679 663D A2      ADD   >30,@PAD4       no: make it char 0-9
     663E 60  
     663F 30  
0680 6640 46      BR    HEX4
     6641 45  
0681 6642 A2  HEX3  ADD   >37,@PAD4       yes: make it char A-F
     6643 60  
     6644 37  
0682          HEX4:
0683          ; Output 2nd hex digit (least significant digit)
0684 6645 BC      ST    @PAD4,V@1(@VRAMP)
     6646 E0  
     6647 01
     6648 40
     6649 60  
0685 664A 00      RTN
0686          
0687          * Use the new hex characters which do not have a gap between 9 and A
0688          HEXOUT2:
0689 664B BC      ST   @PAD0,@PAD4
     664C 60  
     664D 5C  
0690 664E BC      ST   @PAD0,@PAD5
     664F 61  
     6650 5C  
0691 6651 E6      SRL  >04,@PAD4       isolate first nibble
     6652 60  
     6653 04  
0692 6654 B2      AND  >0F,@PAD5
     6655 61  
     6656 0F  
0693          TWINHEXBC EQU   (HEXBASECH * 256) + HEXBASECH
0694 6657 A3      DADD TWINHEXBC,@PAD4
     6658 60  
     6659 E0  
     665A E0
0695 665B BD      DST  @PAD4,V@0(VRAMP)
     665C E0  
     665D 00
     665E 40
     665F 60  
0696 6660 01      RTNC
0697          
0698          *----------------------------------------
0699          * Read grommy2 version, update on screen.
0700          * Also read and set bank & shadow values.
0701          *----------------------------------------
0702          SHOW_VERSION
0703 6661 06      CALL G@GINITCMD
     6662 66  
     6663 C6
0704 6664 06      CALL G@GSENDCMD
     6665 66  
     6666 CD
0705          * Check result of command - did we get OK?
0706 6667 31      MOVE 2,G@HWIF,@PAD0
     6668 00  
     6669 02
     666A 5C  
     666B 5F  
     666C F0
0707 666D D7      DCEQ >4F4B,@PAD0        ; did we get OK?
     666E 5C  
     666F 4F  
     6670 4B
0708 6671 66      BS   VER_OK             ; Yes: go to VER_OK
     6672 7E  
0709          ** No grommy2 detected. Put in dummy data.
0710 6673 87      DCLR @PAD2              ; Major and minor zero
     6674 5E  
0711 6675 BE      ST   99,@PAD4           ; Build 99
     6676 60  
     6677 63  
0712 6678 86      CLR  @SHADOW
     6679 51  
0713 667A 86      CLR  @BANK
     667B 50  
0714 667C 46      BR   VER1
     667D 9B  
0715          VER_OK:     ; grommy responded, read data
0716          * Copy values from GROM IF to pad
0717 667E 31      MOVE 3,G@HWIF+8,@PAD2
     667F 00  
     6680 03
     6681 5E  
     6682 5F  
     6683 F8
0718          * Get active bank from grommy2
0719 6684 31      MOVE 1,G@HWIF+3,@BANK
     6685 00  
     6686 01
     6687 50  
     6688 5F  
     6689 F3
0720 668A B2      AND  >0F,@BANK
     668B 50  
     668C 0F  
0721 668D D6      CEQ  8,@BANK            ; Is GRAM bank 8 selected?
     668E 50  
     668F 08  
0722 6690 46      BR   NOGRAM1            ; No, we're good
     6691 95  
0723 6692 BE      ST   3,@BANK            ; yes, convert to 3 here
     6693 50  
     6694 03  
0724          NOGRAM1:
0725          * Get RAM shadow from grommy2
0726 6695 31      MOVE 1,G@HWIF+4,@SHADOW
     6696 00  
     6697 01
     6698 51  
     6699 5F  
     669A F4
0727          VER1:
0728          * Show major version in p2
0729 669B BE      ST  '0',@PAD0
     669C 5C  
     669D 30  
0730 669E A0      ADD @PAD2,@PAD0
     669F 5C  
     66A0 5E  
0731 66A1 BC      ST  @PAD0,V@VEROFS+>A        Write to VRAM
     66A2 A0  
     66A3 AA
     66A4 5C  
0732          * Show minor version in p3
0733 66A5 BE      ST  '0',@PAD0
     66A6 5C  
     66A7 30  
0734 66A8 A0      ADD @PAD3,@PAD0
     66A9 5C  
     66AA 5F  
0735 66AB BC      ST  @PAD0,V@VEROFS+>C        Write to VRAM
     66AC A0  
     66AD AC
     66AE 5C  
0736          * Show build version in p4. The build is two digits from 0 to 99
0737 66AF 86      CLR  @PAD0              Zero fill as the value to divide is 16 bits§
     66B0 5C  
0738 66B1 BC      ST   @PAD4,@PAD1
     66B2 5D  
     66B3 60  
0739 66B4 AE      DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
     66B5 5C  
     66B6 0A  
0740 66B7 A2      ADD  '0',@PAD0
     66B8 5C  
     66B9 30  
0741 66BA BC      ST   @PAD0,V@VEROFS+>E      Write to VRAM
     66BB A0  
     66BC AE
     66BD 5C  
0742 66BE A2      ADD  '0',@PAD1          Remainder
     66BF 5D  
     66C0 30  
0743 66C1 BC      ST   @PAD1,V@VEROFS+>F      Write to VRAM
     66C2 A0  
     66C3 AF
     66C4 5D  
0744 66C5 00      RTN
0745          
0746          
0747          *----------------------------------------
0748          * Init command buffer in pad
0749          *----------------------------------------
0750          GINITCMD
0751 66C6 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
     66C7 00  
     66C8 10
     66C9 40  
     66CA 66  
     66CB DA
0752 66CC 00         RTN
0753          
0754          *----------------------------------------
0755          * Send command to grommy2
0756          *----------------------------------------
0757          GSENDCMD
0758 66CD BC         ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
     66CE 41  
     66CF 40  
0759 66D0 BA         XOR   >FF,@GCMDBYTE+1
     66D1 41  
     66D2 FF  
0760 66D3 25         MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
     66D4 00  
     66D5 10
     66D6 5F  
     66D7 F0
     66D8 40  
0761 66D9 00         RTN
0762          
0763          
0764          GROMMY_DAT
0765 66DA 00         DATA   >00FF,>003F,>0000,>0000
     66DB FF
     66DC 00  
     66DD 3F
     66DE 00  
     66DF 00
     66E0 00  
     66E1 00
0766 66E2 45         TEXT 'EPGROMMY'
     66E3 50  
     66E4 47  
     66E5 52  
     66E6 4F  
     66E7 4D  
     66E8 4D  
     66E9 59  
0767          
0768          
0769          DENSE_FONT ; Define character cells wihtin 4x8 cell
0770          ; Numnbers 0 and 1
0771 66EA 22          BYTE >22
0772 66EB 56          BYTE >56
0773 66EC 52          BYTE >52
0774 66ED 52          BYTE >52
0775 66EE 52          BYTE >52
0776 66EF 52          BYTE >52
0777 66F0 27          BYTE >27
0778 66F1 00          BYTE >00
0779          ; Define a cell with 2 and 3
0780 66F2 26          BYTE >26
0781 66F3 51          BYTE >51
0782 66F4 11          BYTE >11
0783 66F5 26          BYTE >26
0784 66F6 41          BYTE >41
0785 66F7 41          BYTE >41
0786 66F8 76          BYTE >76
0787 66F9 00          BYTE >00
0788          ; Define a cell with 4 and 5
0789 66FA 17          BYTE >17
0790 66FB 34          BYTE >34
0791 66FC 54          BYTE >54
0792 66FD 76          BYTE >76
0793 66FE 11          BYTE >11
0794 66FF 11          BYTE >11
0795 6700 16          BYTE >16
0796 6701 00          BYTE >00
0797          ; Define a cell with 6 and 7
0798 6702 37          BYTE >37
0799 6703 41          BYTE >41
0800 6704 62          BYTE >62
0801 6705 52          BYTE >52
0802 6706 52          BYTE >52
0803 6707 52          BYTE >52
0804 6708 22          BYTE >22
0805 6709 00          BYTE >00
0806          ; Define a cell with 8 and 9
0807 670A 22          BYTE >22
0808 670B 55          BYTE >55
0809 670C 55          BYTE >55
0810 670D 23          BYTE >23
0811 670E 51          BYTE >51
0812 670F 51          BYTE >51
0813 6710 26          BYTE >26
0814 6711 00          BYTE >00
0815          ; Define a cell with A and B
0816 6712 26          BYTE >26
0817 6713 55          BYTE >55
0818 6714 55          BYTE >55
0819 6715 76          BYTE >76
0820 6716 55          BYTE >55
0821 6717 55          BYTE >55
0822 6718 56          BYTE >56
0823 6719 00          BYTE >00
0824          ; Define a cell with C and D
0825 671A 36          BYTE >36
0826 671B 45          BYTE >45
0827 671C 45          BYTE >45
0828 671D 45          BYTE >45
0829 671E 45          BYTE >45
0830 671F 45          BYTE >45
0831 6720 36          BYTE >36
0832 6721 00          BYTE >00
0833          ; Define a cell with E and F
0834 6722 77          BYTE >77
0835 6723 44          BYTE >44
0836 6724 44          BYTE >44
0837 6725 66          BYTE >66
0838 6726 44          BYTE >44
0839 6727 44          BYTE >44
0840 6728 74          BYTE >74
0841 6729 00          BYTE >00
0842          
0843          * Test code copied from Mini Memory
0844 672A 31         MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
     672B 00  
     672C 10
     672D 40  
     672E 66  
     672F DA
0845 6730 BC         ST    @>839A,@>8340                Copy command byte
     6731 40  
     6732 80  
     6733 9A
0846 6734 BC         ST    @>839A,@>8341                The second byte is its complement
     6735 41  
     6736 80  
     6737 9A
0847 6738 BA         XOR   >FF,@>8341
     6739 41  
     673A FF  
0848 673B BC         ST    @>839B,@>8342                Copy p2.
     673C 42  
     673D 80  
     673E 9B
0849 673F 25         MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
     6740 00  
     6741 10
     6742 5F  
     6743 F0
     6744 40  
0850 6745 00         RTN
0851          
0852              copy 'bin2hex.gpl'
              > bin2hex.gpl
0001          * bin2gpl.py output to bin2hex.gpl
0002          * Sun Jul 28 10:43:06 2024
0003          * Binary data
0004          BINDATA:
0005 6746 83    DATA >8302
     6747 02
0006 6748 D0    DATA >d060
     6749 60
0007 674A 83    DATA >835c
     674B 5C
0008 674C 09    DATA >0941
     674D 41
0009 674E 02    DATA >0221
     674F 21
0010 6750 E0    DATA >e000
     6751 00
0011 6752 DB    DATA >dbc1
     6753 C1
0012 6754 FF    DATA >fffe
     6755 FE
0013 6756 D0    DATA >d060
     6757 60
0014 6758 83    DATA >835c
     6759 5C
0015 675A 02    DATA >0241
     675B 41
0016 675C 0F    DATA >0f00
     675D 00
0017 675E 02    DATA >0221
     675F 21
0018 6760 E0    DATA >e000
     6761 00
0019 6762 DB    DATA >dbc1
     6763 C1
0020 6764 FF    DATA >fffe
     6765 FE
0021 6766 04    DATA >045b
     6767 5B
0022          BINLEN EQU >22   ; 34
0023          
              > config.gpl
0853          
0854          *----------------------------------------
0855          * VDP setup for module
0856          *----------------------------------------
0857          GVDPSETUP
0858 6768 BE      ST    >D0,V@>0300      no sprites
     6769 A3  
     676A 00
     676B D0  
0859 676C BE      ST    >F5,V@>0380      init color table as white on blue for all chars
     676D A3  
     676E 80
     676F F5  
0860 6770 35      MOVE  >001F,V@>0380,V@>0381
     6771 00  
     6772 1F
     6773 A3  
     6774 81
     6775 A3  
     6776 80
0861 6777 07      ALL   >20              erase screen
     6778 20  
0862 6779 04      BACK  >F5              screen colors: white on light blue
     677A F5  
0863 677B 00      RTN
0864          
0865              COPY 'screen.gpl'
              > screen.gpl
0001          * Character definitions
0002 677C 00  GUDG96	BYTE >00,>00,>00,>00,>00,>00,>00,>00 ; Character 96
     677D 00  
     677E 00  
     677F 00  
     6780 00  
     6781 00  
     6782 00  
     6783 00  
0003 6784 00  GUDG97	BYTE >00,>00,>70,>43,>72,>42,>42,>72 ; Character 97
     6785 00  
     6786 70  
     6787 43  
     6788 72  
     6789 42  
     678A 42  
     678B 72  
0004 678C 00  GUDG98	BYTE >00,>28,>08,>A9,>2A,>2E,>2B,>29 ; Character 98
     678D 28  
     678E 08  
     678F A9  
     6790 2A  
     6791 2E  
     6792 2B  
     6793 29  
0005 6794 00  GUDG99	BYTE >00,>00,>0F,>09,>09,>0E,>08,>08 ; Character 99
     6795 00  
     6796 0F  
     6797 09  
     6798 09  
     6799 0E  
     679A 08  
     679B 08  
0006 679C 00  GUDG100	BYTE >00,>40,>00,>46,>49,>4F,>48,>46 ; Character 100
     679D 40  
     679E 00  
     679F 46  
     67A0 49  
     67A1 4F  
     67A2 48  
     67A3 46  
0007 67A4 00  GUDG101	BYTE >00,>41,>41,>79,>49,>49,>49,>49 ; Character 101
     67A5 41  
     67A6 41  
     67A7 79  
     67A8 49  
     67A9 49  
     67AA 49  
     67AB 49  
0008 67AC 00  GUDG102	BYTE >00,>40,>40,>1C,>10,>0C,>06,>1C ; Character 102
     67AD 40  
     67AE 40  
     67AF 1C  
     67B0 10  
     67B1 0C  
     67B2 06  
     67B3 1C  
0009 67B4 00  GUDG103	BYTE >00,>00,>00,>00,>00,>00,>1C,>3F ; Character 103
     67B5 00  
     67B6 00  
     67B7 00  
     67B8 00  
     67B9 00  
     67BA 1C  
     67BB 3F  
0010 67BC 00  GUDG104	BYTE >00,>00,>00,>00,>00,>00,>00,>3F ; Character 104
     67BD 00  
     67BE 00  
     67BF 00  
     67C0 00  
     67C1 00  
     67C2 00  
     67C3 3F  
0011 67C4 00  GUDG105	BYTE >00,>00,>00,>00,>00,>00,>00,>9C ; Character 105
     67C5 00  
     67C6 00  
     67C7 00  
     67C8 00  
     67C9 00  
     67CA 00  
     67CB 9C  
0012 67CC 00  GUDG106	BYTE >00,>00,>00,>00,>00,>00,>07,>3F ; Character 106
     67CD 00  
     67CE 00  
     67CF 00  
     67D0 00  
     67D1 00  
     67D2 07  
     67D3 3F  
0013 67D4 00  GUDG107	BYTE >00,>00,>00,>00,>00,>00,>00,>F0 ; Character 107
     67D5 00  
     67D6 00  
     67D7 00  
     67D8 00  
     67D9 00  
     67DA 00  
     67DB F0  
0014 67DC 00  GUDG108	BYTE >00,>00,>00,>00,>00,>00,>06,>9F ; Character 108
     67DD 00  
     67DE 00  
     67DF 00  
     67E0 00  
     67E1 00  
     67E2 06  
     67E3 9F  
0015 67E4 00  GUDG109	BYTE >00,>00,>00,>00,>00,>00,>03,>8F ; Character 109
     67E5 00  
     67E6 00  
     67E7 00  
     67E8 00  
     67E9 00  
     67EA 03  
     67EB 8F  
0016 67EC 00  GUDG110	BYTE >00,>00,>00,>00,>00,>00,>00,>C7 ; Character 110
     67ED 00  
     67EE 00  
     67EF 00  
     67F0 00  
     67F1 00  
     67F2 00  
     67F3 C7  
0017 67F4 00  GUDG111	BYTE >00,>00,>00,>00,>00,>00,>00,>F3 ; Character 111
     67F5 00  
     67F6 00  
     67F7 00  
     67F8 00  
     67F9 00  
     67FA 00  
     67FB F3  
0018 67FC 00  GUDG112	BYTE >00,>00,>00,>00,>00,>00,>C0,>F1 ; Character 112
     67FD 00  
     67FE 00  
     67FF 00  
     6800 00  
     6801 00  
     6802 C0  
     6803 F1  
0019 6804 00  GUDG113	BYTE >00,>00,>00,>00,>00,>00,>60,>F8 ; Character 113
     6805 00  
     6806 00  
     6807 00  
     6808 00  
     6809 00  
     680A 60  
     680B F8  
0020 680C 00  GUDG114	BYTE >00,>00,>00,>00,>00,>00,>00,>FC ; Character 114
     680D 00  
     680E 00  
     680F 00  
     6810 00  
     6811 00  
     6812 00  
     6813 FC  
0021 6814 00  GUDG115	BYTE >00,>03,>0F,>1F,>3F,>3F,>7F,>7E ; Character 115
     6815 03  
     6816 0F  
     6817 1F  
     6818 3F  
     6819 3F  
     681A 7F  
     681B 7E  
0022 681C 00  GUDG116	BYTE >00,>F0,>FC,>FE,>FF,>FF,>3F,>3F ; Character 116
     681D F0  
     681E FC  
     681F FE  
     6820 FF  
     6821 FF  
     6822 3F  
     6823 3F  
0023 6824 00  GUDG117	BYTE >00,>00,>00,>00,>00,>80,>80,>80 ; Character 117
     6825 00  
     6826 00  
     6827 00  
     6828 00  
     6829 80  
     682A 80  
     682B 80  
0024 682C 7F  GUDG118	BYTE >7F,>FF,>FF,>FE,>FE,>FE,>FE,>FE ; Character 118
     682D FF  
     682E FF  
     682F FE  
     6830 FE  
     6831 FE  
     6832 FE  
     6833 FE  
0025 6834 FF  GUDG119	BYTE >FF,>FF,>FF,>7F,>7F,>7F,>7F,>7F ; Character 119
     6835 FF  
     6836 FF  
     6837 7F  
     6838 7F  
     6839 7F  
     683A 7F  
     683B 7F  
0026 683C 3F  GUDG120	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>3F,>3F ; Character 120
     683D 3F  
     683E 3F  
     683F 3F  
     6840 3F  
     6841 3F  
     6842 3F  
     6843 3F  
0027 6844 BC  GUDG121	BYTE >BC,>FC,>FC,>FD,>FD,>FD,>F9,>C1 ; Character 121
     6845 FC  
     6846 FC  
     6847 FD  
     6848 FD  
     6849 FD  
     684A F9  
     684B C1  
0028 684C 7F  GUDG122	BYTE >7F,>FF,>FF,>FC,>FC,>FC,>FC,>FC ; Character 122
     684D FF  
     684E FF  
     684F FC  
     6850 FC  
     6851 FC  
     6852 FC  
     6853 FC  
0029 6854 F8  GUDG123	BYTE >F8,>FC,>FE,>FE,>FE,>FE,>FE,>FE ; Character 123
     6855 FC  
     6856 FE  
     6857 FE  
     6858 FE  
     6859 FE  
     685A FE  
     685B FE  
0030 685C FF  GUDG124	BYTE >FF,>FF,>FF,>9F,>9F,>9F,>9F,>9F ; Character 124
     685D FF  
     685E FF  
     685F 9F  
     6860 9F  
     6861 9F  
     6862 9F  
     6863 9F  
0031 6864 DF  GUDG125	BYTE >DF,>FF,>FF,>E7,>C7,>C7,>C7,>C7 ; Character 125
     6865 FF  
     6866 FF  
     6867 E7  
     6868 C7  
     6869 C7  
     686A C7  
     686B C7  
0032 686C E7  GUDG126	BYTE >E7,>E7,>E7,>F7,>F7,>F7,>F7,>F7 ; Character 126
     686D E7  
     686E E7  
     686F F7  
     6870 F7  
     6871 F7  
     6872 F7  
     6873 F7  
0033 6874 FF  GUDG127	BYTE >FF,>FF,>FF,>F3,>F3,>F3,>F3,>F3 ; Character 127
     6875 FF  
     6876 FF  
     6877 F3  
     6878 F3  
     6879 F3  
     687A F3  
     687B F3  
0034 687C FB  GUDG128	BYTE >FB,>FF,>FF,>FC,>F8,>F8,>F8,>F8 ; Character 128
     687D FF  
     687E FF  
     687F FC  
     6880 F8  
     6881 F8  
     6882 F8  
     6883 F8  
0035 6884 FC  GUDG129	BYTE >FC,>FC,>FC,>FE,>FE,>FE,>FE,>FE ; Character 129
     6885 FC  
     6886 FC  
     6887 FE  
     6888 FE  
     6889 FE  
     688A FE  
     688B FE  
0036 688C FE  GUDG130	BYTE >FE,>FE,>7E,>7E,>7E,>7E,>7E,>3F ; Character 130
     688D FE  
     688E 7E  
     688F 7E  
     6890 7E  
     6891 7E  
     6892 7E  
     6893 3F  
0037 6894 3F  GUDG131	BYTE >3F,>7F,>7F,>7F,>7E,>7E,>7E,>7E ; Character 131
     6895 7F  
     6896 7F  
     6897 7F  
     6898 7E  
     6899 7E  
     689A 7E  
     689B 7E  
0038 689C 7E  GUDG132	BYTE >7E,>7E,>7E,>00,>00,>00,>00,>01 ; Character 132
     689D 7E  
     689E 7E  
     689F 00  
     68A0 00  
     68A1 00  
     68A2 00  
     68A3 01  
0039 68A4 3F  GUDG133	BYTE >3F,>3F,>3F,>7F,>7F,>FF,>FF,>FE ; Character 133
     68A5 3F  
     68A6 3F  
     68A7 7F  
     68A8 7F  
     68A9 FF  
     68AA FF  
     68AB FE  
0040 68AC 80  GUDG134	BYTE >80,>80,>80,>80,>00,>00,>00,>00 ; Character 134
     68AD 80  
     68AE 80  
     68AF 80  
     68B0 00  
     68B1 00  
     68B2 00  
     68B3 00  
0041 68B4 FE  GUDG135	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FF ; Character 135
     68B5 FE  
     68B6 FE  
     68B7 FE  
     68B8 FE  
     68B9 FE  
     68BA FE  
     68BB FF  
0042 68BC 7F  GUDG136	BYTE >7F,>7F,>7F,>7F,>7F,>7F,>7F,>FF ; Character 136
     68BD 7F  
     68BE 7F  
     68BF 7F  
     68C0 7F  
     68C1 7F  
     68C2 7F  
     68C3 FF  
0043 68C4 C1  GUDG137	BYTE >C1,>81,>81,>81,>81,>81,>81,>81 ; Character 137
     68C5 81  
     68C6 81  
     68C7 81  
     68C8 81  
     68C9 81  
     68CA 81  
     68CB 81  
0044 68CC FC  GUDG138	BYTE >FC,>FC,>FC,>FC,>FC,>FC,>FC,>FC ; Character 138
     68CD FC  
     68CE FC  
     68CF FC  
     68D0 FC  
     68D1 FC  
     68D2 FC  
     68D3 FC  
0045 68D4 FE  GUDG139	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>FE,>FE ; Character 139
     68D5 FE  
     68D6 FE  
     68D7 FE  
     68D8 FE  
     68D9 FE  
     68DA FE  
     68DB FE  
0046 68DC 9F  GUDG140	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>9F,>9F ; Character 140
     68DD 9F  
     68DE 9F  
     68DF 9F  
     68E0 9F  
     68E1 9F  
     68E2 9F  
     68E3 9F  
0047 68E4 C7  GUDG141	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>C7,>C7 ; Character 141
     68E5 C7  
     68E6 C7  
     68E7 C7  
     68E8 C7  
     68E9 C7  
     68EA C7  
     68EB C7  
0048 68EC F7  GUDG142	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>F7,>F7 ; Character 142
     68ED F7  
     68EE F7  
     68EF F7  
     68F0 F7  
     68F1 F7  
     68F2 F7  
     68F3 F7  
0049 68F4 F3  GUDG143	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>F3,>F3 ; Character 143
     68F5 F3  
     68F6 F3  
     68F7 F3  
     68F8 F3  
     68F9 F3  
     68FA F3  
     68FB F3  
0050 68FC F8  GUDG144	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>F8,>F8 ; Character 144
     68FD F8  
     68FE F8  
     68FF F8  
     6900 F8  
     6901 F8  
     6902 F8  
     6903 F8  
0051 6904 3F  GUDG145	BYTE >3F,>3F,>3F,>3F,>1F,>1F,>1F,>1F ; Character 145
     6905 3F  
     6906 3F  
     6907 3F  
     6908 1F  
     6909 1F  
     690A 1F  
     690B 1F  
0052 690C 7E  GUDG146	BYTE >7E,>7E,>7E,>7E,>FC,>FC,>FC,>FC ; Character 146
     690D 7E  
     690E 7E  
     690F 7E  
     6910 FC  
     6911 FC  
     6912 FC  
     6913 FC  
0053 6914 01  GUDG147	BYTE >01,>03,>07,>07,>0F,>0F,>1F,>3F ; Character 147
     6915 03  
     6916 07  
     6917 07  
     6918 0F  
     6919 0F  
     691A 1F  
     691B 3F  
0054 691C FC  GUDG148	BYTE >FC,>FC,>F8,>F8,>F0,>E0,>E0,>C0 ; Character 148
     691D FC  
     691E F8  
     691F F8  
     6920 F0  
     6921 E0  
     6922 E0  
     6923 C0  
0055 6924 7F  GUDG149	BYTE >7F,>7F,>3F,>00,>FE,>FE,>FF,>7F ; Character 149
     6925 7F  
     6926 3F  
     6927 00  
     6928 FE  
     6929 FE  
     692A FF  
     692B 7F  
0056 692C FF  GUDG150	BYTE >FF,>FF,>7F,>7F,>7F,>7F,>FF,>FE ; Character 150
     692D FF  
     692E 7F  
     692F 7F  
     6930 7F  
     6931 7F  
     6932 FF  
     6933 FE  
0057 6934 3F  GUDG151	BYTE >3F,>3F,>3F,>3F,>3F,>3F,>00,>00 ; Character 151
     6935 3F  
     6936 3F  
     6937 3F  
     6938 3F  
     6939 3F  
     693A 00  
     693B 00  
0058 693C 81  GUDG152	BYTE >81,>81,>80,>80,>80,>80,>00,>00 ; Character 152
     693D 81  
     693E 80  
     693F 80  
     6940 80  
     6941 80  
     6942 00  
     6943 00  
0059 6944 FC  GUDG153	BYTE >FC,>FC,>FF,>FF,>7F,>1F,>00,>00 ; Character 153
     6945 FC  
     6946 FF  
     6947 FF  
     6948 7F  
     6949 1F  
     694A 00  
     694B 00  
0060 694C FE  GUDG154	BYTE >FE,>FE,>FC,>FC,>F8,>E0,>00,>00 ; Character 154
     694D FE  
     694E FC  
     694F FC  
     6950 F8  
     6951 E0  
     6952 00  
     6953 00  
0061 6954 9F  GUDG155	BYTE >9F,>9F,>9F,>9F,>9F,>9F,>00,>00 ; Character 155
     6955 9F  
     6956 9F  
     6957 9F  
     6958 9F  
     6959 9F  
     695A 00  
     695B 00  
0062 695C C7  GUDG156	BYTE >C7,>C7,>C7,>C7,>C7,>C7,>00,>00 ; Character 156
     695D C7  
     695E C7  
     695F C7  
     6960 C7  
     6961 C7  
     6962 00  
     6963 00  
0063 6964 F7  GUDG157	BYTE >F7,>F7,>F7,>F7,>F7,>F7,>00,>00 ; Character 157
     6965 F7  
     6966 F7  
     6967 F7  
     6968 F7  
     6969 F7  
     696A 00  
     696B 00  
0064 696C F3  GUDG158	BYTE >F3,>F3,>F3,>F3,>F3,>F3,>00,>00 ; Character 158
     696D F3  
     696E F3  
     696F F3  
     6970 F3  
     6971 F3  
     6972 00  
     6973 00  
0065 6974 F8  GUDG159	BYTE >F8,>F8,>F8,>F8,>F8,>F8,>00,>00 ; Character 159
     6975 F8  
     6976 F8  
     6977 F8  
     6978 F8  
     6979 F8  
     697A 00  
     697B 00  
0066 697C FE  GUDG160	BYTE >FE,>FE,>FE,>FE,>FE,>FE,>00,>00 ; Character 160
     697D FE  
     697E FE  
     697F FE  
     6980 FE  
     6981 FE  
     6982 00  
     6983 00  
0067 6984 1F  GUDG161	BYTE >1F,>0F,>0F,>0F,>0F,>1F,>3F,>3F ; Character 161
     6985 0F  
     6986 0F  
     6987 0F  
     6988 0F  
     6989 1F  
     698A 3F  
     698B 3F  
0068 698C FC  GUDG162	BYTE >FC,>FC,>FC,>FC,>F8,>F8,>F8,>F0 ; Character 162
     698D FC  
     698E FC  
     698F FC  
     6990 F8  
     6991 F8  
     6992 F8  
     6993 F0  
0069 6994 3F  GUDG163	BYTE >3F,>7F,>7F,>7F,>7F,>7F,>00,>00 ; Character 163
     6995 7F  
     6996 7F  
     6997 7F  
     6998 7F  
     6999 7F  
     699A 00  
     699B 00  
0070 699C 80  GUDG164	BYTE >80,>FF,>FF,>FF,>FF,>FF,>00,>00 ; Character 164
     699D FF  
     699E FF  
     699F FF  
     69A0 FF  
     69A1 FF  
     69A2 00  
     69A3 00  
0071 69A4 00  GUDG165	BYTE >00,>00,>80,>80,>80,>80,>00,>00 ; Character 165
     69A5 00  
     69A6 80  
     69A7 80  
     69A8 80  
     69A9 80  
     69AA 00  
     69AB 00  
0072 69AC 3F  GUDG166	BYTE >3F,>0F,>00,>00,>00,>00,>00,>00 ; Character 166
     69AD 0F  
     69AE 00  
     69AF 00  
     69B0 00  
     69B1 00  
     69B2 00  
     69B3 00  
0073 69B4 FC  GUDG167	BYTE >FC,>F0,>00,>00,>00,>00,>00,>00 ; Character 167
     69B5 F0  
     69B6 00  
     69B7 00  
     69B8 00  
     69B9 00  
     69BA 00  
     69BB 00  
0074 69BC 3F  GUDG168	BYTE >3F,>00,>00,>00,>00,>00,>00,>00 ; Character 168
     69BD 00  
     69BE 00  
     69BF 00  
     69C0 00  
     69C1 00  
     69C2 00  
     69C3 00  
0075 69C4 E0  GUDG169	BYTE >E0,>00,>00,>00,>00,>00,>00,>00 ; Character 169
     69C5 00  
     69C6 00  
     69C7 00  
     69C8 00  
     69C9 00  
     69CA 00  
     69CB 00  
0076 69CC 3E  GUDG170	BYTE >3E,>60,>60,>60,>60,>60,>32,>1E ; Character 170
     69CD 60  
     69CE 60  
     69CF 60  
     69D0 60  
     69D1 60  
     69D2 32  
     69D3 1E  
0077 69D4 3E  GUDG171	BYTE >3E,>66,>43,>C3,>43,>62,>76,>3C ; Character 171
     69D5 66  
     69D6 43  
     69D7 C3  
     69D8 43  
     69D9 62  
     69DA 76  
     69DB 3C  
0078 69DC 63  GUDG172	BYTE >63,>73,>7B,>6F,>6F,>67,>67,>63 ; Character 172
     69DD 73  
     69DE 7B  
     69DF 6F  
     69E0 6F  
     69E1 67  
     69E2 67  
     69E3 63  
0079 69E4 7C  GUDG173	BYTE >7C,>60,>60,>7C,>60,>60,>60,>60 ; Character 173
     69E5 60  
     69E6 60  
     69E7 7C  
     69E8 60  
     69E9 60  
     69EA 60  
     69EB 60  
0080 69EC C7  GUDG174	BYTE >C7,>CC,>CC,>CC,>CC,>CC,>CE,>C7 ; Character 174
     69ED CC  
     69EE CC  
     69EF CC  
     69F0 CC  
     69F1 CC  
     69F2 CE  
     69F3 C7  
0081 69F4 C0  GUDG175	BYTE >C0,>00,>00,>C0,>E0,>60,>E0,>C0 ; Character 175
     69F5 00  
     69F6 00  
     69F7 C0  
     69F8 E0  
     69F9 60  
     69FA E0  
     69FB C0  
0082 69FC 61  GLINE0_25 BYTE >61,>62,>63,>64,>65,>66,>67,>68,>68,>69,>6A,>6B,>68,>6C,>6D,>6E,>6F,>70,>71,>72,>68,>73,>74,>75
     69FD 62  
     69FE 63  
     69FF 64  
     6A00 65  
     6A01 66  
     6A02 67  
     6A03 68  
     6A04 68  
     6A05 69  
     6A06 6A  
     6A07 6B  
     6A08 68  
     6A09 6C  
     6A0A 6D  
     6A0B 6E  
     6A0C 6F  
     6A0D 70  
     6A0E 71  
     6A0F 72  
     6A10 68  
     6A11 73  
     6A12 74  
     6A13 75  
0083 6A14 76  GLINE1_25 BYTE >76,>77,>78,>79,>7A,>7B,>78,>7C,>7D,>7E,>7F,>80,>81,>82,>83,>84,>85,>86
     6A15 77  
     6A16 78  
     6A17 79  
     6A18 7A  
     6A19 7B  
     6A1A 78  
     6A1B 7C  
     6A1C 7D  
     6A1D 7E  
     6A1E 7F  
     6A1F 80  
     6A20 81  
     6A21 82  
     6A22 83  
     6A23 84  
     6A24 85  
     6A25 86  
0084 6A26 87  GLINE2_24 BYTE >87,>88,>78,>89,>8A,>8B,>78,>8C,>8D,>8E,>8F,>90,>8B,>91,>92,>93,>94
     6A27 88  
     6A28 78  
     6A29 89  
     6A2A 8A  
     6A2B 8B  
     6A2C 78  
     6A2D 8C  
     6A2E 8D  
     6A2F 8E  
     6A30 8F  
     6A31 90  
     6A32 8B  
     6A33 91  
     6A34 92  
     6A35 93  
     6A36 94  
0085 6A37 95  GLINE3_25 BYTE >95,>96,>97,>98,>99,>9A,>97,>9B,>9C,>9D,>9E,>9F,>A0,>A1,>A2,>A3,>A4,>A5
     6A38 96  
     6A39 97  
     6A3A 98  
     6A3B 99  
     6A3C 9A  
     6A3D 97  
     6A3E 9B  
     6A3F 9C  
     6A40 9D  
     6A41 9E  
     6A42 9F  
     6A43 A0  
     6A44 A1  
     6A45 A2  
     6A46 A3  
     6A47 A4  
     6A48 A5  
0086 6A49 A6  GLINE4_9 BYTE >A6,>A7
     6A4A A7  
0087 6A4B A8  GLINE4_28 BYTE >A8,>A9,>AA,>AB,>AC,>AD,>AE,>AF
     6A4C A9  
     6A4D AA  
     6A4E AB  
     6A4F AC  
     6A50 AD  
     6A51 AE  
     6A52 AF  
0088          
0089          G_SCR1
0090 6A53 31      MOVE >0280,G@GUDG96,V@>0B00 ; Copy our screen chars
     6A54 02  
     6A55 80
     6A56 AB  
     6A57 00
     6A58 67  
     6A59 7C
0091          
0092 6A5A 31  	MOVE >0018,G@GLINE0_25,V@>0001
     6A5B 00  
     6A5C 18
     6A5D A0  
     6A5E 01
     6A5F 69  
     6A60 FC
0093 6A61 31  	MOVE >0012,G@GLINE1_25,V@>0027
     6A62 00  
     6A63 12
     6A64 A0  
     6A65 27
     6A66 6A  
     6A67 14
0094 6A68 31  	MOVE >0011,G@GLINE2_24,V@>0047
     6A69 00  
     6A6A 11
     6A6B A0  
     6A6C 47
     6A6D 6A  
     6A6E 26
0095 6A6F 31  	MOVE >0012,G@GLINE3_25,V@>0067
     6A70 00  
     6A71 12
     6A72 A0  
     6A73 67
     6A74 6A  
     6A75 37
0096 6A76 31  	MOVE >0002,G@GLINE4_9,V@>0087
     6A77 00  
     6A78 02
     6A79 A0  
     6A7A 87
     6A7B 6A  
     6A7C 49
0097 6A7D 31  	MOVE >0008,G@GLINE4_28,V@>0094
     6A7E 00  
     6A7F 08
     6A80 A0  
     6A81 94
     6A82 6A  
     6A83 4B
0098          
0099 6A84 00      RTN
0100          
