* config.gpl
* Configurator for GROMMY2
* At this point this is just a demo how to render the generated screen.gpl
* EP 2023-11-26
*
* Compile the GPL code to binary with:
* xga99.py --aorg 0x6000 config.gpl -L config.lst -o config.bin
* output file is config.bin, since the filename ends with g it is treated
* by an emulator such as js99er.net as a GROM file.
*
* This file includes the screen.gpl file at the very end.
*

LALIGN EQU >02              Left alignment of text
LALIGN2 EQU >03


* Grommy2 command buffer in scratchpad
GCMDBYTE EQU >8340
GCMDP2   EQU >8342
GCMDP3   EQU >8343
GCMDP4   EQU >8344
GCMDP5   EQU >8345
GCMDP6   EQU >8346
GCMDP7   EQU >8347

BANK    EQU >8350           Active bank
SHADOW  EQU >8351           Shadow enable / disable
PAD0    EQU >8352
PAD1    EQU >8353
PAD2    EQU >8354
PAD3    EQU >8355
PAD4    EQU >8356

SCANKEY EQU >8375   
* Hardware interface address
HWIF     EQU >5FF0


G6000  DATA >AA01             standard header  version 1
       DATA >0000             # of programs 0
       DATA >0000             no power up
       DATA G6010             program
       DATA >0000             DSRs
       DATA >0000             subprograms
       DATA >0000
       DATA >0000

G6010  DATA >0000         * No next program
       DATA GPROG
       STRI 'GROMMY2 CONFIG'

GVREGS 
    BYTE  >E0              VDP registers values: standard mode
    BYTE  >00              screen image at >0000
    BYTE  >0E              color table at >0380
    BYTE  >01              char patterns at >0800
    BYTE  >06              sprite attributes at >0300
    BYTE  >00              sprite patterns at >0000
    BYTE  >F5              text/screen colors: white / light blue                

GPROG  
    CLR   @>8374
    DST   >0900,@>834A     load upper case chars 32->
    CALL  G@>0018
* Setup roughly as with mini memory          
    MOVE >0007,G@GVREGS,#>01    Set VDP Regs
    CLR   V@>0800          clear charpats 0-31
    MOVE  >00FF,V@>0800,V@>0801

    ST    >7E,@>8373       init subroutine stack
    DCLR  @>8322           clear error code
    DCLR  @>8348           clear flags      

    CLR    @BANK           Actually init from grommy2 
    CLR    @SHADOW         Actually init from grommy2 

    CALL G@GVDPSETUP  

    CALL G@G_SCR1       ; Setup the screen which was automatically generated
* Use the FMT token to add some strings on the screen    
    FMT
    COL LALIGN
    ROW >07
    HTEX 'VERSION 0.0.00 BANK 0 SHADOW 0'
    ROW+ >02
    COL LALIGN
    HTEX 'SELECT GROM    : BANK COPY'
    ROW+ >01
    COL LALIGN
    HTEX 'BANK FOR READS : TO GRAM'
    ROW+ >01
    COL LALIGN2
    HTEX '0 SYSTEM BANK :  A TO COPY'
    ROW+ >01
    COL LALIGN2
    HTEX '1 USER BANK 1 :  B TO COPY'
    ROW+ >01
    COL LALIGN2
    HTEX '2 USER BANK 2 :  C TO COPY'
    ROW+ >01
    COL LALIGN2
    HTEX '3 GRAM BANK'

    ROW+ >02
    COL LALIGN
    HTEX 'SHADOW RAM'
    ROW+ >01
    COL LALIGN2
    HTEX '4 ENABLE'
    ROW+ >01
    COL LALIGN2
    HTEX '5 DISABLE'

    ROW+ >02
    COL LALIGN
    HTEX 'FLASH GRAM TO BANK'
    ROW+ >01
    COL LALIGN2
    HTEX '6 USER BANK 1'
    ROW+ >01
    COL LALIGN2
    HTEX '7 USER BANK 2'
    FEND

* Pattern address of character 0xFF
PATADR EQU >0800+(255*8)      
* Test a couple of chars 
    MOVE 64,G@DENSE_FONT,V@PATADR-64
    ST >F7,V@>17
    ST >F8,V@>18
    ST >F9,V@>19
    ST >FA,V@>1A
    ST >FB,V@>1B
    ST >FC,V@>1C
    ST >FD,V@>1D
    ST >FE,V@>1E

GWAIT
    SCAN
    BS    GOTKEY
* We did not get a key. Animate something.
    ST    >FF,V@>001F      Write char FF to top left corner
    ADD   1,V@PATADR
    B    G@GWAIT          wait for the user to press a key


GOTKEY    
    CGT   '0'-1,@SCANKEY       greater than >= 0
    BR    GG01              no skip forward
    CGT   '9',@SCANKEY        Key greater than '9'?
    BS    GG01              Yes: skip forward
    SUB   '0',@SCANKEY
    CASE  @SCANKEY
    BR    KEY0
    BR    KEY1
    BR    KEY2
    BR    KEY3
    BR    KEY4
    BR    KEY5
    BR    KEY6
    BR    KEY7
    BR    KEY8
    BR    KEY9


KEY4:   ST  1,@SHADOW
    BR  GG01
KEY5:   CLR @SHADOW
    BR  GG01
KEY6:   ST 2,@SHADOW
    BR  GG01

KEY0
KEY1
KEY2
KEY3
    ST @SCANKEY,@BANK
    BR GG01
KEY7
KEY8
KEY9
    CALL  SHOW_VERSION
    BR    GWAIT

GG01    
    CEQ   >0F,@SCANKEY       is it Fctn-9?
    BR    G@GCONT2         no: GCONT2
    EXIT                   yes: reset the TI-99/4A

GCONT2
* Update screen to reflect current status
GUPDATE 
* Status of Shadow RAM enable/disable
    ST  '0',@PAD0
    ADD @SHADOW,@PAD0
    ST  @PAD0,V@>00FF        Write to VRAM
* Status of selected bank
    ST  '0',@PAD0
    ADD @BANK,@PAD0
    ST  @PAD0,V@>00F6        Write to VRAM


* Start update GROM read bank. First erase bank markings.
BANKOFS EQU >184
    ST ' ',V@BANKOFS
    ST ' ',V@BANKOFS+>20
    ST ' ',V@BANKOFS+>40
    ST ' ',V@BANKOFS+>60
    DCLR @PAD0
    ST   @BANK,@PAD3        Copy to low byte the bank #
    DSLL 5,@PAD2          Shift by 5 to get 32 chars per line
    ST  '*',V@BANKOFS(@PAD2)   Screen offset 102
* End update GROM read bank.    
    B   G@GWAIT

*----------------------------------------
* Read grommy2 version, update on screen
*----------------------------------------
SHOW_VERSION
    CALL G@GINITCMD
    CALL G@GSENDCMD
* Debug put in a dummy version
    ST   1,@GCMDP2    
    ST   2,@GCMDP3
    ST   34,@GCMDP4

* Show major version in p2
    ST  '0',@PAD0
    ADD @GCMDP2,@PAD0
    ST  @PAD0,V@>00CA        Write to VRAM
* Show minor version in p3
    ST  '0',@PAD0
    ADD @GCMDP3,@PAD0
    ST  @PAD0,V@>00CC        Write to VRAM
* Show build version in p4. The build is two digits from 0 to 99
    CLR  @PAD0              Zero fill as the value to divide is 16 bitsÂ§
    ST   @GCMDP4,@PAD1      
    DIV  10,@PAD0           Quotiotent in PAD0, remainder PAD1
    ADD  '0',@PAD0
    ST   @PAD0,V@>00CE      Write to VRAM
    ADD  '0',@PAD1          Remainder
    ST   @PAD1,V@>00CF      Write to VRAM
    RTN


*----------------------------------------
* Init command buffer in pad
*----------------------------------------
GINITCMD
       MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    Copy command template from GROM
       RTN

*----------------------------------------
* Send command to grommy2
*----------------------------------------
GSENDCMD
       ST   @GCMDBYTE,@GCMDBYTE+1        Setup the complement of command byte
       XOR   >FF,@GCMDBYTE+1             
       MOVE  >0010,@GCMDBYTE,G@HWIF      Send command to grommy2
       RTN


GROMMY_DAT 
       DATA   >00FF,>003F,>0000,>0000
       TEXT 'EPGROMMY'


DENSE_FONT ; Define character cells wihtin 4x8 cell
; Numnbers 0 and 1
        BYTE >22    
        BYTE >56
        BYTE >52
        BYTE >52
        BYTE >52
        BYTE >52
        BYTE >27    
        BYTE >00   
; Define a cell with 2 and 3                    
        BYTE >26    
        BYTE >51
        BYTE >11
        BYTE >26
        BYTE >41
        BYTE >41
        BYTE >76    
        BYTE >00   
; Define a cell with 4 and 5
        BYTE >17    
        BYTE >34
        BYTE >54
        BYTE >76
        BYTE >11
        BYTE >11
        BYTE >16    
        BYTE >00   
; Define a cell with 6 and 7
        BYTE >37    
        BYTE >41
        BYTE >62
        BYTE >52
        BYTE >52
        BYTE >52
        BYTE >22    
        BYTE >00   
; Define a cell with 8 and 9
        BYTE >22    
        BYTE >55
        BYTE >55
        BYTE >23
        BYTE >51
        BYTE >51
        BYTE >26    
        BYTE >00   
; Define a cell with A and B
        BYTE >26    
        BYTE >55
        BYTE >55
        BYTE >76
        BYTE >55
        BYTE >55
        BYTE >56    
        BYTE >00   
; Define a cell with C and D
        BYTE >36    
        BYTE >45
        BYTE >45
        BYTE >45
        BYTE >45
        BYTE >45
        BYTE >36    
        BYTE >00   
; Define a cell with E and F
        BYTE >77    
        BYTE >44
        BYTE >44
        BYTE >66
        BYTE >44
        BYTE >44
        BYTE >74    
        BYTE >00   

* Test code copied from Mini Memory
       MOVE  >0010,G@GROMMY_DAT,@GCMDBYTE    place parameter string in PAD
       ST    @>839A,@>8340                Copy command byte
       ST    @>839A,@>8341                The second byte is its complement
       XOR   >FF,@>8341
       ST    @>839B,@>8342                Copy p2.
       MOVE  >0010,@>8340,G@HWIF         Copy from PAD @8340 to GRAM @5FF0. Does this work? Yes!
       RTN


*----------------------------------------
* VDP setup for module
*----------------------------------------
GVDPSETUP  
    ST    >D0,V@>0300      no sprites
    ST    >F5,V@>0380      init color table as white on blue for all chars
    MOVE  >001F,V@>0380,V@>0381
    ALL   >20              erase screen
    BACK  >F5              screen colors: white on light blue
    RTN

    COPY 'screen.gpl'
